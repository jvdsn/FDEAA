<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>
<?xml-model href="https://github.com/commoncriteria/transforms/raw/master/schemas/CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>

<!-- for a PP-module -->
<!-- <?xml-model href="../transforms/schemas/CCModule.rng" type="application/xml" 
                  schematypens="http://relaxng.org/ns/structure/1.0"?>
-->

<!-- For PP or cPP -->
<!-- Name of the TOE product  -->
<!-- Plural name of the TOE product (optional)  -->
<!-- Whether to use boilerplate text by default (can be disabled in sections) -->
<!-- A short name for the PP (e.g. App or MDF) -->
<PP target-product="Full Drive Encryption - AA" 
    xmlns="https://niap-ccevs.org/cc/v1"
    xmlns:cc="https://niap-ccevs.org/cc/v1"
    xmlns:sec="https://niap-ccevs.org/cc/v1/section"
    xmlns:h="http://www.w3.org/1999/xhtml" 
    boilerplate='yes'>
<cPP/>

<!-- for FP --> 
<!--
<Package name="TLS"                                   
    xmlns="https://niap-ccevs.org/cc/v1"
    xmlns:h="http://www.w3.org/1999/xhtml"
    xmlns:sec="https://niap-ccevs.org/cc/v1/section"
-->

<!-- For a PP-Module 
<Module
    name="Widget Clients"                              # Name of the Module  
    xmlns="https://niap-ccevs.org/cc/v1"               # Some html magic
    xmlns:h="http://www.w3.org/1999/xhtml"             # uses the "h" namespace for inline HTML
    xmlns:sec="https://niap-ccevs.org/cc/v1/section"   # The "sec" namespace for sections is available
    target-product="Widget"                            # Name of the TOE product
    target-products="Widgets"                          # Plural name of the TOE product (optional)
    boilerplate="yes"                                  # Whether to use boilerplate text by default (can be disabled in sections)
    short="Wid">                                       # A short name for the PP (e.g. App or MDF)
-->

  <!-- PPReference (all documents) -->
  <PPReference>
    <ReferenceTable>
      <PPTitle>collaborative Protection Profile for Full Drive Encryption – Authorization Acquisition</PPTitle>
      <PPVersion>3.0</PPVersion>
      <PPAuthor>Full Disk Encryption international Technical Community</PPAuthor>
      <PPPubDate>2025-10-15</PPPubDate>
      <Keywords>Full Drive Encryption – Authorization Acquisition</Keywords>               <!-- This field is unused and optional -->
    </ReferenceTable>
  </PPReference>

<!-- Revision History (all documents) -->
  <RevisionHistory>
    <entry>
      <version>Round 1</version>
      <date>2015-04-23</date>
      <subject>First draft of version 1.0 for comment</subject>
    </entry>
    <entry>
      <version>1.0</version>
      <date>2015-08-14</date>
      <subject>Release - first version released</subject>
    </entry>
    <entry>
      <version>2.0</version>
      <date>2024-03-28</date>
      <subject>Updated for CC:2022, or whatever</subject>
    </entry>
    <entry>
        <version>3.0</version>
        <date>2025-10-15</date>
        <subject>Updated for CC:2022, reviewing and applying modifications to the PP</subject>
      </entry>
  </RevisionHistory>



<!-- PP Preferences (all documents) -->
<pp-preferences>
     <!-- Indicate that audit events are defined with their SFRs -->
	 <!-- All new documents should do it this way. This will become the default, if it hasn't already.  -->
	 <!-- And this preference might not even be necessary. I should test it. -->
              
	 
	 <!-- Indicates that audit events will be displayed along the associated SFR in the published document -->
	 <!-- rather than in an audit table. -->
<!--     <display-audit-with-sfrs/>     -->

	 <!-- Indicates that the document is using CC:2022. -->
	 <!-- This setting has already been deprecated, but is still allowed for backward compatiblity -->
	 <!-- New douments shoudl use the <CClaimsInfo> element to specify CC:2022 --> 
  <suppress-niap-logo/>
  </pp-preferences>


  <!-- Introduction (all documents) -->
  <!-- Introduction (all documents) -->
  <section title="Introduction" id="sec-intro">

    <!-- PP or TOE Overview -->

    <section title="PP Overview" id="sec-ppoverview">
        <h:p>
		The purpose of the first set of Collaborative Protection Profiles (cPPs) for Full Drive Encryption (FDE): Authorization Acquisition (AA) and Encryption Engine (EE) is to provide requirements for Data-at-Rest protection for a lost device that contains storage. These cPPs allow FDE solutions based in software and/or hardware to meet the requirements. The form factor for a storage device may vary, but could include: system hard drives/solid state drives in servers, workstations, laptops, mobile devices, tablets, and external media. A hardware solution could be a Self-Encrypting Drive or other hardware-based solutions; the interface (USB, SATA, etc.) used to connect the storage device to the host machine is outside the scope of this cPP.
        </h:p><h:p>
        Full Drive Encryption encrypts all data (with certain exceptions) on the storage device and permits access to the data only after successful authorization to the FDE solution. The exceptions include the necessity to leave a portion of the storage device (the size may vary based on implementation) unencrypted for such things as the Master Boot Record (MBR) or other AA/EE pre-authentication software. These FDE cPPs interpret the term “full drive encryption” to allow FDE solutions to leave a portion of the storage device unencrypted so long as it does not contain plaintext user or plaintext authorization data.
        </h:p><h:p>
        Since the FDE cPPs support a variety of solutions, two cPPs describe the requirements for the FDE components shown in Figure 1.  
        </h:p>
        
        <h:p><figure entity="images/fde-components.png" title="FDE Components" id="toe"/></h:p>

        <h:p>The FDE cPP - Authorization Acquisition describes the requirements for the Authorization Acquisition piece and details the security requirements and assurance activities necessary to interact with a user and result in the availability of sending a Border Encryption Value (BEV) to the Encryption Engine.</h:p>
        <h:p>The FDE cPP - Encryption Engine describes the requirements for the Encryption Engine piece and details the necessary security requirements and assurance activities for the actual encryption/decryption of the data by the DEK. Each cPP will also have a set of core requirements for management functions, proper handling of cryptographic keys, updates performed in a trusted manner, audit and self-tests. </h:p>
        <h:p>This TOE description defines the scope and functionality of the Authorization Acquisition, and
            the Security Problem Definition describes the assumptions made about the operating
            environment and the threats to the AA that the cPP requirements address</h:p>
	</section>  <!-- PP Overview -->
	
	<!-- CC and Tech terms.  -->
	<!-- CC terms are auto-generated -->
	<!-- All tech terms are generated from the list below. -->
	<!-- You should add and delete tech terms as required by the technology type. -->
	<tech-terms>
	  <!-- To remove an irrlevant CC term from the document, use the <suppress> element -->
      <suppress>Distributed TOE</suppress>   
      <term abbr='AA' full="Authorization Acquisition"></term>
      <term full="Advanced Encryption Standard" abbr="AES"></term>
      <term full="Authorization Factor">A value that a user knows, has, or is (e.g. password, token, etc.)
        submitted to the TOE to establish that the user is in the community
        authorized to use the hard disk. This value is used in the derivation or
        decryption of the BEV and eventual decryption of the DEK. Note
        that these values may or may not be used to establish the particular
        identity of the user. </term>
        
      <term abbr='BEV' full="Border Encryption Value">A value passed from the FDE Authorization
        Acquisition (AA) to the FDE Encryption Engine (EE) intended to link the key chains
        of the two components.</term>
      <term abbr='BIOS' full="Basic Input Output System"></term>
      


      <term abbr='CBC' full="Cipher Block Chaining"></term>
      <term abbr='CC' full="Common Criteria"></term>
      <term abbr='CCM' full="Counter with CBC-Message Authentication Code"></term>
      <term abbr='CEM' full="Common Evaluation Methodology"></term>
      <term abbr='CPP' full="Collaborative Protection Profile"></term>
      <term abbr='DEK' full="Data Encryption Key">A key used to encrypt data-at-rest.</term>
      <term abbr='DRBG' full="Deterministic Random Bit Generator"></term>
      <term abbr='DSS' full="Digital Signature Standard"></term>
      <term abbr='ECC' full="Elliptic Curve Cryptography"></term>
      <term abbr='ECDSA' full="Elliptic Curve Digital Signature Algorithm"></term>
      <term abbr='EE' full="Encryption Engine"></term>
      <term abbr='EEPROM' full="Electrically Erasable Programmable Read-Only Memory"></term>
      <term abbr='FIPS' full="Federal Information Processing Standards"></term>
      <term abbr='FDE' full="Full Drive Encryption">Refers to partitions of logical blocks of user accessible data as
        managed by the host system that indexes and partitions and an
        operating system that maps authorization to read or write data to blocks
        in these partitions. For the sake of this Security Program Definition
        (SPD) and cPP, FDE performs encryption and authorization on one
        partition, so defined and supported by the OS and file system jointly,
        under consideration. FDE products encrypt all data (with certain
        exceptions) on the partition of the storage device and permits access to
        the data only after successful authorization to the FDE solution. The
        exceptions include the necessity to leave a portion of the storage device
        (the size may vary based on implementation) unencrypted for such
        things as the Master Boot Record (MBR) or other AA/EE preauthentication software. These FDE cPPs interpret the term “full drive
        encryption” to allow FDE solutions to leave a portion of the storage
        device unencrypted so long as it contains no protected data.</term>
      <term abbr='FFC' full="Finite Field Cryptography"></term>
      <term abbr='GCM' full="Galois Counter Mode"></term>
      <term abbr='HMAC' full="Keyed-Hash Message Authentication Code"></term>
      <term abbr='HW' full="Hardware"></term>
      <term abbr='IEEE' full="Institute of Electrical and Electronics Engineers"></term>
      <term full="Host Platform">The local hardware and software the TOE is running on, and does not
        include any peripheral devices (e.g. USB devices) that may be
        connected to the local hardware and software.</term>
      <term full="Intermediate Key">A key used in a point between the initial user authorization and the
        DEK.</term>
      <term abbr='IT' full="Information Technology"></term>
      <term abbr='ITSEF' full="IT Security Evaluation Facility"></term>
      <term abbr='ISO/IEC' full="International Organization for Standardization / International Electrotechnical Commission"></term>
      <term abbr='IV' full="Initialization Vector"></term>
      <term abbr='KEK' full="Key Encryption Key">A key used to encrypt other keys, such as DEKs or storage that
        contains keys.</term>
        <term full="Key Chaining">The method of using multiple layers of encryption keys to protect data.
          A top layer key encrypts a lower layer key which encrypts the data;
          this method can have any number of layers.</term>
          <term full="Key Material">Key material is commonly known as critical security parameter (CSP)
            data, and also includes authorization data, nonces, and metadata.</term>
      <term full="Key Sanitization">A method of sanitizing encrypted data by securely overwriting the key
          that was encrypting the data.</term>
      <term abbr='KMD' full="Key Management Description"></term>
      <term abbr='KRK' full="Key Release Key">A key used to release another key from storage, it is not used for the
        direct derivation or decryption of another key.</term>
      <term abbr='MBR' full="Master Boot Record"></term>
      <term abbr='NIST' full="National Institute of Standards and Technology"></term>
      <term full="Non-Volatile Memory">A type of computer memory that will retain information without
        power. 
        </term>
      <term abbr='OS' full="Operating System">Software which runs at the highest privilege level and can directly
        control hardware resources.</term>
      <term abbr='PBKDF' full="Password-Based Key Derivation Function"></term>
      <term full="Powered-Off State">The device has been shut down.</term>
      <term full="Protected Data">This refers to all data on the storage device with the exception of a
        small portion required for the TOE to function correctly. It is all space
        on the disk a user could write data to and includes the operating
        system, applications, and user data. Protected data does not include the
        Master Boot Record or Pre-authentication area of the drive – areas of
        the drive that are necessarily unencrypted.</term>
      <term abbr='PRF' full="Pseudo Random Function"></term>
      <term abbr='RBG' full="Random Bit Generator"></term>
      <term abbr='RNG' full="Random Number Generator"></term>
      <term abbr='RSA' full="Rivest Shamir Adleman Algorithm"></term>
      <term abbr='SAR' full="Security Assurance Requirements"></term>
      <term abbr='SED' full="Self-Encrypting Drive"></term>
      <term abbr='SHA' full="Secure Hash Algorithm"></term>
      <term abbr='SFR' full="Security Functional Requirements"></term>
      <term abbr='ST' full="Security Target"></term>
      <term abbr='SPD' full="Security Problem Definition"></term>
      <term abbr='SPI' full="Serial Peripheral Interface"></term>
      <term full="Submask">A submask is a bit string that can be generated and stored in a number
        of ways.</term>
      <term abbr='TPM' full="Trusted Platform Module"></term>
      <term abbr='TSF' full="TOE Security Functionality"></term>
      <term abbr='TSS' full="TOE Summary Specification"></term>
      <term abbr='USB' full="Universal Serial Bus"></term>
      <term abbr='XOR' full="Exclusive or"></term>
      <term abbr='XTS' full="XEX (XOR Encrypt XOR) Tweakable Block Cipher with Ciphertext Stealing"></term>

      
    </tech-terms>    

	<!-- Other sections can be added here. -->
	<!-- Commen examples include Scope of Document, Intended Audiance, Compliant Targets of Evaluation,
	     TOE Boundary, TOE Operational Environment, and Roles. These sections can also be included in the
		 TOE/PP Overview aove. -->
     <section title="Implementation" id="sec-TOEimplementation">
      <h:p>
        Full Drive Encryption solutions vary with implementation and vendor combinations. 
      </h:p>
      <h:p>Therefore, vendors will evaluate products that provide both components of the Full Disk
        Encryption Solution (AA and EE) against both cPPs – could be done in a single evaluation
        with one ST. A vendor that provides a single component of a FDE solution would only evaluate
        against the applicable cPP. The FDE cPP is divided into two documents to allow labs to
        independently evaluate solutions tailored to one cPP or the other. When a customer acquires
        an FDE solution, they will either obtain a single vendor product that meets the AA + EE cPPs
        or two products, one of which meets the AA and the other of which meets the EE cPPs.</h:p>
        <h:p>The table below illustrates a few examples for certification.</h:p>
        
        <h:head><h:b><ctr ctr-type="Table" pre="Table" id="atref-mandatory">: Examples of cPP Implementations</ctr></h:b></h:head>			
        <h:tr class="header"><h:td>Event</h:td><h:td/></h:tr>    	
  <h:table border='1'>
      <h:tr>
        <h:th>Implementation</h:th>
        <h:th>cPP</h:th>
        <h:th>Description</h:th>
      </h:tr>
          <h:tr>
          
        <h:td>Host</h:td>
        <h:td>AA</h:td>
        <h:td>Host software provides the interface to a self-encrypting drive</h:td>
      </h:tr>
      <h:tr>
        <h:td>Self-Encrypting Drive (SED)</h:td>
        <h:td>EE</h:td>
        <h:td>A self-encrypting drive used in combination with separate host
          software</h:td>
      </h:tr>
      <h:tr>
        <h:td>Software FDE</h:td>
        <h:td>AA + EE</h:td>
        <h:td>A software full drive encryption solution</h:td>
      </h:tr>
      <h:tr>
        <h:td>Hybrid</h:td>
        <h:td>AA + EE</h:td>
        <h:td>A single vendor’s combination of hardware (e.g. hardware encryption engine,
          cryptographic co-processor) and software / firmware</h:td>
      </h:tr>
  </h:table>

     </section>
     <section title="TOE Overview" id="sec-TOEoverview">
        <h:p>
          The Target of Evaluation (TOE) for this cPP (Authorization Acquisition) may be either a Host software solution that manages a HW Encryption Engine (e.g. a SED) or as part of a combined evaluation of this cPP and the Encryption Engine cPP for a vendor that is providing a solution that includes both components.
        </h:p>
        <h:p>The following sections provide an overview of the functionality of the FDE AA as well as the security capabilities.</h:p>

     
     <section title="Authorization Acquisition Introduction" id="sec-TOEauthorization-acquisition-introduction">
      <h:p>
      The Authorization Acquisition sends a Border Encryption Value (BEV), which could be a Key Encryption Key (KEK), a Key Releasing Key (KRK), or some other type of key to the Encryption Engine. The EE does not have to use this value directly as the key to decrypt or release the DEK. It may use it as part of a scheme that uses other intermediate keys to eventually protect the DEK. A KEK wraps other keys, notably the DEK or other intermediary keys which chain to the DEK. Key Releasing Keys (KRKs) authorize the EE to release either the DEK or other intermediary keys which chain to the DEK. Figure 2 illustrates the components within AA and its relationship with EE.
    </h:p>        
      <figure entity="images/fde-authorization_acquisition.png" title="Authorization Acquisition Details" id="toe"/>    
    <h:p>
      Authorization factors may be unique to individual users or may be used by a group of individuals. In other words, the EE requires authorization factors from the AA to establish that the possessor of the authorization factor belongs to the community of users authorized to access information stored on the storage device (and does not require specific user authorization). Examples of authorization factors include, but are not limited to, passwords, passphrases, or randomly generated values stored on USB tokens or a pin to release a key on hardware storage media such as a Trusted Platform Module (TPM).
    </h:p>
     </section>
     <section title="Authorization Acquisition Security Capabilities" id="sec-TOEauthorization-acquisition_security_capabilities">
     <h:p>
      The AA collects authorization factors which the EE uses to access data on the storage device and perform a variety of management functions. Depending on the type of authorization factor, the AA may condition them further. For example, it may apply an approved password-based key derivation function (e.g. PBKDF2) on passwords. An external token containing a randomly generated value of sufficient strength may require no further conditioning on the authorization factors. The AA may then combine one or more authorization factors in such a way that maintains the strength of both factors.
     </h:p><h:p>
     The AA serves as the main management interface to the EE. However, the EE may also offer management functionality. The requirements in the EE cPP address how the EE should handle these features. The management functionality may include the ability to send commands to the EE such as changing a DEK, setting up new users, managing KEKs and other intermediate keys, and performing a key sanitization (e.g. overwrite of the DEK). It may also forward commands that partition the drive for use by multiple users. However, this document defers the management of partitions and assumes that administrators will only provision and manage the data on whole drives.
     </h:p>
    </section>
    <section title="Interface/Boundary" id="sec-TOEInterface-Boundary">
      The interface and boundary between the AA and the EE will vary based on the implementation. If one vendor provides the entire FDE solution, then it may choose to not implement an interface between the AA and EE components. If a vendor provides a solution for one of the components, then the assumptions below state that the channel between the two components is sufficiently secure. Although standards and specifications exist for the interface between AA and EE components, the cPP does not require vendors to follow the standards in this version.
    </section>
    </section>
    
    <section title="Compliant Targets of Evaluation" id="sec-TOEdescription">
      <section title="TOE Boundary" id="TOEboundary">
        <h:p>
        The environment in which the AA functions may differ depending on the boot stage of the platform in which it operates, see Figure 3. Depending on the solution’s architecture, aspects of provisioning, initialization, and authorization may be performed in the Pre-Boot environment, while encryption, decryption and management functionality are likely performed in the Operating System environment. In non-software solutions, encryption/decryption starts in Pre30 OS environment and continues into OS present environment.</h:p>
        <h:p>
          In the Operating System environment, the Authorization Acquisition has the full range of services available from the operating system (OS), including hardware drivers, cryptographic libraries, and perhaps other services external to the TOE.
        </h:p>
        <h:p>The Pre-Boot environment is much more constrained with limited capabilities. This environment turns on the minimum number of peripherals and loads only those drivers necessary to bring the platform from a cold start to executing a fully functional operating system with running applications.</h:p>
        <h:p>The AA TOE may include or leverage features and functions within the operational environment.</h:p>
        <figure entity="images/fde-operating-env.png" title="Operational Environment" id="toe-oe"/>
      </section>
      
    </section>  <!-- Compliant TOEs -->

	<!-- Use Cases (optional) -->
    <section title="Use Cases" id="sec-usecases">
      The use case for a product conforming to the FDE cPPs is to protect data at rest on a device that is lost or stolen while powered off without any prior access by an adversary. The use case where an adversary obtains a device that is in a powered state and is able to make modifications to the environment or the TOE itself (e.g., evil maid attacks) is not addressed by these cPPs (i.e., FDE-AA and FDE- EE).
      <!-- 
      <usecases/>
      -->

    </section>  <!-- Use Cases -->

  </section>   <!-- Introduction  -->


  <!-- Conformance Claims Section -->
  <!-- New conformance claims section for CC:2022. -->
  <!-- If boilerplate is "yes" something that is probably incorrect is generated -->
  <section title="Conformance Claims" id="sec-cclaims" boilerplate="no">

	<!-- cc-version: cc-2022r1 or cc-31r5   -->
	<!-- cc-approach: standard or direct-rationale  -->
	<!-- display: Should this info be displayed in the Conformance -->
	<!-- Claims section? If no, you have to write a free-form section -->
	<CClaimsInfo 
		cc-version="cc-2022r1"         
		cc-approach="direct-rationale"         
		display="yes">                 

		<!-- Conformance for STs: exact, strict, or demonstrable -->
		<cc-st-conf>exact</cc-st-conf>                  

		<!-- Part 2 & 3 conformance (extended or conformant) -->
		<cc-pt2-conf>extended</cc-pt2-conf>           
		<cc-pt3-conf>conformant</cc-pt3-conf>           

		<!-- Claims conformance to these other PPs (none)-->
		<cc-pp-conf/>              		  
		
		<!-- Can be in a configuration with these PPs and Modules -->
		<cc-pp-config-with>             
		</cc-pp-config-with>

		<!-- Package claims -->
		<cc-pkg-claim/>

	


	</CClaimsInfo>
  </section>  <!-- Conformance Claims -->
  

  
  <section title="Security Problem Definition" id="sec-spd">


    <sec:Threats>
      <h:p>This section provides a narrative that describes how the requirements mitigate the mapped
        threats. A requirement may mitigate aspects of multiple threats. A requirement may only mitigate a threat in a limited way. Some requirements are optional, either because the TSF fully mitigates the threat without the additional requirements being claimed or because the TSF relies on its Operational Environment to provide the functionality that is described by the optional requirements.</h:p>
      <h:p>A threat consists of a threat agent, an asset and an adverse action of that threat agent on that asset. The threat agents are the entities that put the assets at risk if an adversary obtains a lost or stolen storage device. Threats drive the functional requirements for the target of evaluation (TOE). For instance, one threat below is T.UNAUTHORIZED_DATA_ACCESS. The threat agent is the possessor (unauthorized user) of a lost or stolen storage device. The asset is the data on the storage device, while the adverse action is to attempt to obtain those data from the storage device. This threat drives the functional requirements for the storage device encryption (TOE) to authorize who can use the TOE to access the hard disk and encrypt/decrypt the data. Since possession of the KEK, DEK, intermediate keys, authorization factors, submasks, and random numbers or any other values that contribute to the creation of keys or authorization factors could allow an unauthorized user to defeat the encryption, this SPD considers key material equivalent to the data in importance and they appear among the other assets addressed below.</h:p>
      <h:p>It is important to reemphasize at this point that this collaborative Protection Profile does not expect the product (TOE) to defend against the possessor of the lost or stolen hard disk who can introduce malicious code or exploitable hardware components into the Target of Evaluation (TOE) or the Operational Environment. It assumes that the user physically protects the TOE and that the Operational Environment provides sufficient protection against logical attacks. One specific area where a conformant TOE offers some protection is in providing updates to the TOE; other than this area, though, this cPP mandates no other countermeasures. Similarly, these requirements do not address the “lost and found” hard disk problem, where an adversary may have taken the hard disk, compromised the unencrypted portions of the boot device (e.g., MBR, boot partition), and then made it available to be recovered by the original user so that they would execute the compromised code.</h:p>

		<threats>
		
		  <threat id="t-auth-guessing" name="T.AUTHORIZATION_GUESSING">
		    <description>
		      Threat agents may exercise host software to repeatedly guess authorization factors, such as passwords and PINs. Successful guessing of the authorization factors may cause the TOE to release BEV or otherwise put it in a state in which it discloses protected data to unauthorized users. 
		    </description>
		    <addressed-by>FCS_AFA_EXT.1</addressed-by><rationale>Mitigates this threat by requiring a set of authorization factors that will be difficult to guess.</rationale>
		    <addressed-by>FCS_OTV_EXT.1</addressed-by><rationale>Mitigates this threat by requiring  proper salts, which will prevent pre-computed attacks.</rationale>
		    <addressed-by>FCS_PCC_EXT.1 (selection-based)</addressed-by><rationale>Mitigates this threat by requiring user-provided-factors are conditioned to increase the cost of repeatedly guessing a user provided value.</rationale>
		    <addressed-by>FCS_SMC_EXT.1 (selection-based)</addressed-by><rationale>Mitigates this threat by requiring multifactor authentication options, further increasing the difficulty of guessing a authentication factor.</rationale>
		    <addressed-by>FCS_VAL_EXT.1 (selection-based)</addressed-by><rationale>Mitigates this threat by requiring several options for enforcing validation, such as key sanitization of the DEK or when a configurable number of failed validation attempts is reached within a 24 hour period. This mitigates brute force attacks against authorization factors such as passwords and pins.</rationale>
		  </threat>
		  
		  <threat id="t-keying_material_compromise" name="T.KEYING_MATERIAL_COMPROMISE">
		    <description>Possession of any of the keys, authorization factors, submasks, and random
		      numbers or any other values that contribute to the creation of keys or authorization factors
		      could allow an unauthorized user to defeat the encryption. The cPP considers possession of
		      key material of equal importance to the data itself. Threat agents may look for key material
		      in unencrypted sectors of the storage device and on other peripherals in the operating environment
		      (OE), (e.g., BIOS configuration, SPI flash).
		    </description>
		    <addressed-by>FCS_AFA_EXT.1</addressed-by><rationale>Mitigates this threat by requiring the authorization factors to be accepted by the TOE.</rationale>
		    <addressed-by>FCS_AFA_EXT.2</addressed-by><rationale>Mitigates this threat by requiring a valid authorization to decrypt the protected material.</rationale>
		    <addressed-by>FCS_CKM.6</addressed-by><rationale>Mitigates this threat by ensuring proper key material destruction.</rationale>
		    <addressed-by>FCS_CKM.6/Power</addressed-by><rationale>Mitigates this threat by ensuring proper key material destruction.</rationale>
		    <addressed-by>FCS_COP.1/Hash</addressed-by><rationale>Mitigates this threat by performing cryptographic hashing services.</rationale>
		    <addressed-by>FCS_KYC_EXT.1</addressed-by><rationale>Mitigates this threat by requiring chaining of keys to produce a BEV.</rationale>
		    <addressed-by>FCS_OTV_EXT.1</addressed-by><rationale>Mitigates this threat by requiring additional obfuscation to the protected key material by introducing IV's and salting.</rationale>
		    <addressed-by>FMT_MOF.1</addressed-by><rationale>Mitigates this threat by restricting the ability to modified compliant power states to authorized users.</rationale>
		    <addressed-by>FMT_SMF.1</addressed-by><rationale>Mitigates this threat by ensuring the TSF provides the functions necessary to manage important aspects of the TOE including generating</rationale>
		    <addressed-by>FMT_SMR.1</addressed-by><rationale>Mitigates this threat by assigning users with the proper account permissions and privileges.</rationale>
		    <addressed-by>FPT_KYP_EXT.1</addressed-by><rationale>Mitigates this threat by requiring unwrapped key material is not stored in non-volatile memory.</rationale>        
		    <addressed-by>FPT_PWR_EXT.1</addressed-by><rationale>Mitigates this threat by requiring the TOE to meet a compliant power saving state that protects and/or destroys key materials.</rationale>
		    <addressed-by>FPT_PWR_EXT.2</addressed-by><rationale>Mitigates this threat by requiring the TOE to enter into a safe state based on each condition. </rationale>
		    <addressed-by>FCS_CKM.1/AKG (optional)</addressed-by><rationale>Mitigates this threat by requiring asymmetric key generation.</rationale>
		    <addressed-by>FCS_CKM.5.1 (selection-based)</addressed-by><rationale>Mitigates this threat by requiring ensuring strong key derivation.</rationale>
		    <addressed-by>FCS_PCC_EXT.1 (selection-based)</addressed-by><rationale>Mitigates this threat by requiring user-provided-factors are conditioned to increase the cost of repeatedly guessing a user provided value.</rationale>
		    <addressed-by>FCS_CKM.1/SKG (selection-based)</addressed-by><rationale>Mitigates this threat by requiring symmetric cryptographic key generation.</rationale>		    
		    <addressed-by>FCS_COP.1/KeyedHash (selection-based)</addressed-by><rationale>Mitigates this threat by performing keyed-hash message authentication.</rationale>
		    <addressed-by>FCS_COP.1/KeyEnc (selection-based)</addressed-by><rationale>Mitigates this threat by performing key encryption and decryption.</rationale>
		    <addressed-by>FCS_COP.1/KeyEncap (selection-based)</addressed-by><rationale>Mitigates this threat by performing key transport.</rationale>
		    <addressed-by>FCS_COP.1/KeyWrap (selection-based)</addressed-by><rationale>Mitigates this threat by performing key wrapping.</rationale>			  
		    <addressed-by>FCS_COP.1/SKC (selection-based)</addressed-by><rationale>Mitigates this threat by performing data encryption and encryption.</rationale>
		    <addressed-by>FCS_RBG.1 (selection-based)</addressed-by><rationale>Mitigates this threat by randomizing the generated keys in order to reduce the likelihood of guessing the future keys.</rationale>
		    <addressed-by>FCS_RBG.2 (selection-based)</addressed-by><rationale>Mitigates this threat by ensuring that the TOE's DRBG is seeded with sufficient entropy to ensure the generation of strong cryptographic keys.</rationale>
		    <addressed-by>FCS_RBG.3 (selection-based)</addressed-by><rationale>Mitigates this threat by ensuring that the TOE's DRBG is seeded with sufficient entropy to ensure the generation of strong cryptographic keys.</rationale>
		    <addressed-by>FCS_RBG.4 (selection-based)</addressed-by><rationale>Mitigates this threat by ensuring that the TOE's DRBG is seeded with sufficient entropy to ensure the generation of strong cryptographic keys.</rationale>
		    <addressed-by>FCS_RBG.5 (selection-based)</addressed-by><rationale>Mitigates this threat by ensuring that the TOE's DRBG is seeded with sufficient entropy to ensure the generation of strong cryptographic keys.</rationale>
		    <addressed-by>FCS_SMC_EXT.1 (selection-based)</addressed-by><rationale>Mitigates this threat by obscuring the submasks via a XOR or hashing operation..</rationale>
		    <addressed-by>FCS_VAL_EXT.1 (selection-based</addressed-by><rationale>Mitigates this threat by defining methods for validation of keying material and number of validation attempts.</rationale>
		    <addressed-by>FPT_FLS.1 (selection-based)</addressed-by><rationale>Mitigates this threat by ensuring that a malfunctioning DRBG function cannot be used to generate potentially insecure keys.</rationale>
		    <addressed-by>FPT_TST.1 (selection-based)</addressed-by><rationale>Mitigates this threat by verifying the cryptographic functionality through the self testing functionality.</rationale>
		  </threat>
		  
		  <threat id="t-keyspace-exhaust" name="T.KEYSPACE_EXHAUST">
		    <description>Threat agents may perform a cryptographic exhaust against the key space. Poorly chosen encryption algorithms and parameters allow attackers to exhaust the key space through brute force and give them unauthorized access to the data.</description>
		    <addressed-by>FCS_KYC_EXT.1</addressed-by><rationale>Mitigates this threat by ensuring ensures all keys protecting the BEV are of the same strength.</rationale>        
		    <addressed-by>FCS_CKM.1/AKG (optional)</addressed-by><rationale>Mitigates this threat by requiring asymmetric key generation.</rationale>
		    <addressed-by>FCS_CKM.1/SKG (selection-based)</addressed-by><rationale>Mitigates this threat by requiring symmetric cryptographic key generation.</rationale>
		    <addressed-by>FCS_RBG.1 (selection-based)</addressed-by><rationale>Mitigates this threat by ensuring that keys used for trusted communications are generated using a secure DRBG. </rationale>
		    <addressed-by>FCS_RBG.2 (selection-based)</addressed-by><rationale>Mitigates this threat by ensuring that the TOE's DRBG is seeded with sufficient entropy to ensure the generation of strong cryptographic keys.</rationale>
		    <addressed-by>FCS_RBG.3 (selection-based)</addressed-by><rationale>Mitigates this threat by ensuring that the TOE's DRBG is seeded with sufficient entropy to ensure the generation of strong cryptographic keys.</rationale>
		    <addressed-by>FCS_RBG.4 (selection-based)</addressed-by><rationale>Mitigates this threat by ensuring that the TOE's DRBG is seeded with sufficient entropy to ensure the generation of strong cryptographic keys.</rationale>
		    <addressed-by>FCS_RBG.5 (selection-based)</addressed-by><rationale>Mitigates this threat by ensuring that the TOE's DRBG is seeded with sufficient entropy to ensure the generation of strong cryptographic keys.</rationale>
		    <addressed-by>FPT_FLS.1 (selection-based)</addressed-by><rationale>Mitigates this threat by ensuring that a malfunctioning DRBG function cannot be used to generate potentially insecure keys.</rationale>      
		    <addressed-by>FPT_TST.1 (selection-based)</addressed-by><rationale>Mitigates this threat by verifying the cryptographic functionality through the self testing functionality.</rationale>		    
		  </threat>
		  
		  <threat id="t-unauth-data-access" name="T.UNAUTHORIZED_DATA_ACCESS">
				<description>The cPP addresses the primary threat of unauthorized disclosure of protected data stored on a storage device. If an adversary obtains a lost or stolen storage device (e.g., a storage device contained in a laptop or a portable external storage device), they may attempt to connect a targeted storage device to a host of which they have complete control and have raw access to the storage device (e.g., to specified disk sectors, to specified blocks).
				</description>
				<addressed-by>FCS_AFA_EXT.2</addressed-by><rationale>Mitigates this threat by requiring authentication to be re-entered upon return from a compliant power state. </rationale>
			  <addressed-by>FMT_MOF.1</addressed-by><rationale>Mitigates this threat by restricting the authorized user's ability to modify compliant power states.</rationale>
			  <addressed-by>FMT_SMF.1</addressed-by><rationale>Mitigates this threat by ensuring the TSF provides the functions necessary to manage important aspects of the TOE including requests to change and erase the DEK.</rationale>        
			  <addressed-by>FMT_SMR.1</addressed-by><rationale>Mitigates this threat by assigning users with the proper account permissions and privileges. This can be used with FMT_MOF.1 to restrict users to be able to modify certain power states covered in FMT_MOF.1.</rationale>
			  <addressed-by>FPT_PWR_EXT.1</addressed-by><rationale>Mitigates this threat by defining what power states are compliant for the TOE.</rationale>
			  <addressed-by>FPT_PWR_EXT.2</addressed-by><rationale>Mitigates this threat by defining conditions in which the TOE will enter a compliant power state. These requirements ensure the device is secure if lost in a compliant power state.</rationale>        
		    <addressed-by>FCS_VAL_EXT.1 (selection-based)</addressed-by><rationale>Mitigates this threat by verifying the correct authentication and limits attempts to decrypt the data.</rationale>
		    <addressed-by>FPT_TST.1 (selection-based)</addressed-by><rationale>Mitigates by testing the behavior of the cryptographic functions through the use of the self-tests.</rationale>			            
      </threat>

		  <threat id="t-unauth_update" name="T.UNAUTHORIZED_UPDATE">
				<description>Threat agents may attempt to perform an update of the product which compromises the security features of the TOE. Poorly chosen update protocols, signature generation and verification algorithms, and parameters may allow attackers to install software or firmware that bypasses the intended security features and provides them unauthorized access to data.
				</description>        
		    <addressed-by>FCS_COP.1/SigVer</addressed-by><rationale>Mitigates this threat by defining the signature function that is used to verify updates.</rationale>        
		    <addressed-by>FMT_SMF.1</addressed-by><rationale>Mitigates this threat by ensuring the TSF provides the functions necessary to manage important behavior of the TOE which includes the initiation of system firmware/software updates.</rationale>
        <addressed-by>FPT_TUD_EXT.1</addressed-by><rationale>Mitigates this threat by providing authorized users the ability to query the current version of the TOE software/firmware, initiate updates, and verify updates prior to installation using a manufacturer digital signature.</rationale>       
		
		  </threat>
		</threats>
    </sec:Threats>
	
	<!-- Assumptions refer to operational objective objectives regardless of whether -->
	<!-- the document uses standard or direct rationale. -->
	
    <section title="Assumptions" id="sec-assumptions">
      <assumptions>
        <assumption name="A.INITIAL_DRIVE_STATE">
          <description> <h:p>
            Users enable Full Drive Encryption on a newly provisioned or initialized storage device free of protected data in areas not targeted for encryption. The cPP does not intend to include requirements to find all the areas on storage devices that potentially contain protected data. In some cases, it may not be possible - for example, data contained in “bad” sectors.
          </h:p><h:p>
            While inadvertent exposure to data contained in bad sectors or un-partitioned space is unlikely, one may use forensics tools to recover data from such areas of the storage device. Consequently, the cPP assumes bad sectors, un-partitioned space, and areas that must contain unencrypted code (e.g., MBR and AA/EE pre-authentication software) contain no protected data.
          </h:p>
          </description>
          <objective-refer ref="OE.INITIAL_DRIVE_STATE">            
              <rationale>The operational environment objective OE.INITIAL_DRIVE_STATE is realized through A.INITIAL_DRIVE_STATE.</rationale>
            </objective-refer>
        </assumption>
        
   <assumption name="A.PASSWORD_STRENGTH">
    <description>Authorized users ensure passwords and passphrase authorization factors have sufficient strength and entropy to reflect the sensitivity of the data being protected.</description>
    <objective-refer ref="OE.PASSPHRASE_STRENGTH">
      <rationale>The operational environment objective OE.PASSPHRASE_STRENGTH is realized through A.PASSWORD_STRENGTH.</rationale>
    </objective-refer>
  </assumption>   
        
    <assumption name="A.PHYSICAL">
    <description>The platform is assumed to be physically protected in its Operational Environment and not subject to physical attacks that compromise the security and/or interfere with the platform’s correct operation.</description>
    <objective-refer ref="OE.PHYSICAL">
      <rationale>The operational environment objective OE.PHYSICAL is realized through A.PHYSICAL.</rationale>
    </objective-refer>
      
  </assumption><assumption name="A.PLATFORM_IA">
    <description>The product does not interfere with or change the normal platform identification and authentication functionality such as the operating system login. It may provide authorization factors to the operating system's login interface, but it will not change or degrade the functionality of the actual interface.</description>
    <objective-refer ref="OE.PLATFORM_IA">
      <rationale>The operational environment objective OE.PLATFORM_I&amp;A is realized through A.PLATFORM_I&amp;A.</rationale>
    </objective-refer>
  </assumption>   
        
        <assumption name="A.PLATFORM_STATE">
          <description>The platform in which the storage device resides (or an external storage device is connected) is free of malware that could interfere with the correct operation of the product.</description>
          <objective-refer ref="OE.PLATFORM_STATE">
            <rationale>The operational environment objective OE.PLATFORM_STATE is realized through A.PLATFORM_STATE.</rationale>
          </objective-refer>
        </assumption>
        
      <assumption name="A.POWER_DOWN">
      <description><h:p>The user does not leave the platform and/or storage device unattended until all volatile memory is erased after a power-off, so memory remnant attacks are infeasible.</h:p><h:p>Authorized users do not leave the platform and/or storage device in a mode where sensitive information persists in non-volatile storage (e.g., lock screen). Users power the platform and/or storage device down or place it into a power managed state, such as a “hibernation mode”.</h:p></description>
      <objective-refer ref="OE.POWER_DOWN">
        <rationale>The operational environment objective OE.POWER_DOWN is realized through A.POWER_DOWN.</rationale>
      </objective-refer>
    </assumption>
        <assumption name="A.SECURE_STATE">
          <description>Upon the completion of proper provisioning, the TOE is only assumed secure when in a powered off state up until it is powered on and receives initial authorization.</description>
            <objective-refer ref="OE.POWER_DOWN">
              <rationale>The operational environment objective OE.POWER_DOWN is realized through A.SECURE_STATE.</rationale>
            </objective-refer>
        </assumption>
        
        <assumption name="A.SINGLE_USE_ET">
        <description>External tokens that contain authorization factors are used for no other purpose than to store the external token authorization factors.</description>
        <objective-refer ref="OE.SINGLE_USE_ET">
          <rationale>The operational environment objective OE.SINGLE_USE_ET is realized through A.SINGLE_USE_ET.</rationale>
        </objective-refer>
      </assumption>
  
  <assumption name="A.STRONG_CRYPTO">
    <description>All cryptography implemented in the Operational Environment and used by the product meets the requirements listed in the cPP. This includes generation of external token authorization factors by a RBG. </description>
    <objective-refer ref="OE.STRONG_ENVIRONMENT_CRYPTO">
      <rationale>The operational environment objective OE.STRONG_ENVIRONMENT_CRYPTO is realized through A.STRONG_CRYPTO.</rationale>
    </objective-refer>
  </assumption>
    <assumption name="A.TRAINED_USER">
          <description> Authorized users follow all provided user guidance, including keeping passwords and passphrases and external tokens securely stored separately from the storage device and/or platform.</description>
            <objective-refer ref="OE.PASSPHRASE_STRENGTH">
              <rationale>The operational environment objective OE.PASSPHRASE_STRENGTH is realized through A.TRAINED_USER.</rationale>
            </objective-refer>
            <objective-refer ref="OE.POWER_DOWN">
              <rationale>The operational environment objective OE.POWER_DOWN is realized through A.TRAINED_USER.</rationale>
            </objective-refer>
            <objective-refer ref="OE.SINGLE_USE_ET">
              <rationale>The operational environment objective OE.SINGLE_USE_ET is realized through A.TRAINED_USER.</rationale>
            </objective-refer>
            <objective-refer ref="OE.TRAINED_USERS">
              <rationale>The operational environment objective OE.TRAINED_USERS is realized through A.TRAINED_USER.</rationale>
            </objective-refer>
        </assumption>
        <assumption name="A.TRUSTED_CHANNEL">
          <description>Communication among and between product components (e.g., AA and EE) is sufficiently protected to prevent information disclosure. In cases in which a single product fulfils both cPPs, then the communication between the components does not extend beyond the boundary of the TOE (e.g., communication path is within the TOE boundary). In cases in which independent products satisfy the requirements of the AA and EE, the physically close proximity of the two products during their operation means that the threat agent has very little opportunity to interpose itself in the channel between the two without the user noticing and taking appropriate actions.</description>
          <objective-refer ref="OE.TRUSTED_CHANNEL">
            <rationale>The operational environment objective OE.TRUSTED_CHANNEL is realized through A.TRUSTED_CHANNEL.</rationale>
          </objective-refer>
        </assumption>
      </assumptions>
    </section>   <!-- Assumptions -->
	
	<!-- OSPs refer to Objectives or OE Objectives in standard approach documents. -->
	<!-- In direct rationale PPs, they should refer to OE Objectives -->
    <section title="Organizational Security Policies" id="sec-OSPs">
     
		<!-- 
        <OSP name="P.ENTERPRISE">
          <description>If the OS is bound to a directory or management server, the configuration of
            the OS software must be capable of adhering to the enterprise security policies
            distributed by them.</description>
        </OSP>
		-->
		
      <OSPs/>
    </section>   <!-- OSPs -->
	
	<!-- If there are no OSPs, then this: -->
<!--	<section title="Organizational Security Policies" id="sec-osp" boilerplate="no">
        <OSPs/>
    </section> 
-->
	
  </section>  <!-- Security Problem Definition -->
  
  
  <!-- This section is mandatory for standard approach documents.   -->
  <!-- It should be included in direct rationale documents if there are OE Objectives. -->
  <sec:Security_Objectives>
	 
	  
  <!--   4.1 Security Objectives for the Operational Environment -->
  <section title="Security Objectives for the Operational Environment"
	  id="SecurityObjectivesTOEorEnvironment">
	  The Operational Environment of the TOE implements technical and procedural measures to assist the TOE in correctly providing its security functionality. This part wise solution forms the security objectives for the Operational Environment and consists of a set of statements describing the goals that the Operational Environment should achieve.
	  <SOEs>
		<SOE name="OE.INITIAL_DRIVE_STATE">
			  <description><h:p>The OE provides a newly provisioned or initialized storage device free of protected data in areas not targeted for encryption.</h:p><h:p>
          Rationale: Since the cPP requires all protected data to encrypted A.INITIAL_DRIVE_STATE assumes that the initial state of the device targeted for FDE is free of protected data in those areas of the drive where encryption will not be invoked (e.g., MBR and AA/EE pre-authentication software). Given this known start state, the product (once installed and operational) ensures partitions of logical blocks of user accessible data is protected.
        </h:p> </description>
		  </SOE>
	    
		 <SOE name="OE.PASSPHRASE_STRENGTH">
			  <description><h:p>An authorized user will be responsible for ensuring that the passphrase authorization factor conforms to guidance from the Enterprise using the TOE.</h:p><h:p>Rationale: Users are properly trained [A.TRAINED_USER] to create authorization
          factors that conform to administrative guidance.</h:p>
           </description>
		  </SOE>
	    
	    <SOE name="OE.PHYSICAL">
			  <description><h:p>The Operational Environment will provide a secure physical computing space such that an adversary is not able to make modifications to the environment or to the TOE itself.</h:p><h:p>Rationale: As stated in section 1.6, the use case for this cPP is to protect data at rest on a device where the adversary receives it in a powered off state and has no prior access.</h:p> </description>
		  </SOE>
	    
	    <SOE name="OE.PLATFORM_IA">
			  <description><h:p>The Operational Environment will provide individual user identification and authentication mechanisms that operate independently of the authorization factors used by the TOE.</h:p><h:p>Rationale: While the product may provide authorization factors to the Operating system's login interface, it must not change or degrade the functionality of the actual interface. A.PLATFORM_I&amp;A requires that the product not interfere or change the normal platform I&amp;A functionality.</h:p></description>
		  </SOE>
	    
	     <SOE name="OE.PLATFORM_STATE">
			  <description><h:p>The platform in which the storage device resides (or an external
          storage device is connected) is free of malware that could interfere with the correct operation
          of the product.</h:p><h:p>Rationale: A platform free of malware [A.PLATFORM_STATE] prevents an attack vector that could potentially interfere with the correct operation of the product.</h:p> </description>
		  </SOE>
	    
	    <SOE name="OE.POWER_DOWN">
			  <description><h:p>Volatile memory is erased after power-off so memory remnant attacks are infeasible.</h:p><h:p>Rationale: Users are properly trained [A.TRAINED_USER] to not leave the storage device unattended until powered down or placed in a managed power state such as “hibernation mode”. A.POWER_DOWN stipulates that such memory remnant attacks are infeasible given the device is in a powered-down or “hibernation mode” state.</h:p></description>
		  </SOE>
	    
	    <SOE name="OE.SINGLE_USE_ET">
			  <description><h:p>External tokens that contain authorization factors will be used for no
          other purpose than to store the external token authorization factor.</h:p><h:p>Rationale: Users are properly trained [A.TRAINED_USER] to use external token authorization factors as intended and for no other purpose.</h:p> </description>
		  </SOE>
      <SOE name="OE.STRONG_ENVIRONMENT_CRYPTO">
			  <description><h:p>The Operating Environment will provide a cryptographic function capability that is commensurate with the requirements and capabilities of the TOE and Appendix A.</h:p><h:p>Rationale: All cryptography implemented in the Operational Environment and used by
          the product meets the requirements listed in this cPP [A.STRONG_CRYPTO].</h:p> </description>
		  </SOE>
	    
	    <SOE name="OE.TRAINED_USERS">
			  <description><h:p>Authorized users will be properly trained and follow all guidance for securing the TOE and authorization factors. </h:p><h:p>Rationale: Users are properly trained [A.TRAINED_USER] to create authorization factors that conform to guidance, not store external token authorization factors with the device, and power down the TOE when required (OE.PLATFORM_STATE) The platform in which the storage device resides (or an external storage device is connected) is free of malware that could interfere with the correct operation of the product.</h:p>
        <h:p>A platform free of malware [A.PLATFORM_STATE] prevents an attack vector that could potentially interfere with the correct operation of the product.</h:p></description>
		  </SOE>
	    	    
	    <SOE name="OE.TRUSTED_CHANNEL">
			  <description><h:p>Communication among and between product components (i.e., AA and EE) is sufficiently protected to prevent information disclosure.</h:p><h:p>Rationale: In situations where there is an opportunity for an adversary to interpose
          themselves in the channel between the AA and the EE a trusted channel must be established to prevent exploitation. [A.TRUSTED_CHANNEL] assumes the existence of a trusted channel between the AA and EE, except for when the boundary is within and does not breach the TOE or is in such close proximity that a breach is not possible without detection.</h:p> </description>
		  </SOE>
	  </SOEs>
  </section>
	<sec:Security_Objectives_Rationale/>
  
</sec:Security_Objectives>  
<sec:Security_Requirements>  
	  
	<!--   5.1 Security Functional Requirements -->
  <sec:SFRs title="Security Functional Requirements">
    The individual security functional requirements are specified in the sections below.
    
    <section title="Cryptographic Support (FCS)" id="fcs">
	  

        <!-- FCS_CKM_EXT.1 -->
        <ext-comp-def title="Authorization Factor Acquisition" fam-id="FCS_AFA_EXT">
          <fam-behavior>Components in this family address the ability for the TOE to accept a variety of authorization factors. 
            </fam-behavior>
        </ext-comp-def>
        
        
        
        <ext-comp-def title="Key Chaining" fam-id="FCS_KYC_EXT">
          <fam-behavior>This family provides the specification to be used for using multiple layers of encryption keys to ultimately secure the protected data encrypted on the drive.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Cryptographic Password Construction and Conditioning" fam-id="FCS_PCC_EXT">
          <fam-behavior>This family ensures that passwords used to produce the BEV are robust (in terms of their composition) and are conditioned to provide an appropriate-length bit string.</fam-behavior>
        </ext-comp-def>
        
        <ext-comp-def title="Submask Combining" fam-id="FCS_SMC_EXT">
          <fam-behavior>This family specifies the means by which submasks are combined, if the TOE supports more than one submask being used to derive or protect the BEV.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Cryptographic Operation (Salt, Nonce, and Initialization Vector Generation)" fam-id="FCS_OTV_EXT">
          <fam-behavior>This family ensures that salts, nonces, and IVs are well formed.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Validation of Cryptographic Elements" fam-id="FCS_VAL_EXT">
          <fam-behavior>This family specifies the means by which submasks and/or BEVs are determined to be valid prior to their use.
            </fam-behavior>
        </ext-comp-def>
       
            <f-component cc-id="fcs_afa_ext.1" name="Authorization Factor Acquisition" id="fcs-afa-ext-1">
              <consistency-rationale/>
	            <comp-lev>requires authorization factors to be accepted by the TOE.</comp-lev>
	<management>
    The following actions could be considered for the management functions in FMT:<h:ul>
      <h:li>Change the authorization factors to be used</h:li>
      <h:li>Generate external authorization factors using the TSF DRBG</h:li>
    </h:ul></management>
	<audit/>
	<dependencies>No dependencies.</dependencies>
          <f-element id="fcs-afa-ext-1-1">
            <title>
              The TSF shall accept the following authorization factors: <selectables linebreak='yes'>
                <selectable id="submask-derived">a submask derived from a password authorization factor conditioned as defined in FCS_PCC_EXT.1,</selectable>
                <selectable id="sel-fcs-afa-ext-1-1-sel-2a"> an external smart card factor that is protecting a submask that is 
                  <selectables>
                    <selectable id="sel-fcs-afa-ext-1-1-sel-1b">generated by the TOE (using the RBG as specified in FCS_RBG.1)</selectable>
                    <selectable id="sel-fcs-afa-ext-1-1-sel-2b">generated by the Host Platform</selectable>
                  </selectables>
                  protected as defined in FCS_CKM.1/AKG >           
                   with user presence proved by presentation of the smart card and <selectables>
                     <selectable id="sel-fcs-afa-ext-1-1-sel-5a">none</selectable>
                     <selectable id="sel-fcs-afa-ext-1-1-sel-5b">an OE defined PIN</selectable>
                     <selectable id="sel-fcs-afa-ext-1-1-sel-5c">a configurable PIN</selectable>
                  </selectables>,
                  </selectable>
                <selectable id="sel-fcs-afa-ext-1-1-sel-6a">an external USB token factor that is at least the same security strength as the BEV, and is protecting a submask generated by the TOE, using the RBG as specified in FCS_RBG.1,</selectable>
                <selectable id="sel-fcs-afa-ext-1-1-sel-6b">an external USB token factor that is at least the same security strength as the BEV, and is protecting a submask generated by the Host Platform</selectable>
              </selectables>
            </title>
            <note role="application"><h:p>This requirement specifies what authorization factors
              the TOE accepts from the user. A password entered by the user is one authorization factor that the TOE must be able to condition, as specified in FCS_PCC_EXT.1. Another option is a smart card authorization factor, with the differentiating feature being how the value is generated – either by the TOE’s RBG or by the platform. An external USB token may also be used, with the submask value generated either by the TOE’s RBG or by the platform.</h:p>
              <h:p>The TOE may accept any number of authorization factors, and these are categorized as “submasks”. The ST author selects the authorization factors they support, and there may be multiple methods for a selection. </h:p>
              <h:p>
                Use of multiple authorization factors is preferable; if more than one authorization factor is used, the submasks produced must be combined using FCS_SMC_EXT.1 specified in Appendix A.</h:p>
              <h:p>The TOE’s use of symmetric key generation (i.e., deterministic random bit generation) and symmetric encryption determines whether the selection-based requirements FCS_CKM.1/SKG, FCS_RBG.1, and FCS_COP.1/SKC are claimed.</h:p>
            </note>
            <aactivity >
              <TSS><h:p>The evaluator shall first examine the TSS to ensure that the authorization factors
                specified in the ST are described. For password-based factors the examination of the
                TSS section is performed as part of FCS_PCC_EXT.1 Evaluation Activities.
                Additionally in this case, the evaluator shall verify that the operational guidance
                discusses the characteristics of external authorization factors (e.g., how the
                authorization factor must be generated; formats or standards that the authorization
                factor must meet) that are able to be used by the TOE.</h:p>
              <h:p>If other authorization factors are specified, then for each factor, the TSS specifies how
                the factors are input into the TOE.</h:p>
            </TSS>
            <Guidance>The evaluator shall verify that the AGD guidance includes instructions for all of the
              authorization factors. The AGD will discuss the characteristics of external
              authorization factors (e.g., how the authorization factor is generated; formats or
              standards that the authorization factor must meet, configuration of the TPM device
              used) that are able to be used by the TOE.</Guidance>
              <CustomEA name="KMD">
                <h:p>The evaluator shall examine the Key Management Description to confirm that the initial authorization factors (submasks) directly contribute to the unwrapping of the BEV.</h:p>
                <h:p>The evaluator shall verify the KMD describes how a submask is produced from the authorization factor (including any associated standards to which this process might conform), and verification is performed to ensure the length of the submask meets the required size (as specified in this requirement).</h:p></CustomEA>
              <Tests>
                <h:p>The password authorization factor is tested in FCS_PCC_EXT.1.</h:p>
                <h:p>The evaluator shall also perform the following tests:</h:p>
                <testlist>
                  <test>(conditional): If there is more than one authorization factor, ensure that failure to supply a required authorization factor does not result in access to the decrypted plaintext data.</test>
                </testlist>
                
              </Tests>
            </aactivity>
          </f-element>
                        
            </f-component>
        
            <f-component cc-id="fcs_afa_ext.2" name="Timing of Authorization Factor Acquisition" id="fcs-afa-ext-2">
              <consistency-rationale/>
              <comp-lev>defines situations in which the TOE is to accept authorization factors.</comp-lev>
              <management/>
              <audit/>
              <dependencies><h:p>FCS_AFA_EXT.1 Authorization Factor Acquisition</h:p>
                <h:p>FPT_PWR_EXT.1 Power Saving States</h:p> 
              </dependencies>
              <f-element id="fcs-afa-ext-2-1">
                <title>The TSF shall reacquire the authorization factors specified in FCS_AFA_EXT.1
                  upon transition from any compliant power saving state specified in FPT_PWR_EXT.1 prior to permitting access to plaintext data.</title>
                <note role="application">This should be accomplished by erasing keys that are no longer needed so that keys must be derived or decrypted again.</note>
                <aactivity>
                  <TSS>The evaluator shall examine the TSS for a description of authorization factors and which of the factors are used to gain access to user data after the TOE entered a compliant power saving state. The TSS is inspected to ensure it describes that each authorization factor satisfies the requirements of FCS_AFA_EXT.1.1.</TSS>
                    <Guidance>The evaluator shall examine the guidance documentation for a description of authorization factors used to access plaintext data when resuming from a compliant power saving state.</Guidance>
                    <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                    <Tests>
                      <h:p>The evaluator shall perform the following test:</h:p>
                      <h:ul>
                        <h:li>Enter the TOE into a compliant power saving state</h:li>
                        <h:li>Force the TOE to resume from a compliant power saving state</h:li>
                        <h:li>Release an invalid authorization factor and verify that access to decrypted plaintext data is denied</h:li>
                        <h:li>Release a valid authorization factor and verify that access to decrypted plaintext data is granted.</h:li>
                      </h:ul>
                    </Tests>
                </aactivity>
              </f-element>
              
            </f-component>
            
            <f-component cc-id="fcs_ckm.1" iteration="AKG" name="Cryptographic Key Generation (Asymmetric Keys)" id="fcs-ckm-1-akg" status="sel-based">
				<depends on-sel="sel-fcs-kyc-ext-1-1-sel-2"/>
              <f-element id="fcs_ckm-1-1-akg">
			  
			  <title>The TSF  shall generate <h:b>asymmetric</h:b>  cryptographic keys in accordance with a specified cryptographic key generation algorithm  
			  <selectables linebreak="yes">
				<selectable id="fcs_ckm.1.1_AK_3">CNSA 2.0 Compliant Algorithms: 
					<selectables linebreak="yes">
						<selectable id="fcs_ckm.1.1_AK_4"><h:b>Leighton-Micali Signature Algorithm</h:b> using the parameter sets 
							<selectables>
								<selectable id="fcs_ckm.1.1_AK_5" >LMS_SHAKE_M24_H5</selectable>
								<selectable id="fcs_ckm.1.1_AK_6" >LMS_SHAKE_M24_H10</selectable>
								<selectable id="fcs_ckm.1.1_AK_7" >LMS_SHAKE_M24_H15</selectable>
								<selectable id="fcs_ckm.1.1_AK_8" >LMS_SHAKE_M24_H25</selectable>
								<selectable id="fcs_ckm.1.1_AK_9" >LMS_SHAKE_M32_H5</selectable>
								<selectable id="fcs_ckm.1.1_AK_10" >LMS_SHAKE_M32_H10</selectable>
								<selectable id="fcs_ckm.1.1_AK_11" >LMS_SHAKE_M32_H15</selectable>
								<selectable id="fcs_ckm.1.1_AK_12" >LMS_SHAKE_M32_H25</selectable>
								<selectable id="fcs_ckm.1.1_AK_13" >LMS_SHA256_M24_H5</selectable>
								<selectable id="fcs_ckm.1.1_AK_14" >LMS_SHA256_M24_H10</selectable>
								<selectable id="fcs_ckm.1.1_AK_15" >LMS_SHA256_M24_H15</selectable>
								<selectable id="fcs_ckm.1.1_AK_16" >LMS_SHA256_M24_H25</selectable>
								<selectable id="fcs_ckm.1.1_AK_17" >LMS_SHA256_M32_H5</selectable>
								<selectable id="fcs_ckm.1.1_AK_18" >LMS_SHA256_M32_H10</selectable>
								<selectable id="fcs_ckm.1.1_AK_19" >LMS_SHA256_M32_H15</selectable>
								<selectable id="fcs_ckm.1.1_AK_20" >LMS_SHA256_M32_H25</selectable>
							</selectables> that meet the following [NIST SP 800-208, "Recommendation for Stateful Hash-Based Signature Schemes"]
						</selectable>
						<selectable id="fcs_ckm.1.1_AK_21"><h:b>eXtended Merkle Signature Scheme Algorithm</h:b> using the parameter sets 
							<selectables>
								<selectable id="fcs_ckm.1.1_AK_22" >XMSS-SHA2_10_192</selectable>
								<selectable id="fcs_ckm.1.1_AK_23" >XMSS-SHA2_16_192</selectable>
								<selectable id="fcs_ckm.1.1_AK_24" >XMSS-SHA2_20_192</selectable>
								<selectable id="fcs_ckm.1.1_AK_25" >XMSS-SHA2_10_256</selectable>
								<selectable id="fcs_ckm.1.1_AK_26" >XMSS-SHA2_16_256</selectable>
								<selectable id="fcs_ckm.1.1_AK_27" >XMSS-SHA2_20_256</selectable>
								<selectable id="fcs_ckm.1.1_AK_28" >XMSS-SHAKE_10_192</selectable>
								<selectable id="fcs_ckm.1.1_AK_29" >XMSS-SHAKE_16_192</selectable>
								<selectable id="fcs_ckm.1.1_AK_30" >XMSS-SHAKE_20_192</selectable>
								<selectable id="fcs_ckm.1.1_AK_31" >XMSS-SHAKE_10_256</selectable>
								<selectable id="fcs_ckm.1.1_AK_32" >XMSS-SHAKE_16_256</selectable>
								<selectable id="fcs_ckm.1.1_AK_33" >XMSS-SHAKE_20_256</selectable>
							</selectables> that meets the following: [NIST SP 800-208, "Recommendation for Stateful Hash-Based Signature Schemes"]
						</selectable>
						<selectable id="fcs_ckm.1.1_AK_34" ><h:b>Module-Lattice-Based Key-Encapsulation Mechanism Standard</h:b> using the parameter set ML-KEM-1024 that meets the following: [FIPS 203, Module-Lattice-Based Key-Encapsulation Mechanism Standard]</selectable>
						<selectable id="fcs_ckm.1.1_AK_35" ><h:b>Module-Lattice-Based Digital Signature Standard</h:b> using the parameter set ML-DSA-87 that meets the following [FIPS 204, Module-Lattice-Based Digital Signature Standard]</selectable>
					</selectables> 
				</selectable>
				<selectable id="fcs_ckm.1.1_AK_36">CNSA 1.0 Compliant Algorithms: 
					<selectables linebreak="yes">
						<selectable id="fcs_ckm.1.1_AK_37" ><h:b>[RSA schemes]</h:b> using cryptographic key sizes of <selectables><selectable>3072</selectable><selectable>4096</selectable></selectables> that meet the following: [<h:i>FIPS PUB 186-5, "Digital Signature Standard (DSS)," Appendix A.1</h:i>]</selectable>
						<selectable id="fcs_ckm.1.1_AK_38"><h:b>[ECC schemes]</h:b> using [<h:i>“NIST curves” P-384 and <selectables><selectable id="fcs_ckm.1.1_AK_39" >P-521</selectable><selectable id="fcs_ckm.1.1_AK_40" >no other curves</selectable></selectables> </h:i>] that meet the following: [<h:i>FIPS PUB 186-5, “Digital Signature Standard (DSS),” Appendix A.2</h:i>]</selectable>
						<selectable id="fcs_ckm.1.1_AK_41"><h:b>[FFC Schemes]</h:b> using [<h:i>“safe-prime” groups</h:i>] <selectables><selectable id="fcs_ckm.1.1_AK_42" >MODP-3072</selectable><selectable id="fcs_ckm.1.1_AK_43" >MODP-4096</selectable><selectable id="fcs_ckm.1.1_AK_44" >MODP-6144</selectable><selectable id="fcs_ckm.1.1_AK_45" >MODP-8192</selectable><selectable id="fcs_ckm.1.1_AK_46" >ffdhe-3072</selectable><selectable id="fcs_ckm.1.1_AK_47" >ffdhe-4096</selectable><selectable id="fcs_ckm.1.1_AK_48" >ffdhe-6144</selectable><selectable id="fcs_ckm.1.1_AK_49" >ffdhe-8192</selectable></selectables> that meet the following: [<h:i>NIST Special Publication 800-56A Revision 3, “Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography” and <selectables><selectable id="fcs_ckm.1.1_AK_50" >RFC 3526</selectable><selectable id="fcs_ckm.1.1_AK_51" >RFC 7919</selectable></selectables> </h:i>]</selectable>
					</selectables> 
				</selectable> 
				</selectables>.</title>
           
			  
                
                <note role="application">
                  Asymmetric keys may be used to “wrap” a key or submask. This SFR should be included by the ST author when making the appropriate selection in FCS_COP.
<h:p>Note that ML-DSA and ML-KEM are not usable in any functions at the time of initial publication, they are added to this requirement in support of future protocol updates. As support is expanded for CNSA 2.0, CNSA 1.0 will be removed as an selection in a future update.</h:p>				  
                </note>
                <aactivity>
                    <TSS>The evaluator shall ensure that the TSS identifies the key sizes supported by the TOE.
                      If the ST specifies more than one scheme, the evaluator shall examine the TSS to verify
                      that it identifies the usage for each scheme.</TSS>
                    <Guidance>The evaluator shall verify that the AGD guidance instructs the administrator how to
                      configure the TOE to use the selected key generation schemes and key sizes for all
                      uses specified by the AGD documentation and defined in this cPP.</Guidance>
                    <CustomEA name="KMD">If the TOE uses an asymmetric key as part of the key chain, the KMD should detail
                      how the asymmetric key is used as part of the key chain.</CustomEA>
                    <Tests> <h:p>If the ST selects "<h:b>implement functionality</h:b>," then the following test activities shall be carried out.</h:p> <h:p>Evaluation Activity Note: The following tests may require the developer to provide access to a developer environment that provides the evaluator with tools that are not typically available to end-users of the application</h:p> <h:p><h:b>Key Generation for FIPS PUB 186-5 RSA Schemes</h:b></h:p> <h:p>The evaluator shall verify the implementation of RSA Key Generation by the TOE using the Key Generation test. This test verifies the ability of the TSF to correctly produce values for the key components including the public verification exponent e, the private prime factors p and q, the public modulus n and the calculation of the private signature exponent d. Key Pair generation specifies 5 ways (or methods) to generate the primes p and q. These include:<h:ul><h:li>Random Primes:<h:ul><h:li>Provable primes</h:li><h:li>Probable primes</h:li></h:ul></h:li><h:li>Primes with Conditions:<h:ul><h:li>Primes p1, p2, q1, q2, p, and q shall all be provable primes</h:li><h:li>Primes p1, p2, q1, and q2 shall be provable primes, and p and q shall be probable primes</h:li><h:li>Primes p1, p2, q1, q2, p, and q shall all be probable primes</h:li></h:ul></h:li></h:ul> To test the key generation method for the Random Provable primes method and for all the Primes with Conditions methods, the evaluator must seed the TSF key generation routine with sufficient data to deterministically generate the RSA key pair. This includes the random seed(s), the public exponent of the RSA key, and the desired key length. For each key length supported, the evaluator shall have the TSF generate 25 key pairs. The evaluator shall verify the correctness of the TSF’s implementation by comparing values generated by the TSF with those generated from a known good implementation.</h:p> <h:p>If possible, the Random Probable primes method should also be verified against a known good implementation as described above. Otherwise, the evaluator shall have the TSF generate 10 keys pairs for each supported key length nlen and verify:<h:ul><h:li>n = p⋅q,</h:li><h:li>p and q are probably prime according to Miller-Rabin tests,</h:li><h:li>GCD(p-1, e) = 1,</h:li><h:li>GCD(q-1, e) = 1,</h:li><h:li>2 <h:sup>16</h:sup>≤ e ≤ 2 <h:sup>256</h:sup> and e is an odd integer,</h:li><h:li>|p-q| > 2 <h:sup>nlen/2 - 100</h:sup>,</h:li><h:li>p ≥ 2 <h:sup>nlen/2 -1/2</h:sup>,</h:li><h:li>q ≥ 2 <h:sup>nlen/2 -1/2</h:sup>,</h:li><h:li>2 <h:sup>(nlen/2)</h:sup>&lt; d &lt; LCM(p-1, q-1),</h:li><h:li>e⋅d = 1 mod LCM(p-1, q-1).</h:li></h:ul></h:p> <h:p><h:b>Key Generation for Elliptic Curve Cryptography (ECC)</h:b></h:p> <h:p><h:b>FIPS 186-5 ECC Key Generation Test</h:b>- For each supported NIST curve, i.e., P-384 and P-521, the evaluator shall require the implementation under test (IUT) to generate 10 private/public key pairs. The private key shall be generated using an approved random bit generator (RBG). To determine correctness, the evaluator shall submit the generated key pairs to the public key verification (PKV) function of a known good implementation.</h:p> <h:p><h:b>FIPS 186-5 Public Key Verification (PKV) Test</h:b>- For each supported NIST curve, i.e., P-384 and P-521, the evaluator shall generate 10 private/public key pairs using the key generation function of a known good implementation and modify five of the public key values so that they are incorrect, leaving five values unchanged (i.e., correct). The evaluator shall obtain in response a set of 10 PASS/FAIL values.</h:p> <h:p><h:b>Key Generation for Finite-Field Cryptography (FFC)</h:b></h:p> <h:p>The evaluator shall verify the implementation of the Parameters Generation and the Key Generation for FFC by the TOE using the Parameter Generation and Key Generation test. This test verifies the ability of the TSF to correctly produce values for the field prime p, the cryptographic prime q (dividing p-1), the cryptographic group generator g, and the calculation of the private key x and public key y. The Parameter generation specifies two ways (or methods) to generate the cryptographic prime q and the field prime p:</h:p> <h:p>Cryptographic and Field Primes:<h:ul><h:li>Primes q and p shall both be provable primes</h:li><h:li>Primes q and field prime p shall both be probable primes</h:li></h:ul> and two ways to generate the cryptographic group generator g:</h:p> <h:p>Cryptographic Group Generator:<h:ul><h:li>Generator g constructed through a verifiable process</h:li><h:li>Generator g constructed through an unverifiable process.</h:li></h:ul> The Key generation specifies 2 ways to generate the private key x:</h:p> <h:p>Private Key:<h:ul><h:li>len(q) bit output of RBG where 1 ≤ x ≤ q-1</h:li><h:li>len(q) + 64 bit output of RBG, followed by a mod q-1 operation where 1≤ x ≤q-1.</h:li></h:ul> The security strength of the RBG must be at least that of the security offered by the FFC parameter set. To test the cryptographic and field prime generation method for the provable primes method and/or the group generator g for a verifiable process, the evaluator must seed the TSF parameter generation routine with sufficient data to deterministically generate the parameter set. For each key length supported, the evaluator shall have the TSF generate 25 parameter sets and key pairs. The evaluator shall verify the correctness of the TSF’s implementation by comparing values generated by the TSF with those generated from a known good implementation. Verification must also confirm <h:ul><h:li>g ≠ 0,1</h:li><h:li>q divides p-1</h:li><h:li>g <h:sup>q</h:sup> mod p = 1</h:li><h:li>g <h:sup>x</h:sup> mod p = y</h:li></h:ul> for each FFC parameter set and key pair.</h:p> <h:p><h:b>FFC Schemes using “safe-prime” groups</h:b></h:p> <h:p>The evaluator shall verify the correctness of the TSF’s implementation of safe-prime groups by using a known good implementation for each protocol selected in FTP_DIT_EXT.1 that uses safe-prime groups. This test must be performed for each safe-prime group that each protocol uses.</h:p> <h:p><h:b>Key Generation for LMS/XMSS</h:b></h:p> <h:p>For each supported LMS/LMSOTS pair, the evaluator will provide 1, 2, 3, 4, 5 seeds for H = 25, 20, 15, 10, 5 respectively where H = the height of the LMS tree. For each seed, the TOE will generate the corresponding public key which is to be verified by the evaluator using a known good implementation.</h:p> <h:p><h:b>Key Generation for ML-DSA</h:b></h:p> <h:p>The evaluator shall 10x input to the internal KeyGen function a 32-byte random seed. Verify the returned public-private key pair is correct using a known good implementation. Here internal KeyGen refers to the TOE’s implementation of the function ML-DSA.KeyGen_internal(-) as described in FIPS.204.</h:p> <h:p><h:b>Key Generation for ML-KEM</h:b></h:p> <h:p>The evaluator shall 10x input to the internal KeyGen function a pair of 32-byte random string. Verify the returned encapsulation and decapsulation key pair is correct using a known good implementation. Here internal KeyGen refers to the TOE’s implementation of the function ML-KEM.KeyGen_internal(-,-) as described in FIPS.203.</h:p></Tests>
           
                </aactivity>
              </f-element>
              
            </f-component>
        
            <f-component cc-id="fcs_ckm.1" iteration="SKG" name="Cryptographic Key Generation (Symmetric Keys)" id="fcs-ckm-1-b" status="sel-based">
              <depends on-sel="sel-fcs-afa-ext-1-1-sel-1b"/>
              <depends on-sel="sel-fcs-afa-ext-1-1-sel-6a"/>
              <depends on-sel="sel-fcs-kyc-ext-1-1-sel-1"/>
              <depends on-sel="sel-fcs-kyc-ext-1-1-sel-3"/>
              <depends on-sel="fcs-otv-sel-drbg"/>
              <depends on-sel="fcs-otv-sels"/>
              <depends on-sel="sel-fcs-val-ext-1-1-sel-2a"/>
              <depends on-sel="sel-fpt-kyp-ext-1-1-sel-2"/>
              <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3cii"/>
              <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3ei"/>
              <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3eii"/>
              <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3eiii"/>
              <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3eiv"/>
              
              <f-element id="fcs_ckm-1-1-skg"><title>
                The TSF shall generate <h:b>symmetric</h:b> cryptographic keys <h:b>using a Random Bit Generator as specified in FCS_RBG.1</h:b> and specified cryptographic key
                sizes <h:i>256 bit</h:i> that meet the following: [<h:i>no standard</h:i>].
                </title>
                <note role="application">
                  Symmetric keys may be used to generate keys along the key chain. This applies to any instance in where the TSF DRBG is referenced for key generation (as in FCS_AFA_EXT.1, 
                  FCS_OTV_EXT.1, and FFCS_CKM.5.1), or where the TSF generates or re-generates key encryption or key wrapping keys as part of deriving a key or validating 
                  an authorization factor (as in FCS_KYC_EXT.1, FPT_KYP_EXT.1, and FCS_VAL_EXT.1)                  
                </note>
                <aactivity>
                  <TSS>The evaluator shall review the TSS to determine that a symmetric key is supported by
                    the product, that the TSS includes a description of the protection provided by the
                    product for this key. The evaluator shall ensure that the TSS identifies the key sizes
                    supported by the TOE.</TSS>
                    <Guidance>The evaluator shall verify that the AGD guidance instructs the administrator how to
                      configure the TOE to use the selected key sizes for all uses specified by the AGD
                      documentation and defined in this cPP.</Guidance>
                    <CustomEA name="KMD">If the TOE uses a symmetric key as part of the key chain, the KMD should detail how
                      the symmetric key is used as part of the key chain.</CustomEA>
                    <Tests>There are no test evaluation activities for this SFR.</Tests>
                </aactivity>
              </f-element>
              
            </f-component>
        
        <f-component cc-id="fcs_ckm.6" name="Cryptographic Key and Key Material Destruction (Destruction Timing/Method)" id="fcs-ckm-6">
              <f-element id="fcs-ckm-6e1">
                <!-- fcs_ckm-ext-4-1-a-->
                <title>
                  The TSF shall destroy [<h:i>all keys and key material</h:i>] when [<h:i>no longer
                    needed</h:i>].            
                </title>
                
                <note role="application">Keys, including intermediate keys and key material that are no longer needed are destroyed by
                  using an approved method, FCS_CKM.6. <h:br/><h:br/>
                  Examples of keys are intermediate keys, submasks, and BEV. There may be instances where keys or key material that are
                  contained in persistent storage are no longer needed and require destruction. Based on their implementation, vendors 
                  will explain when certain keys are no longer needed. There are multiple situations in which key material is no longer
                  necessary, for example, a wrapped key may need to be destroyed when a password is changed. However, there are 
                  instances when keys are allowed to remain in memory, for example, a device identification key. If a PIN was used for 
                  a smart card, the TSF should ensure that the PIN was properly destroyed.</note>
                  <aactivity level="element">
                      <TSS>The evaluator shall verify the TSS provides a high level description of what it means for keys and key material to be no longer needed and when then should be expected to be destroyed.</TSS>
                      <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                      <CustomEA name="KMD">
                        <h:p>The evaluator shall verify the KMD includes a description of the areas where keys and
                          key material reside and when the keys and key material are no longer needed.</h:p>
                        <h:p>The evaluator shall verify the KMD includes a key lifecycle, that includes a description
                          where key material reside, how the key material is used, how it is determined that keys
                          and key material are no longer needed, and how the material is destroyed once it is not
                          needed and that the documentation in the KMD follows FCS_CKM.4(a) for the
                          destruction.</h:p></CustomEA>
                      <Tests>There are no test evaluation activities for this SFR.</Tests>
                  </aactivity>
              </f-element>
              <f-element id="fcs-ckm-6e2">
                <!-- fcs_ckm-4-1-d-->
                <title>
                  The TSF shall destroy cryptographic keys and keying material specified by
                  FCS_CKM.6.1 in accordance with a specified cryptographic key destruction method <selectables linebreak="yes">
                    <selectable>For volatile memory, the destruction shall be executed by a <selectables linebreak="yes">
                      <selectable>single overwrite consisting of <selectables linebreak="yes">
                        <selectable>a pseudo-random pattern using the TSF’s RBG,</selectable>
                        <selectable>zeroes,</selectable>
                        <selectable>ones,</selectable> 
                        <selectable>a new value of a key,</selectable>
                        <selectable><assignable>some value that does not contain any CSP</assignable></selectable>
                      </selectables>
                      </selectable>
                      <selectable>removal of power to the memory,</selectable>
                      <selectable>destruction of reference to the key directly followed by a request for garbage collection</selectable>
                      
                    </selectables></selectable>
                    <selectable>
                      For non-volatile storage that consists of the invocation of an interface provided by the underlying platform that <selectables linebreak="yes">
                        <selectable>logically addresses the storage location of the key and performs a <selectables>
                          <selectable>single</selectable>
                          <selectable><assignable>ST author defined multi-pass</assignable></selectable>
                        </selectables> overwrite consisting of <selectables linebreak="yes">
                          <selectable>a pseudo-random pattern using the TSF’s RBG,</selectable>
                          <selectable>zeroes,</selectable>
                          <selectable>ones,</selectable>
                          <selectable>a new value of a key,</selectable>
                          <selectable><assignable>some value that does not contain any CSP</assignable></selectable>
                        </selectables></selectable>
                        <selectable>instructs the underlying platform to destroy the abstraction that represents the key</selectable>
                      </selectables>
                    </selectable>
                  </selectables>
                  that meets the following: [<h:i>no standard</h:i>].
                </title>
                <note role="application">
                  <h:p>This SFR is FCS_CKM.6, to align with the numbering in the FDE EE cPP.</h:p>
                  <h:p>The interface referenced in the requirement could take different forms, the most likely of which is an application programming interface to an OS kernel. There may be various levels of abstraction visible. For instance, in a given implementation the application may have access to the file system details and may be able to logically address specific memory locations. In another implementation the application may simply have a handle to a resource and can only ask the platform to delete the resource. The level of detail to which the TOE has access will be reflected in the TSS section of the ST.</h:p>
                  <h:p>Several selections allow assignment of a ‘value that does not contain any CSP’. This means that the TOE uses some other specified data not drawn from an RBG meeting FCS_RBG.1 requirements, and not being any of the particular values listed as other selection options. The point of the phrase ‘does not contain any CSP’ is to ensure that the overwritten data is carefully selected, and not taken from a general ‘pool’ that might contain current or residual data that itself requires confidentiality protection.</h:p>
                  
                </note>
                <aactivity level="element">
                    <TSS>
                      <h:p>The evaluator examines the TSS to ensure it describes how the keys are managed in
                        volatile memory. This description includes details of how each identified key is
                        introduced into volatile memory (e.g. by derivation from user input, or by unwrapping
                        a wrapped key stored in non-volatile memory) and how they are overwritten.</h:p>
                      <h:p>The evaluator shall check to ensure the TSS lists each type of key that is stored in
                        non-volatile memory, and identifies how the TOE interacts with the underlying
                        platform to manage keys (e.g., store, retrieve, destroy). The description includes details
                        on the method of how the TOE interacts with the platform, including an identification
                        and description of the interfaces it uses to manage keys (e.g., file system APIs, platform
                        key store APIs). </h:p>
                      <h:p>The evaluator examines the interface description for each different media type to ensure
                        that the interface supports the selections and description in the TSS.</h:p>
                      <h:p>The evaluator shall check that the TSS identifies any configurations or circumstances
                        that may not strictly conform to the key destruction requirement. If the ST makes use
                        of the open assignment and fills in the type of pattern that is used, the evaluator
                        examines the TSS to ensure it describes how that pattern is obtained and used. The
                        evaluator shall verify that the pattern does not contain any CSPs.</h:p></TSS>
                      

                    <Guidance>
                      <h:p>There are a variety of concerns that may prevent or delay key destruction in some cases.
                        The evaluator shall check that the guidance documentation identifies configurations or
                        circumstances that may not strictly conform to the key destruction requirement, and
                        that this description is consistent with the relevant parts of the TSS and any other
                        relevant Required Supplementary Information. The evaluator shall check that the
                        guidance documentation provides guidance on situations where key destruction may
                        be delayed at the physical layer.</h:p>
                      <h:p>For example, when the TOE does not have full access to the physical memory, it is
                        possible that the storage may be implementing wear-leveling and garbage collection.
                        This may create additional copies of the key that are logically inaccessible but persist
                        physically. In this case, it is assumed the drive supports the TRIM command and
                        implements garbage collection to destroy these persistent copies when not actively
                        engaged in other tasks. </h:p>
                      <h:p>Drive vendors implement garbage collection in a variety of different ways, as such
                        there is a variable amount of time until data is truly removed from these solutions.
                        There is a risk that data may persist for a longer amount of time if it is contained in a
                        block with other data not ready for erasure. It is assumed the operating system and file
                        system of the OE support TRIM, instructing the non-volatile memory to erase copies
                        via garbage collection upon their deletion. </h:p>
                      <h:p>It is assumed that if a RAID array is being used, only set-ups that support TRIM are
                        utilized. It is assumed if the drive is connected via PCI-Express, the operating system
                        supports TRIM over that channel. It is assumed the drive is healthy and contains minimal corrupted data and will be end of life before a significant amount of damage
                        to drive health occurs, it is assumed there is a risk small amounts of potentially
                        recoverable data may remain in damaged areas of the drive.</h:p>
                      <h:p>Finally, it is assumed the keys are not stored using a method that would be inaccessible
                        to TRIM, such as being contained in a file less than 982 bytes which would be
                        completely contained in the master file table.</h:p></Guidance>
                    
                    <CustomEA name="KMD"> Refer to the TSS. KMD is combined with the TSS.</CustomEA>
                    <Tests>
                      <testlist>
                        <test> Applied to each key held as plaintext in volatile memory and subject to
                          destruction by overwrite by the TOE (whether or not the plaintext value is subsequently
                          encrypted for storage in volatile or non-volatile memory). In the case where the only
                          selection made for the destruction method key was removal of power, then this test is
                          unnecessary. The evaluator shall:<h:ol type="1">
                            <h:li>Record the value of the key in the TOE subject to erasure.</h:li>
                            <h:li>Cause the TOE to perform a normal cryptographic processing with the key
                              from Step #1.</h:li>
                            <h:li>Cause the TOE to erase the key.</h:li>
                            <h:li>Cause the TOE to stop the execution but not exit.</h:li>
                            <h:li>Cause the TOE to dump the entire memory of the TOE into a binary file.</h:li>
                            <h:li>Search the content of the binary file created in Step #5 for instances of the
                              known key value from Step #1.</h:li>
                            <h:li>Break the key value from Step #1 into 3 or 4 similar sized pieces and perform a search using each piece.</h:li>
                          </h:ol>
                          <h:p>Steps 1-6 ensure that the complete key does not exist anywhere in volatile memory. If
                            a copy is found, then the test fails. </h:p>
                            <h:p>Step 7 ensures that partial key fragments do not remain in memory. If a fragment is
                              found, there is a minuscule chance that it is not within the context of a key (e.g., some
                              random bits that happen to match). If this is the case the test should be repeated with a
                              different key in Step #1. If a fragment is found the test fails.</h:p>
                              <h:p>The following tests apply only for the selection of “logically addresses the storage location…”, since the TOE in this instance has more
                                visibility into what is happening within the underlying platform (e.g., a logical view of
                                the media). For the selection of “instructs the underlying platform…”, the TOE has no visibility into the inner workings and
                                completely relies on the underlying platform, so there is no reason to test the TOE
                                beyond test 1.</h:p>
                              <h:p>For the selection of “logically addresses the storage location…”, the following tests are used to determine the TOE is able to request
                                the platform to overwrite the key with a TOE supplied pattern.</h:p>
                          </test>
                          <test>
                            Applied to each key held in non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator shall use a tool that provides a logical view of the media (e.g., MBR file system):<h:ol type="1">
                              <h:li>Record the value of the key in the TOE subject to erasure.</h:li>
                              <h:li>Cause the TOE to perform a normal cryptographic processing with the key from Step #1.</h:li>
                              <h:li>Cause the TOE to erase the key.</h:li>
                              <h:li>Search the logical view that the key was stored in for instances of the known
                                key value from Step #1. If a copy is found, then the test fails.</h:li>
                              <h:li>Break the key value from Step #1 into 3 or 4 similar sized pieces and perform a search using each piece. If a fragment is found then the test is repeated (as described for Use Case 1 test 1 above), and if a fragment is found in the repeated test then the test fails.</h:li>
                            </h:ol>
                          </test>
                          <test>
                            Applied to each key held as non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator shall use a tool that provides a logical view of the media:<h:ol type="1">
                              <h:li>Record the logical storage location of the key in the TOE subject to erasure</h:li>
                              <h:li>Cause the TOE to perform a normal cryptographic processing with the key
                                from Step #1.</h:li>
                              <h:li>Cause the TOE to erase the key.</h:li>
                              <h:li>Read the logical storage location in Step #1 of non-volatile memory to ensure
                                the appropriate pattern is utilized.</h:li>
                            </h:ol>
                            <h:p>
                              The test succeeds if correct pattern is used to overwrite the key in the memory location. If the pattern is not found the test fails.
                            </h:p>
                          </test>
                      </testlist>
                    </Tests>
                </aactivity>
              </f-element>
          
            </f-component>
        
            <f-component cc-id="fcs_ckm.6" iteration="Power" name="Cryptographic Key and Key Material Destruction (Power Management)" id="fcs-ckm-6-power">
              <f-element id="fcs-ckm-6e1-pwr">
                <title>
                  The TSF shall destroy [<h:i>all key material, BEV, and authentication factors
                    stored in plaintext</h:i>] when [<h:i>transitioning to a compliant power saving
                      state as defined by FPT_PWR_EXT.1</h:i>].
                </title>
                <note role="application">The TOE may end up in a non-compliant power saving
                  state indistinguishable from a compliant power state (e.g. as result of sudden or
                  unexpected power loss). For those scenarios, the TOE or the operational
                  environment guidance documentation must provide procedures to support destruction of key material (e.g., automated reboot with memory erasure in early stages of the system’s power-on sequence).</note>
                  <aactivity level="element">
                    <TSS>The evaluator shall verify the TSS provides a description of what keys and key material
                      are destroyed when entering any compliant power saving state.</TSS>
                      <Guidance>The evaluator shall validate that guidance documentation contains clear warnings and
                        information on conditions in which the TOE may end up in a non-compliant power
                        saving state indistinguishable from a compliant power saving state. In that case it must
                        contain mitigation instructions on what to do in such scenarios.</Guidance>
                      <CustomEA name="KMD">
                        <h:p>The evaluator shall verify the KMD includes a description of the areas where keys and
                          key material reside.</h:p>
                          <h:p>The evaluator shall verify the KMD includes a key lifecycle that includes a description
                            where key material resides, how the key material is used, and how the material is
                            destroyed once it is not needed and that the documentation in the KMD follows
                            FCS_CKM.6 for the destruction.</h:p></CustomEA>
                      <Tests>There are no test evaluation activities for this SFR.</Tests>
                  </aactivity>
              </f-element>
              <f-element id="fcs-ckm-6e2-pwr">
                <title>
                  The TSF shall destroy cryptographic keys and keying material specified by FCS_CKM.6.1/Power in
                  accordance with a specified cryptographic key destruction method <h:b><selectables>
                    <selectable>instruct the operational environment to erase</selectable>
                    <selectable>erase</selectable>
                  </selectables></h:b> that meets the following: [<h:i>a key
                        destruction method specified in FCS_CKM.6</h:i>].
                </title>
                <note role="application">In some cases, erasure of keys from volatile memory is
                  only supported by the operational environment, in which case the operational
                  environment must expose a well-documented mechanism or interface to invoke the memory erase operation.</note>
                <aactivity level="element">
                  <TSS>
                    The evaluator shall verify the TSS provides a high level description of how keys stored in volatile memory are destroyed. The valuator to verify that TSS outlines: <h:ul>
                      <h:li>if and when the TSF or the Operational Environment is used to destroy keys from volatile memory;</h:li>
                      <h:li>if and how memory locations for (temporary) keys are tracked;</h:li>
                      <h:li>details of the interface used for key erasure when relying on the OE for memory erasure.</h:li></h:ul></TSS>
                  <Guidance>The evaluator shall check the guidance documentation if the TOE depends on the
                    Operational Environment for memory erasure and how that is achieved.</Guidance>
                  <CustomEA name="KMD">The evaluator shall check to ensure the KMD lists each type of key, its origin, possible memory locations in volatile memory.</CustomEA>
                  <Tests>There are no test evaluation activities for this SFR.</Tests>
                </aactivity>
              </f-element>
          
            </f-component>
        
            <f-component cc-id="fcs_cop.1" iteration="Hash" name="Cryptographic Operation (Hash Algorithm)" id="fcs-cop-1-hash">
              <f-element id="fcs_cop-1-1-hash">
                <title>The <h:b>application</h:b>  shall perform [<h:i>cryptographic hashing services</h:i>] in accordance with a specified cryptographic algorithm  
					<selectables linebreak="yes">
						<selectable id="fcs_cop.1.1_Hash_1" >SHA-256</selectable>
						<selectable id="fcs_cop.1.1_Hash_2" >SHA-384</selectable>
						<selectable id="fcs_cop.1.1_Hash_3" >SHA-512</selectable> 
					</selectables>  and <h:b>message digest</h:b>  sizes  
					<selectables linebreak="yes">
						<selectable id="fcs_cop.1.1_Hash_4" >256</selectable>
						<selectable id="fcs_cop.1.1_Hash_5" >384</selectable>
						<selectable id="fcs_cop.1.1_Hash_6" >512</selectable> 
					</selectables> <h:b>bits</h:b>  that meet the following: [<h:i>ISO/IEC 10118-3:2004</h:i>]
                </title>
                <note role="application">
                  The selection should be consistent with the overall strength of the algorithm used for FCS_COP.1/SigVer and quantum resistant recommendations. For example,
                  SHA-256 should be chosen for 2048-bit RSA or ECC with P-256, SHA-384 should be chosen for 3072-bit RSA, 4096-bit RSA, or ECC with P-384, and SHA-512 should
                  be chosen for ECC with P-521. The selection of the standard is made based on the algorithms selected.<h:br/><h:br/>
                  
                  This SFR is required for the use of verifying digital signatures for trusted updates (FPT_TUD_EXT.1). It may also be used when the TSF performs validation
                  of a submask, intermediate key, or BEV by using a hash operation (FCS_VAL_EXT.1).
                </note>
                <aactivity>
                    <TSS>The evaluator shall check that the association of the hash function with other TSF
                      cryptographic functions (for example, the digital signature verification function) is
                      documented in the TSS.</TSS>
                    <Guidance>The evaluator checks the operational guidance documents to determine that any system
                      configuration necessary to enable required hash size functionality is provided.</Guidance>
                    <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                    <Tests>
                      <h:p>The TSF hashing functions can be implemented in one of two modes. The first mode
                        is the byte-oriented mode. In this mode the TSF only hashes messages that are an
                        integral number of bytes in length; i.e., the length (in bits) of the message to be hashed
                        is divisible by 8. The second mode is the bit-oriented mode. In this mode the TSF
                        hashes messages of arbitrary length. As there are different tests for each mode, an
                        indication is given in the following sections for the bit-oriented vs. the byte-oriented
                        test mode.</h:p>
                      <h:p>
                        The evaluator shall perform all of the following tests for each hash algorithm implemented by the TSF and used to satisfy the requirements of this cPP.
                      </h:p>
                      <h:p><h:u>Short Messages Test Bit-oriented Mode</h:u></h:p>
                      <h:p>The evaluators devise an input set consisting of m+1 messages, where m is the block
                        length of the hash algorithm. The length of the messages range sequentially from 0 to
                        m bits. The message text shall be pseudorandomly generated. The evaluators compute
                        the message digest for each of the messages and ensure that the correct result is
                        produced when the messages are provided to the TSF.</h:p>
                        <h:p><h:u>Short Messages Test Byte-oriented Mode</h:u></h:p>
                        <h:p>The evaluators devise an input set consisting of m/8+1 messages, where m is the block
                          length of the hash algorithm. The length of the messages range sequentially from 0 to
                          m/8 bytes, with each message being an integral number of bytes. The message text shall
                          be pseudorandomly generated. The evaluators compute the message digest for each of
                          the messages and ensure that the correct result is produced when the messages are
                          provided to the TSF.</h:p>
                        <h:p><h:u>Selected Long Messages Test Bit-oriented Mode</h:u></h:p>
                        <h:p>The evaluators devise an input set consisting of m messages, where m is the block
                          length of the hash algorithm. For SHA-256, the length of the i-th message is 512 +
                          99*i, where 1 ≤ i ≤ m. For SHA-384 and SHA-512, the length of the i-th message is
                          1024 + 99*i, where 1 ≤ i ≤ m. The message text shall be pseudorandomly generated.
                          The evaluators compute the message digest for each of the messages and ensure that
                          the correct result is produced when the messages are provided to the TSF.</h:p>
                        <h:p><h:u>Selected Long Messages Test Byte-oriented Mode</h:u></h:p>
                        <h:p>The evaluators devise an input set consisting of m/8 messages, where m is the block
                          length of the hash algorithm. For SHA-256, the length of the i-th message is 512 +
                          8*99*i, where 1 ≤ i ≤ m/8. For SHA-384 and SHA-512, the length of the i-th message
                          is 1024 + 8*99*i, where 1 ≤ i ≤ m/8. The message text shall be pseudorandomly
                          generated. The evaluators compute the message digest for each of the messages and
                          ensure that the correct result is produced when the messages are provided to the TSF.</h:p>
                        <h:p><h:u>Pseudorandomly Generated Messages Test</h:u></h:p>
                        <h:p>This test is for byte-oriented implementations only. The evaluators randomly generate
                          a seed that is n bits long, where n is the length of the message digest produced by the
                          hash function to be tested. The evaluators then formulate a set of 100 messages and
                          associated digests by following the algorithm provided in Figure 1 of the NIST Secure
                          Hash Algorithm Validation System (SHAVS)
                          (https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-ValidationProgram/documents/shs/SHAVS.pdf). The evaluators then ensure that the correct
                          result is produced when the messages are provided to the TSF.</h:p></Tests>
                </aactivity>
              </f-element>
          
            </f-component>
        
        <f-component cc-id="fcs_cop.1" iteration="KeyedHash" name="Cryptographic Operation (Keyed Hash Algorithm)" id="fcs-cop-1-keyhash" status="sel-based">
          <depends on-sel="fcs-val-ext-1-1-keyhash"/>
          <depends on-sel="sel-fcs-kyc-ext-1-1-sel-4"/>
          <f-element id="fcs-cop-1e1-keyedhash">
				<title>The TSF shall perform [keyed hash message authentication] in accordance
					with a specified cryptographic algorithm 
					<selectables>
						<tabularize id="tab-fcs-cop-keyedhash-sels" title="Allowable choices for FCS_COP.1/KeyedHash">
							<selectcol>Keyed Hash Algorithm</selectcol>
							<reqtext>and cryptographic key sizes</reqtext>
							<selectcol>Cryptographic key sizes</selectcol>
							<reqtext>that meet the following:</reqtext>
							<selectcol>List of standards</selectcol>
							<reqtext><h:p/><h:p/>The following table provides the allowable choices for
										completion of the selection operations of FCS_COP.1/KeyedHash.</reqtext>
						</tabularize>
						
						<selectable id="sel-fcs-cop-keyedhash-hmac-sha-256">
							<col>HMAC-SHA-256</col>
							<col>256 bits</col>
							<col><selectables>
								<selectable>ISO/IEC 9797-2:2021 (Section 7 “MAC Algorithm 2”)</selectable>
								<selectable>FIPS PUB 198-1</selectable></selectables>
							</col>
						</selectable>

						<selectable id="sel-fcs-cop-keyedhash-hmac-sha-384">
							<col>HMAC-SHA-384</col>
							<col><selectables>
								<selectable>384 (ISO, FIPS)</selectable>
								<selectable>256 (FIPS)</selectable></selectables> bits
							</col>
							<col><selectables>
								<selectable>ISO/IEC 9797-2:2021 (Section 7 “MAC Algorithm 2”)</selectable>
								<selectable>FIPS PUB 198-1</selectable></selectables>
							</col>
						</selectable>

						<selectable id="sel-fcs-cop-keyedhash-hmac-sha-512">
							<col>HMAC-SHA-512</col>
							<col><selectables>
								<selectable>512 (ISO, FIPS)</selectable>
								<selectable>384 (FIPS)</selectable>
								<selectable>256 (FIPS)</selectable></selectables> bits
							</col>
							<col><selectables>
								<selectable>ISO/IEC 9797-2:2021 (Section 7 “MAC Algorithm 2”)</selectable>
								<selectable>FIPS PUB 198-1</selectable></selectables>
							</col>
						</selectable>
					</selectables>
				</title>	
				<note role="application">
					The HMAC minimum key sizes in the table are specified in ISO/IEC 9797-2:2021, which requires that the
					minimum key size be equal to the digest size. The FIPS standard specifies no minimum or maximum 
					key sizes, so if FIPS PUB 198-1 is selected, larger or smaller key sizes may be used. This is 
					indicated by the parenthesized annotations in the Cryptographic Key Sizes column.<h:p/>
					In accordance with CNSA 1.0 and 2.0, HMAC-SHA-256 may be used only as a PRF or MAC step in a 
					key derivation function.
				</note>
				<aactivity>
					<TSS>
						The evaluator shall examine the TSS to ensure that the size of the key is sufficient for the desired
						security strength of the output.<h:p/>
						The evaluator shall examine the TSS to verify that if HMAC-SHA-256 is selected, that it is being 
						used only as a PRF or MAC step in a key derivation function.
					</TSS>
					<Guidance>There is no AGD for this activity.</Guidance>
					<KMD>There is no KMD for this activity.</KMD>
					<Tests>
						The following tests are conditional based upon the selections made in the SFR. The evaluator
						shall perform the following test or witness respective tests executed by the developer. The tests
						must be executed on a platform that is as close as practically possible to the operational platform
						(but which may be instrumented in terms of, for example, use of a debug mode). Where the test
						is not carried out on the TOE itself, the test platform shall be identified and the differences
						between test environment and TOE execution environment shall be described.<h:p/>

						<!-- HMAC -->
						<h:br/><h:b>HMAC</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Keyed Hash Algorithm</h:td>
								<h:td valign="top">Cryptographic Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">HMAC-SHA-256</h:td>
								<h:td valign="top">256 bits</h:td>
								<h:td valign="top">
									[<h:b>selection:</h:b> ISO/IEC 9797-2:2021 (Section 7 “MAC Algorithm 2”), FIPS PUB 198-1] </h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">HMAC-SHA-384</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> (ISO, FIPS) 384, (FIPS) 256] bits</h:td>
								<h:td valign="top">
									[<h:b>selection:</h:b> ISO/IEC 9797-2:2021 (Section 7 “MAC Algorithm 2”), FIPS PUB 198-1] </h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">HMAC-SHA-512</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> (ISO, FIPS) 512, (FIPS) 384, 256] bits</h:td>
								<h:td valign="top">
									[<h:b>selection:</h:b> ISO/IEC 9797-2:2021 (Section 7 “MAC Algorithm 2”), FIPS PUB 198-1] </h:td>
							</h:tr>
						</h:table><h:p/>	
						To test the TOE’s ability to generate keyed hashes using HMAC the evaluator shall perform the
						Algorithm Functional Test for each combination of claimed HMAC algorithm the following
						parameters:<h:ul>
						<h:li>Hash function [SHA-256, SHA-384, SHA-512]</h:li>
						<h:li>Key length [8-65536] bits by 8s</h:li>
						<h:li>MAC length [32-[digest size of hash function (256, 384, 512)]] bits</h:li></h:ul><h:p/>
						<h:br/><h:b>Algorithm Functional Test</h:b><h:p/>
						For each supported Hash function the evaluator shall generate 150 test cases using random input
						messages of 128 bits, random supported key lengths, random keys, and random supported MAC
						lengths such that across the 150 test cases:<h:ul>
						<h:li>The key length includes the minimum, the maximum, a key length equal to the block
							size, and key lengths that are both larger and smaller than the block size.</h:li>
						<h:li>The MAC size includes the minimum, the maximum, and two other random values.</h:li></h:ul><h:p/>
						The evaluator shall compare the output against results generated by a known-good
						implementation with the same input.	
					</Tests>
				</aactivity>
			</f-element>
          
        </f-component>
        
        <f-component cc-id="fcs_cop.1" iteration="KeyEnc" name="Cryptographic Operation - Key Encryption" id="fcs-cop-1-keyenc" status="sel-based">
          <depends on-sel="sel-fcs-kyc-ext-1-1-sel-1"/>
          <depends on-sel="fcs-pcc-ext-1-2-sel-2"/>
          <depends on-sel="sel-fpt-kyp-ext-1-1-sel-2"/>
          <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3cii"/>
          <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3eii"/>
          <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3eiv"/>
          <f-element id="fcs_cop-1-1-keyenc">
				<title>
					The TSF shall perform [symmetric-key encryption/decryption] in accordance with a
					specified cryptographic algorithm
					<selectables>
						<tabularize id="fcs-cop-keyenc-sels" title="Allowed choices for FCS_COP.1/SKC">
							<textcol>Identifier</textcol>
							<reqtext></reqtext>
							<selectcol>Cryptographic algorithm</selectcol>
							<reqtext>and cryptographic key sizes</reqtext>
							<selectcol>Cryptographic key sizes</selectcol>
							<reqtext>that meet the following:</reqtext>
							<selectcol>List of standards</selectcol>
							<reqtext><h:p/><h:p/>The following table provides the allowed choices for
								completion of the selection operations of FCS_COP.1/SKC.</reqtext>
						</tabularize>

						<!-- AES-CBC -->
						<selectable id="sel-fcs-cop-keyenc-aes-cbc">
							<col>AES-CBC</col>
							<col>AES in CBC mode with non-repeating and unpredictable IVs</col>
							<col>256 bits</col>
							<col><selectables>
								<selectable>ISO/IEC 18033-3:2010 (Subclause 5.2)</selectable>
								<selectable>FIPS PUB 197</selectable></selectables> [AES]<h:p/><selectables>
								<selectable>ISO/IEC 10116:2017 (Clause 7)</selectable>
								<selectable>NIST SP 800-38A</selectable></selectables> [CBC]
							</col>
						</selectable>

						<!-- AES-GCM -->
						<selectable id="sel-fcs-cop-keyenc-aes-gcm">
						<col>AES-GCM</col>
						<col>AES in GCM mode with non-repeating IVs using <selectables>
							<selectable>deterministic</selectable>
							<selectable>RBG-based</selectable></selectables>,
							IV construction; the tag must be of length
							<selectables>
								<selectable>96</selectable>
								<selectable>104</selectable>
								<selectable>112</selectable>
								<selectable>120</selectable>
								<selectable>128</selectable>
							</selectables> bits.
						</col>
						<col>256 bits</col>
						<col><selectables>
							<selectable>ISO/IEC 18033-3:2010 (Subclause 5.2)</selectable>
							<selectable>FIPS PUB 197</selectable></selectables> [AES]<h:p/>
							<selectables>
							<selectable>ISO/IEC 19772:2020 (Clause 10)</selectable>
							<selectable>NIST SP 800-38D</selectable></selectables> [GCM]
						</col></selectable>
					</selectables>
				</title>
            <note role="application">
              This SFR is required when the TSF performs key encryption as part of maintaining and deriving a key chain (FCS_CKM.5.1, FCS_KYC_EXT.1) or when the TSF
              uses key encryption as part of password conditioning.
            </note>
                <aactivity>
					<TSS>
						The evaluator shall examine the TSS to ensure that it describes the construction of any IVs,
						tweak values, and counters in conformance with the relevant specifications.<h:p/>
						If a GCM mode algorithm is selected, then the evaluator shall examine the TOE summary
						specification to confirm that it describes how the IV is generated and that the same IV is never
						reused to encrypt different plaintext pairs under the same key. The evaluator shall also confirm
						that for each invocation of GCM, the length of the plaintext is at most (2<h:sup>32</h:sup>)-2 blocks.
					</TSS>
					<Guidance>
						If multiple key encryption modes are supported, the evaluator examines the guidance
						documentation to determine that the method of choosing a specific mode/key size by
						the end user is described.
					</Guidance>
					<KMD>
						The evaluator shall examine the vendor's KMD to verify that it includes a description
						of how key encryption will be used as part of the key chain.
					</KMD>
					<Tests>
						The AES test should be followed in FCS_COP.1/SKC Cryptographic Operation - Symmetric Key Cryptography
					</Tests>
            </aactivity>
          </f-element>
          
        </f-component>
        
        <f-component cc-id="fcs_cop.1" iteration="KeyEncap" name="Cryptographic Operation - Key Encapsulation" id="fcs-cop-1-keyencap" status="sel-based">
          <depends on-sel="sel-fcs-kyc-ext-1-1-sel-2"/>
          <depends on-sel="fcs-pcc-ext-1-2-sel-2"/>
          <depends on-sel="sel-fpt-kyp-ext-1-1-sel-2"/>
          <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3cii"/>
          <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3eii"/>
          <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3eiv"/>
          <f-element id="fcs_cop-1-1-keyencap">
				<title> The TSF shall perform [key encapsulation] in accordance with a specified cryptographic algorithm
					<selectables>
						<tabularize id="tab-fcs-cop-keyencap-sels" title="Allowed choices for FCS_COP.1/KeyEncap">
							<textcol>Identifier</textcol>
							<reqtext></reqtext>
							<selectcol>Cryptographic algorithm</selectcol>
							<reqtext>and cryptographic key sizes</reqtext>
							<selectcol>Cryptographic key sizes</selectcol>
							<reqtext>that meet the following:</reqtext>
							<selectcol>List of standards</selectcol>
							<reqtext><h:p/><h:p/>The following table provides the allowed choices for
										completion of the selection operations of FCS_COP.1/KeyEncap.</reqtext>
						</tabularize>

						<selectable id="sel-fcs-cop-keyencap-kas1">
							<col>KAS1</col>
							<col>RSASVE</col>
						<col><selectables>
							<selectable>3072</selectable>
							<selectable>4096</selectable>
							<selectable>6144</selectable>
							<selectable>8192</selectable>
						</selectables> bits</col>
						<col>NIST SP 800-56B Revision 2 (Section 7.2.1)</col>
						</selectable>

						<selectable id="sel-fcs-cop-keyencap-kts">
							<col>KTS-OAEP</col>
							<col>RSA-OAEP</col>
						<col><selectables>
							<selectable>3072</selectable>
							<selectable>4096</selectable>
							<selectable>6144</selectable>
							<selectable>8192</selectable>
						</selectables> bits</col>
						<col>NIST SP 800-56B Revision 2 (Sections 6.3 and 9)</col>
						</selectable>

						<selectable id="sel-fcs-cop-keyencap-mlkem">
							<col>ML-KEM</col>
							<col>ML-KEM</col>
							<col>Parameter set = ML-KEM-1024</col>
							<col>NIST FIPS 203</col>
						</selectable>

					</selectables>
				</title>
            <note role="application">
              This requirement is used in the body of the ST if the ST author chooses to use key transport in the key chaining approach that is specified in 
              FCS_KYC_EXT.1.<h:br/><h:br/>
              NIST SP 800-57 Part 1 Revision 5 Section 5.6.2 specifies that the size of key used to protect the
              key being transported should be at least the security strength of the key it is protecting.<h:p/>
              If this SFR is claimed, then FCS_CKM.1/AKG and FCS_CKM.6 must also be claimed.<h:p/>
              KAS1 and KTS-OAEP with the selectable parameters are CNSA 1.0 compliant. ML-KEM-1024 is CNSA 2.0 compliant.
            </note>
				<aactivity>
					<TSS>The evaluator shall ensure that the TSS documents that the selection of the key size is
						sufficient for the security strength of the key encapsulated.<h:p/>
						The evaluator shall examine the TSS to verify that any one-time values such as nonces or masks
						are constructed and used in accordance with the relevant standards.
					</TSS>
					<Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
					<KMD>There are no KMD evaluation activities for this SFR.</KMD>
					<Tests>
						The following tests may require the developer to provide access to a test platform that
						provides the evaluator with tools that are typically not found on factory products.<h:p/>
						The following tests are conditional based upon the selections made in the SFR. The
						evaluator shall perform the following test or witness respective tests executed by
						the developer. The tests must be executed on a platform that is as close as practically
						possible to the operational platform (but which may be instrumented in terms of,
						for example, use of a debug mode). Where the test is not carried out on the TOE
						itself, the test platform shall be identified and the differences between test
						environment and TOE execution environment shall be described.<h:p/>

						<!-- KAS1 -->
						<h:br/><h:b>KAS1 [RSASVE single-party]</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Identifier</h:td>
								<h:td valign="top">Cryptographic Algorithm</h:td>
								<h:td valign="top">Cryptographic Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">KAS1</h:td>
								<h:td valign="top">RSASVE</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> 3072, 4096, 6144, 8192] bits</h:td>
								<h:td valign="top">NIST SP 800-56B Revision 2 (Section 7.2.1)</h:td>
							</h:tr>
						</h:table><h:p/>
						To test the TOE’s implementation of the of KAS1 RSASVE Single-Party Key Encapsulation, the
						evaluator shall perform the Algorithm Functional Test and Validation Test using the following
						input parameters:<h:ul>
						<h:li>RSA Private key format [Basic with fixed public exponent, Prime Factor with fixed
							public exponent, Chinese Remainder Theorem with fixed public exponent, Basic with
							random public exponent, Prime Factor with random public exponent, Chinese
							Remainder Theorem with random public exponent]</h:li>
						<h:li>Modulo value [3072, 4096, 6144, 8192]</h:li>
						<h:li>Role [initiator, responder]</h:li>
						<h:li>Key confirmation supported [yes, no]</h:li></h:ul><h:p/>
						The evaluator shall generate a test group (i.e. set of tests) for each parameter value of the above
						parameter type with the largest number of supported values. For example, if the TOE supports all
						six key formats, then the evaluator shall generate six test groups. Each of the above supported
						parameter values must be included in at least one test group.<h:p/>
						Regardless of how many parameter values are supported, there must be at least two test groups.<h:p/>
						Half of the test groups are designated as Algorithm Functional Tests (AFT) and the remainder
						are designated as Validation Tests (VAT). If there is an odd number of groups, then the extra
						group is designated randomly as either AFT or VAT.<h:p/>
						If there are only two test groups, in addition to the above, one shall act as an initiator, and the
						other as a responder, if supported.<h:p/>
						<h:br/><h:b>Algorithm Functional Test</h:b><h:p/>
						For each test group designated as AFT, the evaluator shall generate 10 test cases using random
						data (except for a fixed public exponent, if supported). The resulting shared secrets shall be
						compared with those generated by a known-good implementation using the same inputs.<h:p/>
						<h:br/><h:b>Validation Test</h:b><h:p/>
						For each test group designated as VAT, the evaluator shall generate 25 test cases are using
						random data (except for a fixed public exponent, if supported). Of the 25 test cases:<h:ul>
						<h:li>Two test cases must have a shared secret with a leading nibble of 0s,</h:li>
						<h:li>Two test cases have modified derived key material,</h:li>
						<h:li>Two test cases have modified tags, if key confirmation is supported,</h:li>
						<h:li>Two test cases have modified MACs, if key confirmation is supported, and</h:li>
						<h:li>The remaining test cases are not modified.</h:li></h:ul><h:p/>
						To determine correctness, the evaluator shall confirm that the resulting 25 shared secrets
						correspond as expected for both the modified and unmodified values.<h:p/>

						<!-- KTS-OAEP  -->
						<h:br/><h:b>KTS-OAEP [RSA-OAEP]</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Identifier</h:td>
								<h:td valign="top">Cryptographic Algorithm</h:td>
								<h:td valign="top">Cryptographic Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">KTS-OAEP</h:td>
								<h:td valign="top">RSA-OAEP</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> 3072, 4096, 6144, 8192] bits</h:td>
								<h:td valign="top">NIST SP 800-56B Revision 2 (Sections 6.3 &amp; 9)</h:td>
							</h:tr>
						</h:table><h:p/>
						To test the TOE’s implementation of the of KTS-OAEP, the evaluator shall perform the
						Algorithm Functional Test and Validation Test using the following input parameters:<h:ul>
						<h:li>Roles [initiator, receiver]</h:li>
						<h:li>Private Key format [Basic with fixed public exponent, Prime Factor with fixed public
							exponent, Chinese Remainder Theorem with fixed public exponent, Basic with
							random public exponent, Prime Factor with random public exponent, Chinese
							Remainder Theorem with random public exponent]</h:li>
						<h:li>Supported modulus values [3072, 4096, 6144, 8192]</h:li>
						<h:li>Key confirmation supported [yes, no]</h:li></h:ul><h:p/>
						The evaluator shall generate a test group (i.e. set of tests) for each parameter value of the above
						parameter type with the largest number of supported values. For example, if the TOE supports all
						six key formats, then the evaluator shall generate six test groups. Each of the above supported
						parameter values must be included in at least one test group.<h:p/>
						Regardless of how many parameter values are supported, there must be at least two test groups.<h:p/>
						Half of the test groups are designated as Algorithm Functional Tests (AFT) and the remainder
						are designated as Validation Tests (VAT). If there is an odd number of groups, then the extra
						group is designated randomly as either AFT or VAT.<h:p/>
						If there are only two test groups, in addition to the above, one shall act as an initiator, and the
						other as a responder, if supported.<h:p/>
						<h:br/><h:b>Algorithm Functional Test</h:b><h:p/>
						For each test group designated as AFT, the evaluator shall generate 10 test cases using random
						data (except for a fixed public exponent, if supported). The resulting shared secrets shall be
						compared with those generated by a known-good implementation using the same inputs.<h:p/>
						<h:br/><h:b>Validation Test</h:b><h:p/>
						For each test group designated as VAT, the evaluator shall generate 25 test cases are using
						random data (except for a fixed public exponent, if supported). Of the 25 test cases:<h:ul>
						<h:li>Two test cases must have a shared secret with a leading nibble of 0s,</h:li>
						<h:li>Two test cases have modified derived key material,</h:li>
						<h:li>Two test cases have modified tags, if key confirmation is supported,</h:li>
						<h:li>Two test cases have modified MACs, if key confirmation is supported, and</h:li>
						<h:li>The remaining test cases are not modified.</h:li></h:ul><h:p/>
						To determine correctness, the evaluator shall confirm that the resulting 25 shared secrets
						correspond as expected for both the modified and unmodified values.<h:p/>

						<!-- ML-KEM  -->
						<h:br/><h:b>ML-KEM Key Encapsulation</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Identifier</h:td>
								<h:td valign="top">Cryptographic Algorithm</h:td>
								<h:td valign="top">Cryptographic Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">ML-KEM</h:td>
								<h:td valign="top">ML-KEM</h:td>
								<h:td valign="top">Parameter set = ML-KEM-1024</h:td>
								<h:td valign="top">NIST FIPS PUB 203</h:td>
							</h:tr>
						</h:table><h:p/>
						To test the TOE’s implementation of ML-KEM key encapsulation/decapsulation, the evaluator
						shall perform the Encapsulation Test and the Decapsulation Test using the following input
						parameters:<h:ul>
						<h:li>Encapsulation Parameters:<h:ul>
							<h:li>Parameter set [ML-KEM-1024]</h:li>
							<h:li>Previously generated encapsulation key (<h:i>ek</h:i>)</h:li>
							<h:li>Random value (<h:i>m</h:i>) [32 bytes]</h:li></h:ul></h:li>
						<h:li>Decapsulation Parameters:<h:ul>
							<h:li>Parameter set [ML-KEM-1024]</h:li>
							<h:li>Previously generated decapsulation key (<h:i>dk</h:i>)</h:li>
							<h:li>Previously generated ciphertext (<h:i>c</h:i>) [32 bytes]</h:li></h:ul></h:li>
						</h:ul><h:p/>
						<h:br/><h:b>Encapsulation Test</h:b><h:p/>
						For each supported parameter set the evaluator shall generate 25 test cases consisting of an
						encapsulation key ek and random value m. For each test case the valuator shall require the
						implementation under test to generate the corresponding shared secret k and ciphertext c. To
						determine correctness, the evaluator shall compare the resulting values with those generated
						using a known-good implementation using the same inputs.<h:p/>
						<h:br/><h:b>Encapsulation Key Check (if supported)</h:b><h:p/>
						The evaluator shall generate 10 encapsulation keys such that:<h:ul>
						<h:li>Five of the encapsulation keys are valid, and</h:li>
						<h:li>Five of the encapsulation keys are modified such that a value in the noisy linear
						system is encoded into the key as a value greater than Q.</h:li></h:ul><h:p/>
						The evaluator shall invoke the TOE’s Encapsulation Key Check functionality to determine the
						validity of the 10 keys. The unmodified keys should be determined valid, and the modified keys
						should be determined invalid. <h:p/>
						<h:br/><h:b>Decapsulation Key Check (if supported)</h:b><h:p/>
						The evaluator shall generate 10 decapsulation keys such that:<h:ul>
						<h:li>Five of the decapsulation keys are valid, and</h:li>
						<h:li>Five of the decapsulation keys are modified such that the concatenated
						values ek||H(ek) will no longer match by modifying H(ek) to be a different value.</h:li></h:ul><h:p/>
						The evaluator shall invoke the TOE’s Decapsulation Key Check functionality to determine the
						validity of the 10 keys. The unmodified keys should be determined valid, and the modified keys
						should be determined invalid.<h:p/>
						<h:br/><h:b>Decapsulation Test</h:b><h:p/>
						For each supported parameter set the evaluator shall use a single previously generated
						decapsulation key <h:i>dk</h:i> and generate 10 test cases consisting of valid and invalid ciphertexts c. For
						each test case the evaluator shall require the implementation under test to generate the
						corresponding shared secret <h:i>k</h:i> whether or not the ciphertext is valid. To determine correctness,
						the evaluator shall compare the resulting values with those generated using a known-good
						implementation using the same inputs.<h:p/>
					</Tests>
				</aactivity>
          </f-element>
          
        </f-component>
        
            
            <f-component cc-id="fcs_cop.1" iteration="KeyWrap" name="Cryptographic Operation - Key Wrapping" id="fcs-cop-1-keywrap" status="sel-based">
              <depends on-sel="sel-fcs-kyc-ext-1-1-sel-4"/>
              <depends on-sel="sel-fcs-val-ext-1-1-sel-2a"/>
              <depends on-sel="sel-fpt-kyp-ext-1-1-sel-2"/>
              <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3cii"/>
              <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3eii"/>
              <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3eiv"/>
              <f-element id="fcs_cop-1-1-keywrap">
                
				<title>
					The TSF shall perform [key wrapping] in accordance with a specified cryptographic algorithm
					<selectables>
						<tabularize id="fcs-cop-kw-sels" title="Allowed choices for FCS_COP.1/KeyWrap">
							<textcol>Identifier</textcol>
							<reqtext></reqtext>
							<selectcol>Cryptographic algorithm</selectcol>
							<reqtext>and cryptographic key sizes</reqtext>
							<selectcol>Cryptographic key sizes</selectcol>
							<reqtext>that meet the following:</reqtext>
							<selectcol>List of standards</selectcol>
							<reqtext><h:p/><h:p/>The following table provides the allowed choices for
								completion of the selection operations of FCS_COP.1/KeyWrap.</reqtext>
						</tabularize>

						<!-- AES-KW  -->
						<selectable id="sel-fcs-cop-kw-aes-kw">
							<col>AES-KW</col>
							<col>AES in KW mode</col>
							<col>256 bits</col>
							<col><selectables>
								<selectable>ISO/IEC 18033-3:2010 (Subclause 5.2)</selectable>
								<selectable>FIPS PUB 197</selectable></selectables> [AES]<h:p/>
								<selectables>
								<selectable>ISO/IEC 19772:2020 (clause 6)</selectable>
								<selectable>NIST SP 800-38F (Section 6.2)</selectable>
							</selectables> [KW mode]</col>
						</selectable>

						<!-- KWP mode -->
						<selectable id="sel-fcs-cop-kw-aes-kwp">
							<col>AES-KWP</col>
							<col>AES in KWP mode</col>
							<col>256 bits</col>
							<col><selectables>
								<selectable>ISO/IEC 18033-3:2010 (Subclause 5.2)</selectable>
								<selectable>FIPS PUB 197</selectable></selectables> [AES]<h:p/>
								NIST SP 800-38F (Section 6.3) [KWP mode]</col>
						</selectable>

						<selectable id="sel-fcs-cop-kw-aes-ccm">
						<col>AES-CCM</col>
						<col>AES in CCM mode with unpredictable, non-repeating nonce, minimum size of 64 bits</col>
						<col>256 bits</col>
						<col><selectables>
							<selectable>ISO/IEC 18033-3:2010 (Subclause 5.2)</selectable>
							<selectable>FIPS PUB 197</selectable></selectables> [AES]<h:p/>
							<selectables>
							<selectable>ISO/IEC 19772:2020 (Clause 7)</selectable>
							<selectable>NIST SP 800-38C</selectable></selectables> [CCM]
						</col></selectable>

						<selectable id="sel-fcs-cop-kw-aes-gcm">
						<col>AES-GCM</col>
						<col>AES in GCM mode with non-repeating IVs using <selectables>
							<selectable>deterministic</selectable>
							<selectable>RBG-based</selectable></selectables>,
							IV construction; the tag must be of length
							<selectables>
								<selectable>96</selectable>
								<selectable>104</selectable>
								<selectable>112</selectable>
								<selectable>120</selectable>
								<selectable>128</selectable>
							</selectables> bits.
						</col>
						<col>256 bits</col>
						<col><selectables>
							<selectable>ISO/IEC 18033-3:2010 (Subclause 5.2)</selectable>
							<selectable>FIPS PUB 197</selectable></selectables> [AES]<h:p/>
							<selectables>
							<selectable>ISO/IEC 19772:2020 (Clause 10)</selectable>
							<selectable>NIST SP 800-38D</selectable></selectables> [GCM]
						</col></selectable>
					</selectables>
				</title>
                <note role="application">
                  This SFR is required when the TSF performs key wrapping as part of maintaining and deriving a key chain (FCS_KYC_EXT.1) or
                  when the TSF performs validation of a submask, intermediate key, or BEV using a key wrap operation (FCS_VAL_EXT.1).<h:br/><h:br/>
                  NIST 800-57p1rev5 sec. 5.6.2 specifies that the size of key used to protect the key being
                  transported should be at least the security strength of the key it is protecting.
                </note>
				<aactivity>
					<TSS>
						The evaluator shall ensure that the TSS documents that the selection of the key size is
						sufficient for the security strength of the key wrapped.<h:p/>
						The evaluator shall examine the TSS to ensure that it describes the construction of any IVs,
						nonces, and MACs in conformance with the relevant specifications.<h:p/>
						If a CCM mode algorithm is selected, then the evaluator shall examine the TOE summary
						specification to confirm that it describes how the nonce is generated and that the same nonce is
						never reused to encrypt different plaintext pairs under the same key.<h:p/>
						If a GCM mode algorithm is selected, then the evaluator shall examine the TOE summary
						specification to confirm that it describes how the IV is generated and that the same IV is never
						reused to encrypt different plaintext pairs under the same key. The evaluator shall also confirm
						that for each invocation of GCM, the length of the plaintext is at most (2<h:sup>32</h:sup>)-2 blocks.
					</TSS>
					<Guidance/>
					<KMD>
						The evaluator shall review the KMD to ensure that all keys are wrapped using the
						approved method and a description of when the key wrapping occurs.
					</KMD>
					<Tests>
						For tests of AES-GCM, see testing for FCS_COP.1/SKC.<h:p/>
						The following tests are conditional based upon the selections made in the SFR. The evaluator
						shall perform the following test or witness respective tests executed by the developer. The tests
						must be executed on a platform that is as close as practically possible to the operational platform
						(but which may be instrumented in terms of, for example, use of a debug mode). Where the test
						is not carried out on the TOE itself, the test platform shall be identified and the differences
						between test environment and TOE execution environment shall be described.<h:p/>

						<!-- AES-KW -->
						<h:br/><h:b>AES-KW</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Identifier</h:td>
								<h:td valign="top">Cryptographic Algorithm</h:td>
								<h:td valign="top">Cryptographic Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">AES-KW</h:td>
								<h:td valign="top">AES in KW mode</h:td>
								<h:td valign="top">256 bits</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> ISO/IEC 18033-3:2010 (Subclause 5.2),
														FIPS PUB 197] [AES]<h:p/>
													[<h:b>selection:</h:b> ISO/IEC 19772:2020 (clause 6),
														NIST SP 800-38F (Section 6.2)] [KW mode] </h:td>
							</h:tr>
						</h:table><h:p/>
						To test the TOE’s ability to wrap keys using AES in Key Wrap mode the evaluator shall perform
						the Algorithm Functional Tests using the following input parameters:<h:ul>
						<h:li>Key size [256] bits</h:li>
						<h:li>Keyword cipher type [cipher, inverse]</h:li>
						<h:li>Payload sizes [128-4096] bits by 64s</h:li></h:ul><h:p/>
						<h:br/><h:b>Algorithm Functional Test</h:b><h:p/>
						The evaluator shall generate 100 encryption test cases using random data for each combination
						of claimed key size, keyword cipher type, and six supported payload sizes such that the payload
						sizes include the minimum, the maximum, two that are divisible by 128, and two that are not
						divisible by 128.<h:p/>
						The results shall be compared with those generated by a known-good implementation using the
						same inputs.<h:p/>
						The evaluator shall generate 100 decryption test cases using the same parameters as above, but
						with 20 of each 100 test cases having modified ciphertext to produce an incorrect result. To
						determine correctness, the evaluator shall confirm that the results correspond as expected for
						both the modified and unmodified values.<h:p/>

						<!-- AES-KWP -->
						<h:br/><h:b>AES-KWP</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Identifier</h:td>
								<h:td valign="top">Cryptographic Algorithm</h:td>
								<h:td valign="top">Cryptographic Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">AES-KWP</h:td>
								<h:td valign="top">AES in KWP mode</h:td>
								<h:td valign="top">256 bits</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> ISO/IEC 18033-3:2010 (Subclause 5.2),
														FIPS PUB 197] [AES]<h:p/>
													NIST SP 800-38F (Section 6.3) [KWP mode] </h:td>
							</h:tr>
						</h:table><h:p/>
						To test the TOE’s ability to wrap keys using AES in Key Wrap with Padding mode with padding
						the evaluator shall perform the Algorithm Functional Tests using the following input parameters:<h:ul>
						<h:li>Key size [256] bits</h:li>
						<h:li>Keyword cipher type [cipher, inverse]</h:li>
						<h:li>Payload sizes [8-4096] bits by 8s</h:li></h:ul><h:p/>
						<h:br/><h:b>Algorithm Functional Test</h:b><h:p/>
						The evaluator shall generate 100 encryption test cases using random data for each combination
						of claimed key size, keyword cipher type, and six supported payload sizes such that the payload
						sizes include the minimum, the maximum, two that are divisible by 128, and two that are not
						divisible by 128.<h:p/>
						The results shall be compared with those generated by a known-good implementation using the
						same inputs.<h:p/>
						The evaluator shall generate 100 decryption test cases using the same parameters as above, but
						with 20 of each 100 test cases having modified ciphertext to produce an incorrect result. To
						determine correctness, the evaluator shall confirm that the results correspond as expected for
						both the modified and unmodified values.<h:p/>

						<!-- AES-CCM -->
						<h:br/><h:b>AES-CCM</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Identifier</h:td>
								<h:td valign="top">Cryptographic Algorithm</h:td>
								<h:td valign="top">Cryptographic Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">AES-CCM </h:td>
								<h:td valign="top">AES in CCM mode with nonrepeating nonce, minimum size
									of 64 bits</h:td>
								<h:td valign="top">256 bits</h:td>
								<h:td valign="top">
									[<h:b>selection:</h:b> ISO/IEC 18033-3:2010 (Subclause 5.2),
									FIPS PUB 197] [AES]<h:p/>
									[<h:b>selection:</h:b>  ISO/IEC 19772:2020 (Clause 7), NIST SP 800-38C] [CCM]</h:td>
							</h:tr>
						</h:table><h:p/>
						To test the TOE’s implementation of AES-CCM authenticated encryption functionality the
						evaluator shall perform the Algorithm Functional Tests described below using the following
						input parameters:<h:ul>
						<h:li>Key Size [256] bits</h:li>
						<h:li>Associated data size [0-65536] bits in increments of 8</h:li>
						<h:li>Payload size [0-256] bits in increments of 8</h:li>
						<h:li>IV/Nonce size [64-104] bits in increments of 8</h:li>
						<h:li>Tag size [32-128] bits in increments of 16</h:li></h:ul><h:p/>
						<h:br/><h:b>Algorithm Functional Tests</h:b><h:p/>
						Unless otherwise specified, the following tests should use random data, a tag size of 128 bits,
						IV/Nonce size of 104 bits, payload size of 256 bits, and associated data size of 256 bits. If any of
						these values are not supported, any supported value may be used. The evaluator shall compare
						the output from each test case against results generated by a known-good implementation with
						the same input parameters.<h:p/>
						<h:br/><h:b><h:i>Variable Associated Data Test</h:i></h:b><h:p/>
						For each claimed key size, and for each supported associated data size from 0 through 256 bits in
						increments of 8 bits, the TOE must be tested by encrypting 10 test cases using all random data.
						In addition, for each key size, the TOE must be tested by encrypting 10 cases with associated
						data lengths of 65536 bits, if supported.<h:p/>
						<h:br/><h:b><h:i>Variable Payload Test</h:i></h:b><h:p/>
						For each claimed key size, and for each supported payload size from 0 through 256 bits in
						increments of 8 bits, the TOE must be tested by encrypting 10 test cases using all random data.<h:p/>
						<h:br/><h:b><h:i>Variable Nonce Test</h:i></h:b><h:p/>
						For each claimed key size, and for each supported IV/Nonce size from 64 through 104 bits in
						increments of 8 bits, the TOE must be tested by encrypting 10 test cases using all random data.<h:p/>
						<h:br/><h:b><h:i>Variable Tag Test</h:i></h:b><h:p/>
						For each claimed key size, and for each supported tag size from 32 through 128 bits in
						increments of 16 bits, the TOE must be tested by encrypting 10 test cases using all random data.<h:p/>
						<h:br/><h:b><h:i>Decryption Verification Test</h:i></h:b><h:p/>
						For each claimed key size, for each supported associated data size from 0 through 256 bits in
						increments of 8 bits, for each supported payload size from 0 through 256 bits in increments of 8
						bits, for each supported IV/Nonce size from 64 through 104 bits in increments of 8 bits, and for
						each supported tag size from 32 through 128 bits in increments of 16 bits, the TOE must be
						tested by decrypting 10 test cases using all random data.<h:p/>
					</Tests>
				</aactivity>
              </f-element>
          
            </f-component>
            
           
        <f-component cc-id="fcs_cop.1" iteration="SigVer" name="Cryptographic Operation (Signature Verification)" id="fcs-cop-1-sigver">
          
          <f-element id="fcs_cop-1-1-sigver">
			<title>The TSF shall perform [<h:i>cryptographic signature services (verification)</h:i>] 
			in accordance with a specified cryptographic algorithm  
			<selectables linebreak="yes">
			<selectable id="fcs_cop.1.1_SigVer_1">CNSA 2.0 Compliant Algorithms: 
				<selectables linebreak="yes">
				<selectable id="fcs_cop.1.1_SigVer_2"><h:b>Leighton-Micali Signature Algorithm</h:b> for verification using cryptographic key sizes of 
					<selectables>
						<selectable id="fcs_cop.1.1_SigVer_3" >192</selectable><selectable id="fcs_cop.1.1_SigVer_4" >256</selectable>
					</selectables> bits that meet the following [NIST SP 800-208, "Recommendation for Stateful Hash-Based Signature Schemes"]
				</selectable>
				<selectable id="fcs_cop.1.1_SigVer_5"><h:b>eXtended Merkle Signature Scheme Algorithm</h:b> for verification using cryptographic key sizes of 
					<selectables>
						<selectable id="fcs_cop.1.1_SigVer_6" >192</selectable><selectable id="fcs_cop.1.1_SigVer_7" >256</selectable>
					</selectables> bits that meets the following: [NIST SP 800-208, "Recommendation for Stateful Hash-Based Signature Schemes"]
				</selectable>
				<selectable id="fcs_cop.1.1_SigVer_8" ><h:b>Module-Lattice-Based Digital Signature Standard</h:b> using the parameter 
				set ML-DSA-87 that meets the following [FIPS 204, Module-Lattice-Based Digital Signature Standard]</selectable>
				</selectables> 
			</selectable>
			<selectable id="fcs_cop.1.1_SigVer_9">CNSA 1.0 Compliant Algorithms: 
				<selectables linebreak="yes">
				<selectable id="fcs_cop.1.1_SigVer_10" ><h:b>RSA schemes</h:b> using cryptographic key sizes of [3072-bit or greater] that meet the following: [FIPS PUB 186-5, “Digital Signature Standard (DSS),” Section 5]</selectable>
				<selectable id="fcs_cop.1.1_SigVer_11"><h:b>ECDSA schemes</h:b> using [“NIST curves” 
					<selectables><selectable id="fcs_cop.1.1_SigVer_12" >P-384</selectable><selectable id="fcs_cop.1.1_SigVer_13" >P-521</selectable></selectables> 
					] that meet the following: [FIPS PUB 186-5, “Digital Signature Standard (DSS),” Section 6]
				</selectable>
				</selectables> 
			</selectable> 
			</selectables>.</title>
            
            <note role="application">
              The selection should be consistent with the overall strength of the algorithm used for FCS_COP.1/SigVer and quantum resistant recommendations. For example, 
              SHA-256 should be chosen for 2048-bit RSA or ECC with P-256, SHA-384 should be chosen for 3072-bit RSA, 4096-bit RSA, or ECC with P-384, and SHA-512 should
              be chosen for ECC with P-521. The selection of the standard is made based on the algorithms selected.<h:br/><h:br/>
              This SFR is mandatory for its use in verification of digital signatures for TOE updates. It may also be used when the TSF performs validation of a submask,
              intermediate key, or BEV by using a digital signature operation (FCS_VAL_EXT.1).<h:p/>Note ML-DSA is not able to be used in any functions at the time of publication, 
			  it is being added for future support. As support is expanded for CNSA 2.0, CNSA 1.0 will be removed as an selection in a future update.
            </note>
            <aactivity>
              <h:p>This requirement is used to verify digital signatures attached to updates from the TOE
                manufacturer before installing those updates on the TOE. Because this component is to
                be used in the update function, additional Evaluation Activities to those listed below
                are covered in other evaluation activities sections in this document. The following
                activities deal only with the implementation for the digital signature algorithm; the
                evaluator performs the testing appropriate for the algorithms selected in the
                component.
              </h:p>
              <h:p>Hash functions and/or random number generation required by these algorithms must
                be specified in the ST; therefore the Evaluation Activities associated with those
                functions are contained in the associated Cryptographic Hashing and Random Bit
                Generation sections. Additionally, the only function required by the TOE is the
                verification of digital signatures. If the TOE generates digital signatures to support the
                implementation of any functionality required by this cPP, then the applicable
                evaluation and validation scheme must be consulted to determine the required
                evaluation activities.</h:p>
              <TSS>The evaluator shall check the TSS to ensure that it describes the overall flow of the
                signature verification. This should at least include identification of the format and
                general location (e.g., "firmware on the hard drive device" rather than “memory
                location 0x00007A4B") of the data to be used in verifying the digital signature; how
                the data received from the operational environment are brought on to the device; and
                any processing that is performed that is not part of the digital signature algorithm (for
                instance, checking of certificate revocation lists).</TSS>
              <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
              <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
              <Tests>
                <h:p>Each section below contains the tests the evaluators must perform for each type of
                  digital signature scheme. Based on the assignments and selections in the requirement,
                  the evaluators choose the specific activities that correspond to those selections.</h:p>
                <h:p>It should be noted that for the schemes given below, there are no key generation/domain
                  parameter generation testing requirements. This is because it is not anticipated that this
                  functionality would be needed in the end device, since the functionality is limited to
                  checking digital signatures in delivered updates. This means that the domain
                  parameters should have already been generated and encapsulated in the hard drive
                  firmware or on-board non-volatile storage. If key generation/domain parameter
                  generation is required, the evaluation and validation scheme must be consulted to
                  ensure the correct specification of the required evaluation activities and any additional
                  components.</h:p>
                <h:p>The following tests are conditional based upon the selections made within the SFR.</h:p>
                <h:p>The following tests may require the developer to provide access to a test platform that
                  provides the evaluator with tools that are typically not found on factory products.</h:p>
                <testlist>
                   <h:p style="text-align: left">ECDSA Algorithm Test</h:p> 
                  <test>ECDSA FIPS 186-5 Signature Verification Test. For each supported NIST curve (i.e., P-384 and P-521) and SHA function pair, the evaluator shall generate a set of 10 1024-bit message, public key and signature tuples and modify one of the values (message, public key or signature) in five of the 10 tuples. The evaluator shall obtain in response a set of 10 PASS/FAIL values.</test>
                </testlist>
                <testlist>
                   <h:p style="text-align: left">RSA Signature Algorithm Test</h:p> 
                  <test>Signature Verification Test. The evaluator shall perform the Signature Verification test to verify the ability of the TOE to recognize another party’s valid and invalid signatures. The evaluator shall inject errors into the test vectors produced during the Signature Verification Test by introducing errors in some of the public keys, e, messages, IR format, and/or signatures. The TOE attempts to verify the signatures and returns success or failure.</test>
                </testlist>
                <testlist>
                   <h:p style="text-align: left">LMS/XMSS Signature Algorithm Test</h:p> 
                  <test>For each supported LMS/LMSOTS pair, the evaluator generates a private/public key pair. With the private key, the evaluator generates 4 messages of length 1024 bits. The messages and public key are provided to the TOE. The signature for each message is generated with the following error types "none", “modify message”, “modify signature”, “modify header”. For "none" the message is unmodified and the signature is correct. For "modify message" the signature is for a modified message where a single bit is flipped. For "modify signature", one bit of the signature is flipped. For "modify header" the signature uses a different LMS/LMSOTS pair. Each error type is represented. For each message, signature pair the TOE returns "true" or "false" depending on whether the signature verifies or not.</test>
                </testlist>
                <testlist>
                   <h:p style="text-align: left">ML-DSA Test</h:p> 
                  <test>The evaluator shall 10x input to the internal SigVer function, a public key, message and signature. Verify the signature. Tests should involve a mix of good and bad signatures generated using different messages, keys, etc. Here internal SigVer refers to the TOE’s implementation of the function ML-DSA.Verify_internal(-,-,-) as described in FIPS.204.</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          
        </f-component>
        
        <f-component cc-id="fcs_cop.1" iteration="SKC" name="Cryptographic Operation - Symmetric Key Cryptography" id="fcs-cop-1-skc" status="sel-based">
              <depends on-sel="fcs-val-ext-1-1-decr"/>
              <depends on-sel="sel-fcs-kyc-ext-1-1-sel-1"/>
              <depends on-sel="submask-derived"/>
              <depends on-sel="sel-fcs-val-ext-1-1-sel-2a"/>          

              <f-element id="fcs_cop-1-1-skc">
				<title>
					The TSF shall perform [symmetric-key encryption/decryption] in accordance with a
					specified cryptographic algorithm
					<selectables>
						<tabularize id="fcs-cop-skc-sels" title="Allowed choices for FCS_COP.1/SKC">
							<textcol>Identifier</textcol>
							<reqtext></reqtext>
							<selectcol>Cryptographic algorithm</selectcol>
							<reqtext>and cryptographic key sizes</reqtext>
							<selectcol>Cryptographic key sizes</selectcol>
							<reqtext>that meet the following:</reqtext>
							<selectcol>List of standards</selectcol>
							<reqtext><h:p/><h:p/>The following table provides the allowed choices for
								completion of the selection operations of FCS_COP.1/SKC.</reqtext>
						</tabularize>

						<!-- AES-CBC -->
						<selectable id="sel-fcs-cop-skc-aes-cbc">
							<col>AES-CBC</col>
							<col>AES in CBC mode with non-repeating and unpredictable IVs</col>
							<col>256 bits</col>
							<col><selectables>
								<selectable>ISO/IEC 18033-3:2010 (Subclause 5.2)</selectable>
								<selectable>FIPS PUB 197</selectable></selectables> [AES]<h:p/><selectables>
								<selectable>ISO/IEC 10116:2017 (Clause 7)</selectable>
								<selectable>NIST SP 800-38A</selectable></selectables> [CBC]
							</col>
						</selectable>

						<!-- XTS-AES -->
						<selectable id="sel-fcs-cop-skc-aes-xts">
							<col>XTS-AES</col>
							<col>AES in XTS mode with unique tweak values that are consecutive non-negative
								integers starting at an arbitrary non-negative integer</col>
							<col>512 bits</col>
							<col><selectables>
								<selectable>ISO/IEC 18033-3:2010 (Subclause 5.2)</selectable>
								<selectable>FIPS PUB 197</selectable></selectables> [AES]<h:p/><selectables>
								<selectable>IEEE Std. 1619-2018</selectable>
								<selectable>NIST SP 800-38E</selectable></selectables> [XTS]
							</col>
						</selectable>

						<!-- AES-GCM -->
						<selectable id="sel-fcs-cop-skc-aes-gcm">
						<col>AES-GCM</col>
						<col>AES in GCM mode with non-repeating IVs using <selectables>
							<selectable>deterministic</selectable>
							<selectable>RBG-based</selectable></selectables>,
							IV construction; the tag must be of length
							<selectables>
								<selectable>96</selectable>
								<selectable>104</selectable>
								<selectable>112</selectable>
								<selectable>120</selectable>
								<selectable>128</selectable>
							</selectables> bits.
						</col>
						<col>256 bits</col>
						<col><selectables>
							<selectable>ISO/IEC 18033-3:2010 (Subclause 5.2)</selectable>
							<selectable>FIPS PUB 197</selectable></selectables> [AES]<h:p/>
							<selectables>
							<selectable>ISO/IEC 19772:2020 (Clause 10)</selectable>
							<selectable>NIST SP 800-38D</selectable></selectables> [GCM]
						</col></selectable>
					</selectables>
				</title>
                <note role="application">
                  The intent of this requirement in the context of this cPP is to provide an SFR that expresses the appropriate symmetric encryption/decryption algorithms
                  suitable for use in the TOE. If the ST author incorporates the validation requirement (FCS_VAL_EXT.1) and chooses to select the option to decrypt a known
                  value and perform a comparison, this is the requirement used to specify the algorithm, modes, and key sizes the ST author can choose from.<h:br/><h:br/>

                  When the XTS mode is selected, a cryptographic key of 512-bit is allowed as specified in IEEE 1619. XTS-AES key is divided into two AES keys
                  of equal size - AES-256 is used when a 512-bit key and XTS mode are selected.<h:br/><h:br/>

                  This SFR is required when the TSF performs any key wrapping, key encryption, or key derivation operation as part of maintaining and deriving a key chain
                  (FCS_CKM.5.1, FCS_KYC_EXT.1), or when the TSF performs validation of a submask, intermediate key, or BEV using a symmetric encryption operation
                  (FCS_VAL_EXT.1).

                </note>
                <aactivity>
					<TSS>
						The evaluator shall examine the TSS to ensure that it describes the construction of any IVs,
						tweak values, and counters in conformance with the relevant specifications.<h:p/>
						If XTS-AES is claimed then the evaluator shall examine the TSS to verify that the TOE creates
						full-length keys by methods that ensure that the two key halves are different and independent.
						If a GCM mode algorithm is selected, then the evaluator shall examine the TOE summary
						specification to confirm that it describes how the IV is generated and that the same IV is never
						reused to encrypt different plaintext pairs under the same key. The evaluator shall also confirm
						that for each invocation of GCM, the length of the plaintext is at most (2<h:sup>32</h:sup>)-2 blocks.
					</TSS>
					<Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
					<KMD>There are no KMD evaluation activities for this SFR.</KMD>
					<Tests>
						The following tests require the developer to provide access to a test platform that
						provides the evaluator with tools that are typically not found on factory products.<h:p/>
						The following tests are conditional based upon the selections made in the SFR. The
						evaluator shall perform the following test or witness respective tests executed by
						the developer. The tests must be executed on a platform that is as close as practically
						possible to the operational platform (but which may be instrumented in terms of,
						for example, use of a debug mode). Where the test is not carried out on the TOE
						itself, the test platform shall be identified and the differences between test
						environment and TOE execution environment shall be described.<h:p/>

						<!-- AES-CBC -->
						<h:br/><h:b>AES-CBC</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Identifier</h:td>
								<h:td valign="top">Cryptographic Algorithm</h:td>
								<h:td valign="top">Cryptographic Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">AES-CBC</h:td>
								<h:td valign="top">AES in CBC mode with non-repeating and unpredictable IVs</h:td>
								<h:td valign="top">256 bits</h:td>
								<h:td valign="top">
									[<h:b>selection:</h:b> ISO/IEC 18033-3:2010 (Subclause 5.2),
										FIPS PUB 197] [AES]<h:p/>
									[<h:b>selection:</h:b>  ISO/IEC 10116:2017 (Clause 7),
										NIST SP 800-38A] [CBC]</h:td>
							</h:tr>
						</h:table><h:p/>

						To test the TOE’s ability to encrypt/decrypt data using AES in CBC mode, the evaluator
						shall perform Algorithm Functional Tests and Monte Carlo Tests using the following
						input parameters:<h:ul>
						<h:li>Key size [256] bits</h:li>
						<h:li>Direction [encryption, decryption]</h:li></h:ul><h:p/>
						<h:br/><h:b>Algorithm Functional Tests</h:b><h:p/>
						Algorithm Functional Tests are designed to verify the correct operation of the logical
						components of the algorithm implementation under normal operation using different block sizes.
						For AES-CBC, there are two types of AFTs:<h:p/>
						<h:br/><h:b><h:i>Known-Answer Tests</h:i></h:b><h:p/>
						For each combination of direction and claimed key size, the TOE must be tested using the
						GFSBox, KeySbox, VarTxt, and VarKey test cases listed in Appendixes B through E of <h:i>The
						Advanced Encryption Standard Algorithm Validation Suite (AESAVS)</h:i>, NIST, 15 November 2002.<h:p/>
						<h:br/><h:b><h:i>Multi-Block Message Tests</h:i></h:b><h:p/>
						For each combination of direction and claimed key size, the TOE must be tested against 10 test
						cases consisting of a random IV, random key, and random plaintext/ciphertext. The
						plaintext/ciphertext starts with a length of 16 bytes and increases by 16 bytes for each test case
						until reaching 160 bytes.<h:p/>
						<h:br/><h:b><h:i>Monte Carlo Tests</h:i></h:b><h:p/>
						Monte Carlo tests are intended to test the implementation under strenuous conditions. The TOE
						must process the test cases according to the following algorithm once for each combination of
						direction and key size:<h:p/>
						<h:pre>
						Key[0] = Key
						IV[0] = IV
						PT[0] = PT
						for i = 0 to 99 {
							Output Key[i], IV[i], PT[0]
							for j = 0 to 999 {
								if (j == 0) {
									CT[j] = AES-CBC-Encrypt(Key[i], IV[i], PT[j])
									PT[j+1] = IV[i]
								} else {
									CT[j] = AES-CBC-Encrypt(Key[i], PT[j])
									PT[j+1] = CT[j-1]
								}
							}
							Output CT[j]
							AES_KEY_SHUFFLE(Key, CT)
							IV[i+1] = CT[j]
							PT[0] = CT[j-1]
						}
						</h:pre><h:p/>
						where <h:pre>AES_KEY_SHUFFLE</h:pre> is defined as: <h:p/>
						<h:pre>
						If ( keylen = 128 )
							Key[i+1] = Key[i] xor MSB(CT[j], 128)
						If ( keylen = 192 )
							Key[i+1] = Key[i] xor (LSB(CT[j-1], 64) || MSB(CT[j], 128))
						If ( keylen = 256 )
							Key[i+1] = Key[i] xor (MSB(CT[j-1], 128) || MSB(CT[j], 128))
						</h:pre><h:p/>
						The above pseudocode is for encryption. For decryption, swap all instances of CT and PT.<h:p/>
						The initial IV, key, and plaintext/ciphertext should be random.<h:p/>
						The evaluator shall test the decrypt functionality using the same test as above,
						exchanging CT and PT, and replacing AES-CBC-Encrypt with AES-CBC-Decrypt.<h:p/>


						<!-- XTS-AES -->
						<h:br/><h:b>XTS-AES</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Identifier</h:td>
								<h:td valign="top">Cryptographic Algorithm</h:td>
								<h:td valign="top">Cryptographic Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">XTS-AES</h:td>
								<h:td valign="top">AES in XTS mode with unique tweak values that are consecutive
									non-negative integers starting at an arbitrary non-negative integer</h:td>
								<h:td valign="top">512 bits</h:td>
								<h:td valign="top">
									[<h:b>selection:</h:b> ISO/IEC 18033-3:2010 (Subclause 5.2),
										FIPS PUB 197] [AES]<h:p/>
									[<h:b>selection:</h:b> IEEE Std. 1619-2018,
										NIST SP 800-38E] [XTS]</h:td>
							</h:tr>
						</h:table><h:p/>
						To test the TOE’s ability to encrypt/decrypt data using AES in XTS mode, the evaluator shall
						perform the Single Data Unit Test and the Multiple Data Unit Test using the following input
						parameters:<h:ul>
						<h:li>Direction [encryption, decryption]</h:li>
						<h:li>Key size [512] bits</h:li>
						<h:li>Tweak value format [128-bit hex string, data unit sequence number]</h:li></h:ul><h:p/>
						<h:br/><h:b>Single Data Unit Test</h:b><h:p/>
						For each combination of claimed key size, direction, and supported tweak value format, the
						evaluator shall generate 50 test cases consisting of random payload data. The payload data size is
						determined randomly for each test case from supported values within the range [128-65536] bits.
						The payload size and data unit size must be equal.<h:p/>
						<h:br/><h:b>Multiple Data Unit Test</h:b><h:p/>
						For each combination of claimed key size, direction, and supported tweak value format, the
						evaluator shall generate 50 test cases consisting of random payload data. The payload data size is
						determined randomly for each test case from supported values within the range [128-65536] bits.
						Likewise, the data unit size is determined randomly for each test case from supported values
						within the range [128-65535] bits. The payload size and data unit size must not be equal.<h:p/>
						The evaluator shall verify the correctness of the TSF’s implementation by comparing values
						generated by the TSF with those generated by a known good implementation using the same
						input parameters.<h:p/>

                                                <!-- AES-GCM -->
						<h:br/><h:b>AES-GCM</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Identifier</h:td>
								<h:td valign="top">Cryptographic Algorithm</h:td>
								<h:td valign="top">Cryptographic Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">AES-GCM </h:td>
								<h:td valign="top">AES in GCM mode with nonrepeating IVs using
									[<h:b>selection:</h:b> deterministic, RBG-based] IV construction;
									the tag must be of length [<h:b>selection:</h:b> 96, 104, 112, 120, or 128] bits.</h:td>
								<h:td valign="top">256 bits</h:td>
								<h:td valign="top">
									[<h:b>selection:</h:b> ISO/IEC 18033-3:2010 (Subclause 5.2),
									FIPS PUB 197] [AES]<h:p/>
									[<h:b>selection:</h:b>  ISO/IEC 19772:2020 (Clause 10), NIST SP 800-38D] [GCM]</h:td>
							</h:tr>
						</h:table><h:p/>
						To test the TOE’s implementation of AES-GCM authenticated encryption functionality the
						evaluator shall perform the Encryption Algorithm Functional Tests and Decryption Algorithm
						Functional Tests as described below using the following input parameters:<h:ul>
						<h:li>Key Size [256] bits</h:li>
						<h:li>Associated data size [0-65536] bits</h:li>
						<h:li>Payload size [0-65536] bits</h:li>
						<h:li>IV size [96] bits</h:li>
						<h:li>Tag size [96, 104, 112, 120, 128] bits</h:li></h:ul><h:p/>
						<h:br/><h:b>Encryption Algorithm Functional Tests</h:b><h:p/>
						The evaluator shall generate 15 test cases using random data for each combination of
						the above parameters as follows:<h:p/><h:ul>
						<h:li>Each claimed key size,</h:li>
						<h:li>Each supported tag size,</h:li>
						<h:li>Four supported non-zero payload sizes, such that two are multiples of 128 bits
							and two are not multiples of 128 bits,</h:li>
						<h:li>Four supported non-zero associated data sizes, such that two are multiples of
							128 bits and two are not multiples of 128 bits, and</h:li>
						<h:li>An associated data size of zero, if supported.</h:li></h:ul><h:p/>
						Note that the IV size is always 96 bits.<h:p/>
						The evaluator shall compare the output from each test case against results generated by a known-
						good implementation with the same input parameters.<h:p/>
						<h:br/><h:b><h:i>Decryption Algorithm Functional Tests</h:i></h:b><h:p/>
						The evaluator shall test the authenticated decrypt functionality of AES-GCM by supplying 15
						test cases for the supported combinations of the parameters as described above. For each
						parameter combination the evaluator shall introduce an error into either the Ciphertext or the Tag
						such that approximately half of the cases are correct and half the cases contain errors.
					</Tests>
                </aactivity>
              </f-element>
          
            </f-component>
            

            <!-- FCS_CKM.5 Cryptographic Key Derivation -->
		<f-component id="sfr-fcs-ckm-5" cc-id="fcs_ckm.5" name="Cryptographic Key Derivation" status="sel-based">
		<depends on="sel-fcs-kyc-ext-1-1-sel-1"/>
			<f-element id="fcs-ckm-5e1">
				<title>
					The TSF shall derive cryptographic keys
					<selectables>
						<tabularize id="fcs-ckm-keydrv-sels" title="Allowed choices for FCS_CKM.5">
							<selectcol>Key type</selectcol>
							<reqtext>from</reqtext>
							<selectcol>Input parameters</selectcol>
							<reqtext>in accordance with a specified key derivation algorithm</reqtext>
							<selectcol>Key derivation algorithm</selectcol>
							<reqtext>and specified cryptographic key sizes</reqtext>
							<selectcol>Key sizes</selectcol>
							<reqtext>that meet the following:</reqtext>
							<selectcol>List of standards</selectcol>
							<reqtext><h:p/><h:p/>The following table provides the allowed choices for
										completion of the selection operations of FCS_CKM.5.</reqtext>
						</tabularize>

						<!-- KDF-CTR -->
						<selectable id="sel-fcs-ckm-5-kdf-ctr">
							<col>KDF-CTR</col>  <!-- formerly KeyDrv1 -->
							<col><selectables>
								<selectable id="sel-fcs-ckm-5-kdf-ctr-dirgen">Direct Generation from a Random
									Bit Generator as specified in FCS_RBG.1</selectable>
								<selectable>Concatenated keys</selectable>
							</selectables></col>
							<col>KPF2 - KDF in Counter Mode using <selectables>
								<selectable id="sel-fcs-ckm-5-kdf-ctr-cmac">AES-256-CMAC</selectable>
								<selectable id="sel-fcs-ckm-5-kdf-ctr-hmac256">HMAC-SHA-256</selectable>
								<selectable id="sel-fcs-ckm-5-kdf-ctr-hmac256">HMAC-SHA-384</selectable>
								<selectable id="sel-fcs-ckm-5-kdf-ctr-hmac512">HMAC-SHA-512</selectable>
							</selectables> as the PRF</col>
							<col><selectables>
								<selectable>256</selectable>
								<selectable>384</selectable>
								<selectable>512</selectable>
							</selectables> bits</col>
							<col><selectables>
								<selectable>ISO/IEC 11770-6:2016 (Subclause 7.3.2) [KPF2]</selectable>
								<selectable>NIST SP 800-108 Revision 1 Update 1 (Section 4.1) [KDF in Counter Mode]</selectable>
							</selectables></col>
						</selectable>

						<!-- KDF-FB -->
						<selectable id="sel-fcs-ckm-5-kdf-fb">
							<col>KDF-FB</col>  <!-- formerly KeyDrv2  -->
							<col><selectables>
								<selectable id="sel-fcs-ckm-5-kdf-fb-dirgen">Direct Generation from a Random Bit Generator as specified in FCS_RBG.1</selectable>
								<selectable>Concatenated keys</selectable>
							</selectables></col>
							<col>KPF3 - KDF in Feedback Mode using <selectables>
								<selectable id="sel-fcs-ckm-5-kdf-fb-cmac">AES-256-CMAC</selectable>
								<selectable id="sel-fcs-ckm-5-kdf-fb-hmac256">HMAC-SHA-256</selectable>
								<selectable id="sel-fcs-ckm-5-kdf-ctr-hmac256">HMAC-SHA-384</selectable>
								<selectable id="sel-fcs-ckm-5-kdf-fb-hmac512">HMAC-SHA-512</selectable>
							</selectables> as the PRF</col>
							<col><selectables>
								<selectable>256</selectable>
								<selectable>384</selectable>
								<selectable>512</selectable>
							</selectables> bits</col>
							<col><selectables>
								<selectable>ISO/IEC 11770-6:2016 (Subclause 7.3.3) [KPF3]</selectable>
								<selectable>NIST SP 800-108 Revision 1 Update 1 (Section 4.2) [KDF in Feedback Mode]</selectable>
							</selectables></col>
						</selectable>

						<!-- KDF-DPI -->
						<selectable id="sel-fcs-ckm-5-kdf-dpi">
							<col>KDF-DPI</col> <!-- formerly KeyDrv3  -->
								<col><selectables><selectable id="sel-fcs-ckm-5-kdf-dpi-dirgen">Direct Generation from a Random Bit Generator as specified in FCS_RBG.1</selectable>
								<selectable>Concatenated keys</selectable>
								</selectables></col>
							<col>KDF in Double Pipeline Iteration Mode using <selectables>
								<selectable id="sel-fcs-ckm-5-kdf-dpi-cmac">AES-256-CMAC</selectable>
								<selectable id="sel-fcs-ckm-5-kdf-dpi-hmac256">HMAC-SHA-256</selectable>
								<selectable id="sel-fcs-ckm-5-kdf-ctr-hmac256">HMAC-SHA-384</selectable>
								<selectable id="sel-fcs-ckm-5-kdf-dpi-hmac512">HMAC-SHA-512</selectable>
								</selectables> as the PRF</col>
							<col><selectables>
								<selectable>256</selectable>
								<selectable>384</selectable>
								<selectable>512</selectable>
								</selectables>bits</col>
							<col><selectables>
								<selectable>ISO/IEC 11770-6:2016 (Subclause 7.3.4) [KPF4]</selectable>
								<selectable>NIST SP 800-108 Revision 1 Update 1 (Section 4.3) [KDF in Double-Pipeline Iteration Mode]</selectable>
							</selectables></col>
						</selectable>
						

						<!-- KDF-HASH -->
						<selectable id="sel-fcs-ckm-5-kdf-hash">
							<col>KDF-HASH</col>  <!-- formerly KeyDrv7 -->
							<col>Shared secret</col>
							<col>Hash function <selectables> 
								<selectable>SHA-384</selectable>
								<selectable>SHA-512</selectable></selectables></col>
							<col><selectables>
								<selectable>256</selectable>
								<selectable>384</selectable>
								<selectable>512</selectable>
								</selectables> bits</col>
							<col>NIST SP 800-56C Revision 2 (Section 4.1, Option 1) [One-Step Key Derivation]</col>
						</selectable>

						<!-- KDF-MAC-1S -->
						<selectable id="sel-fcs-ckm-5-kdf-mac-1S">
							<col>KDF-MAC-1S</col>  <!-- formerly KeyDrv8 -->
							<col>Shared secret, salt, IV, output length, fixed information</col>
							<col>Keyed hash <selectables>
								<selectable>HMAC-SHA-256</selectable>
								<selectable>HMAC-SHA-384</selectable>
								<selectable>HMAC-SHA-512</selectable></selectables></col>
							<col><selectables>
								<selectable>256</selectable>
								<selectable>384</selectable>
								<selectable>512</selectable>
								</selectables> bits</col>
							<col>NIST SP 800-56C Revision 2 (Section 4.1, Options 2, 3) [One-Step Key Derivation]</col>
						</selectable>

						<!-- KDF-MAC-2S -->
						<selectable id="sel-fcs-ckm-5-kdf-mac-2S">
							<col>KDF-MAC-2S</col>  
							<col>Shared secret, salt, IV, output length, fixed information, and
								<selectables>
									<selectable>auxiliary shared secret</selectable>
									<selectable exclusive="yes">no other parameters</selectable>
								</selectables></col>
							<col>MAC Step <selectables>
								<selectable>HMAC-SHA-256</selectable>
								<selectable>HMAC-SHA-384</selectable>
								<selectable>HMAC-SHA-512</selectable></selectables>
								as randomness extraction and; KDF Step <selectables>
								<selectable>KDF-CTR</selectable>
								<selectable>KDF-FB</selectable>
								<selectable>KDF-DPI</selectable></selectables>.</col>
							<col><selectables>
								<selectable>256</selectable>
								<selectable>384</selectable>
								<selectable>512</selectable>
								</selectables> bits</col>
							<col>NIST SP 800-56C Revision 2 (Section 5) [Two-Step Key Derivation]</col>
						</selectable>

					</selectables>
				</title>
				<note role="application">
					If KDF-CTR, KDF-FB, or KDF-DPI is claimed, then either FCS_COP.1/CMAC or FCS_COP.1/KeyedHash
					must also be claimed, depending on the selection made for PRF.<h:p/>
					If KDF-Hash is claimed, then FCS_COP.1/Hash must also be claimed.<h:p/>
					If KDF-MAC-1S is claimed, then FCS_COP.1/KeyedHash must also be claimed.<h:p/>
					If KDF-MAC-2S is claimed, then both FCS_COP.1/KeyedHash and FCS_COP.1/CMAC must also be claimed.<h:p/>
					In KDF-MAC-2S, CMAC has been removed as a selection for the MAC step because it requires
					selection of 128 bits for the output key size, which is not supported in CNSA 1.0. If HMAC is
					selected in the MAC step, then the same HMAC is used as the KDF.<h:p/>
					The security strengths of the Pseudo-Random functions for the key derivation methods must be 
					sufficient for the security strength of the keys derived through those methods. Since CNSA 1.0
					permits keys no smaller than 256 bits, no 128- or 192-bit PRFs are permitted. 
				</note>
				<aactivity>
					<TSS>
						The evaluator shall verify the TSS includes a description of the key derivation function
						and shall verify the key derivation function uses an approved derivation mode and key expansion
						algorithm according to list of standards.
					</TSS>
					<Guidance>
						The evaluator shall verify that the Guidance instructs the administrator how to set any configurable
						parameters, such as context strings, salts, and IVs.<h:p/>
						The evaluator shall verify that the Guidance instructs the administrator how to configure the TOE to
						choose specific PRFs, modes, and parameters.
					</Guidance>	
					<KMD>
					The evaluator shall verify that the KMD describes and documents:<h:ul>
						<h:li>that the security strengths of the Pseudo-Random functions for the key 
							derivation methods are sufficient for the security strength of the keys derived through those
							methods.</h:li>
						<h:li>that the security strengths of the input parameters are sufficient for the security
							strength of the keys derived through these methods.</h:li>
						<h:li>that, if concatenated keys or intermediary keys are input parameters, the KMD describes
							the sources of the keys, and the order in which they are concatenated, along with any
							other values that are concatenated with them. This may occur in instances when input
							keying material for the KDF comes from two independent sources, for example, a client
							and a server.</h:li>
						<h:li>that, for KDF-MAC-1S, KDF-MAC-2S, and KDF-KMAC, the KMD documents that for
							each invocation of a KDF that reuses the same input shared secret or key, each invocation
							must use a distinct context string, IV, or salt. The KMD must also describe the composition
							and sizes of these input parameters. The evaluator must ensure that the context string, IV,
							and salt are generated in conformance with the relevant standards.</h:li>
						<h:li>that, if the TOE uses the derived key in a key chain/hierarchy, that KMD describes how the
							key is used as part of the key chain/hierarchy.</h:li>
						</h:ul>
					</KMD>	
					<Tests>
						The evaluator shall perform the following test or witness respective tests 
						executed by the developer. The tests must be executed on a platform that is as 
						close as practically possible to the operational platform (but which may be 
						instrumented in terms of, for example, use of a debug mode). Where the test is
						not carried out on the TOE itself, the test platform shall be identified and
						the differences between test environment and TOE execution environment shall be
						described.<h:p/>
						
						<!-- KDF in Counter Mode -->
						<h:br/><h:b>KDF in Counter Mode</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Key Type</h:td>
								<h:td valign="top">Input Parameters</h:td>
								<h:td valign="top">Key Derivation Algorithm</h:td>
								<h:td valign="top">Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">KDF-CTR</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> Direct Generation from a Random Bit Generator as 
									specified in FCS_RBG.1, Concatenated keys]</h:td>
								<h:td valign="top">KPF2 - KDF in Counter Mode using [<h:b>selection:</h:b> 
									AES-256-CMAC, HMAC-SHA-256, HMAC-SHA-384, HMAC-SHA-512] as the PRF</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> 256, 384, 512] bits</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> ISO/IEC 11770-6:2016
									(Subclause 7.3.2) [KPF2], NIST SP 800-108 Revision 1 Update 1 (Section 4.1) 
									[KDF in Counter Mode]]</h:td>
							</h:tr>
						</h:table><h:p/>						
						To test the TOE’s ability to derive cryptographic keys using KDF in Counter 
						Mode/KDF2, the evaluator shall perform the Counter KDF Algorithm Functional
						Test using the following input parameters:<h:ul>
						<h:li>Pseudo Random Function (PRF) [AES-256-CMAC, HMAC-SHA-256, HMAC-SHA-512]</h:li>
						<h:li>Derived key length [256, 512] bits</h:li>
						<h:li>Location of the counter [after fixed data, before fixed data, middle fixed data]</h:li>
						<h:li>Counter length [8, 16, 24, 32] bits</h:li></h:ul><h:p/>
						<h:br/><h:i><h:b>Counter KDF Algorithm Functional Test</h:b></h:i><h:br/>
						For each supported combination of the above input parameters the evaluator 
						shall require the implementation under test to derive two keys using random 
						data. The evaluator shall compare the resulting keys with keys generated using 
						a known-good implementation using the same input parameters.<h:p/>
						
						<!-- KDF in Feedback Mode -->
						<h:br/><h:b>KDF in Feedback Mode</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Key Type</h:td>
								<h:td valign="top">Input Parameters</h:td>
								<h:td valign="top">Key Derivation Algorithm</h:td>
								<h:td valign="top">Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">KDF-FB</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> Direct Generation from a Random Bit Generator as 
									specified in FCS_RBG.1, Concatenated keys]</h:td>
								<h:td valign="top">KPF3 - KDF in Feedback Mode using [<h:b>selection:</h:b> 
									AES-256-CMAC, HMAC-SHA-256, HMAC-SHA-384, HMAC-SHA-512] as the PRF</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> 256, 384, 512] bits</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> ISO/IEC 11770-6:2016
									(Subclause 7.3.3) [KPF3], NIST SP 800-108 Revision 1 Update 1 (Section 4.2) 
									[KDF in Feedback Mode]]</h:td>
							</h:tr>
						</h:table><h:p/>						
						To test the TOE’s ability to derive cryptographic keys using KDF in Feedback 
						Mode/KDF3, the evaluator shall perform the Feedback KDF Algorithm Functional
						Test using the following input parameters:<h:ul>
						<h:li>Pseudo Random Function (PRF) [AES-256-CMAC, HMAC-SHA-256, HMAC-SHA-512]</h:li>
						<h:li>Derived key length [256, 512] bits</h:li>
						<h:li>Location of the counter [none, after fixed data, before fixed data, before iterator]</h:li>
						<h:li>Counter length [0, 8, 16, 24, 32] bits</h:li></h:ul><h:p/>		
						<h:br/><h:i><h:b>Feedback KDF Algorithm Functional Test</h:b></h:i><h:br/>
						For each supported combination of the above input parameters the evaluator 
						shall require the implementation under test to derive two keys using random 
						data. The evaluator shall compare the resulting keys with keys generated using 
						a known-good implementation using the same input parameters.<h:p/>

						<!-- KDF in Double-Pipeline Iteration Mode -->
						<h:br/><h:b>KDF in Double-Pipeline Iteration Mode</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Key Type</h:td>
								<h:td valign="top">Input Parameters</h:td>
								<h:td valign="top">Key Derivation Algorithm</h:td>
								<h:td valign="top">Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">KDF-DPI</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> Direct Generation from a Random Bit Generator as 
									specified in FCS_RBG.1, Concatenated keys]</h:td>
								<h:td valign="top">KPF4 - KDF in Double-Pipeline Iteration Mode using [<h:b>selection:</h:b> 
									HMAC-SHA-256, HMAC-SHA-384, HMAC-SHA-512] as the PRF</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> 256, 384, 512] bits</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> ISO/IEC 11770-6:2016
									(Subclause 7.3.4) [KPF4], NIST SP 800-108 Revision 1 Update 1 (Section 4.3) 
									[KDF in Double-Pipeline Iteration Mode]]</h:td>
							</h:tr>
						</h:table><h:p/>						
						To test the TOE’s ability to derive cryptographic keys using KDF in Double Pipeline Iteration  
						Mode/KDF4, the evaluator shall perform the Double Pipeline Iteration KDF Algorithm Functional
						Test using the following input parameters:<h:ul>
						<h:li>Pseudo Random Function (PRF) [HMAC-SHA-256, HMAC-SHA-512]</h:li>
						<h:li>Derived key length [256, 512] bits</h:li>
						<h:li>Location of the counter [none, after fixed data, before fixed data, before iterator]</h:li>
						<h:li>Counter length [0, 8, 16, 24, 32] bits</h:li></h:ul><h:p/>
						<h:br/><h:i><h:b>Double Pipeline Iteration KDF Algorithm Functional Test</h:b></h:i><h:br/>
						For each supported combination of the above input parameters the evaluator 
						shall require the implementation under test to derive two keys using random 
						data. The evaluator shall compare the resulting keys with keys generated using 
						a known-good implementation using the same input parameters.<h:p/>

						

						<!-- KDF by Hashing a Shared Secret -->
						<h:br/><h:b>KDF by Hashing a Shared Secret</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Key Type</h:td>
								<h:td valign="top">Input Parameters</h:td>
								<h:td valign="top">Key Derivation Algorithm</h:td>
								<h:td valign="top">Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">KDF-HASH</h:td>
								<h:td valign="top">Shared secret</h:td>
								<h:td valign="top">Hash function [<h:b>selection:</h:b> SHA-384, SHA-512]</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> 256, 384, 512] bits</h:td>
								<h:td valign="top">NIST SP 800-56C Revision 2 (Section 4.1, Option 1) 
									[One-Step Key Derivation]</h:td>
							</h:tr>
						</h:table><h:p/>						
						To test the TOE’s ability to derive cryptographic keys by hashing a shared 
						secret (a.k.a. One-Step HASH-based Key Derivation), the evaluator shall perform 
						the Algorithm Functional Test using the following input
						parameters:<h:ul>
						<h:li>Auxiliary Function [SHA-384, SHA-512]</h:li>
						<h:li>Derived key length [256, 384, 512] bits</h:li></h:ul><h:p/>
						<h:br/><h:i><h:b>Algorithm Functional Test</h:b></h:i><h:br/>
						For each supported fixed information pattern and combination of the above input
						parameters the evaluator shall require the implementation under test to derive
						15 keys using random data for a shared secret that is the same size as the 
						derived key. The evaluator shall compare the resulting keys with keys derived
						using a known-good implementation using the same fixed information patterns and
						input parameters.<h:p/>

						<!-- One-Step MAC-based KDF -->
						<h:br/><h:b>One-Step MAC-based KDF</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Key Type</h:td>
								<h:td valign="top">Input Parameters</h:td>
								<h:td valign="top">Key Derivation Algorithm</h:td>
								<h:td valign="top">Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">KDF-MAC-1S</h:td>
								<h:td valign="top">Shared secret, salt, output length, fixed information</h:td>
								<h:td valign="top">Keyed Hash function [<h:b>selection:</h:b> HMAC-SHA-256, HMAC-SHA-384, HMAC-SHA-512]</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> 256, 384, 512] bits</h:td>
								<h:td valign="top">NIST SP 800-56C Revision 2 (Section 4.1, Options 2, 3) 
									[One-Step Key Derivation]</h:td>
							</h:tr>
						</h:table><h:p/>			
						To test the TOE’s ability to derive cryptographic keys using One-Step
						MAC-based Key Derivation, the evaluator shall perform the Algorithm Functional
						Test using the following input parameters:<h:ul>
						<h:li>Auxiliary Function [HMAC-SHA-256, HMAC-SHA-384, HMAC-SHA-512]</h:li>
						<h:li>Salt [0s, random]</h:li>
						<h:li>Derived key length [256, 384, 512] bits</h:li>
						<h:li>Fixed information pattern </h:li></h:ul><h:p/>		
						<h:br/><h:i><h:b>Algorithm Functional Test</h:b></h:i><h:br/>
						For each supported fixed information pattern and combination of the above input
						parameters the evaluator shall require the implementation under test to derive
						15 keys using random data for a shared secret. The evaluator shall compare 
						the resulting keys with keys derived using a known-good implementation using the 
						same fixed information patterns and input parameters.<h:p/>

						<!-- Two-Step MAC-based KDF -->
						<h:br/><h:b>Two-Step MAC-based KDF</h:b><h:p/>
						<h:table border="1">
							<h:tr class="header" bgcolor="#cccccc">
								<h:td valign="top">Key Type</h:td>
								<h:td valign="top">Input Parameters</h:td>
								<h:td valign="top">Key Derivation Algorithm</h:td>
								<h:td valign="top">Key Sizes</h:td>
								<h:td valign="top">List of Standards</h:td>
							</h:tr>
							<h:tr>
								<h:td valign="top">KDF-MAC-2S</h:td>
								<h:td valign="top">Shared secret, salt, IV, output length, 
									fixed information, and [<h:b>selection:</h:b> auxiliary shared secret, 
									no other parameters]</h:td>
								<h:td valign="top">MAC Step [<h:b>selection:</h:b> 
									HMAC-SHA-256, HMAC-SHA-384, HMAC-SHA-512] as randomness extraction and; 
									KDF Step [<h:b>selection:</h:b> 
									KDF-CTR, KDF-FB, KDF-DPI]</h:td>
								<h:td valign="top">[<h:b>selection:</h:b> 256, 384, 512] bits</h:td>
								<h:td valign="top">NIST SP 800-56C Revision 2 (Section 5) [Two-Step Key Derivation]</h:td>
							</h:tr>
						</h:table><h:p/>			
						To test the TOE’s ability to derive cryptographic keys using Two-Step MAC-based Key Derivation,
						the evaluator shall perform the Algorithm Functional Test using the following input
						parameters:<h:ul>
						<h:li>MAC mode [HMAC-SHA-256; HMAC-SHA-384, HMAC-SHA-512]</h:li>
						<h:li>KDF Mode [Counter, feedback, Double Pipeline Iteration]</h:li>
						<h:li>Salt [0s, random]</h:li>
						<h:li>Length of shared secret [224-65535]</h:li>
						<h:li>Length of Auxiliary Shared Secret [0, 112-65535]</h:li>
						<h:li>Derived key length [256, 384, 512] bits</h:li>
						<h:li>Fixed information pattern </h:li>
						<h:li>Counter location [none, before fixed data, after fixed data, before iterator]</h:li>
						<h:li>Counter length [0, 8, 16, 24, 32]</h:li></h:ul><h:p/>		
						<h:br/><h:i><h:b>Algorithm Functional Test</h:b></h:i><h:br/>
						The evaluator shall define a test group for each supported combination of KDF mode, MAC
						mode, fixed information pattern, derived key length, counter location, counter length, salt
						method, and five random pairs of shared secrets &amp; auxiliary secrets (if supported) such that
						collectively the minimum length, maximum length and three random lengths of each are
						included in each test group. For each test group, the evaluator shall require the implementation
						under test to derive 25 keys using random data for a shared secret, either a random salt or a salt
						of all 0s, and, if supported, an auxiliary shared secret consisting of random data. The evaluator
						shall compare the resulting keys with keys derived using a known-good implementation using
						the same input parameters.
					</Tests>
				</aactivity>
			</f-element>
			<audit-event/>
		</f-component>
            
        
            <f-component cc-id="fcs_kyc_ext.1" name="Key Chaining (Initiator)" id="fcs-kyc-ext-1">
              <consistency-rationale/>
              <comp-lev>requires the TSF to maintain a key chain for a BEV that is provided to a component external to the TOE.</comp-lev>
              <management/>
              <audit/>
              <dependencies>
                FCS_CKM.1 Cryptographic Key Generation
                </dependencies>
              <f-element id="fcs-kyc-ext-1-1">
                <title>
                  The TSF shall maintain a key chain of: 
                    <selectables linebreak="yes">
                      <selectable>one, using a submask as the BEV;</selectable>
                      <selectable>intermediate keys originating from one or more submasks to the BEV using the following methods:
                        <selectables linebreak="yes">
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-1">key encryption as specified in FCS_COP.1/KeyEnc</selectable>
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-2">key transport as specified in FCS_COP.1/KeyEncap</selectable>
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-3">key wrapping as specified in FCS_COP.1/KeyWrap</selectable>
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-4">key derivation as specified in FCS_CKM.5.1</selectable>                          
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-5">key combining as specified in FCS_SMC_EXT.1</selectable>
                          
                          
                      </selectables></selectable></selectables>
                  while maintaining an effective strength of [<h:i>256 bits</h:i>] for symmetric keys and an effective strength of 
                      <selectables>
                      <selectable>not applicable</selectable>
                      <selectable>128 bits</selectable>
                      <selectable>192 bits</selectable>
                      <selectable>256 bits</selectable>
                  </selectables> for asymmetric keys.
                </title>
                
                <ext-comp-def-title>
                  <title>The TSF shall maintain a key chain of: 
                    <selectables linebreak="yes">
                      <selectable>one, using a submask as the BEV;</selectable>
                      <selectable>intermediate keys originating from one or more submasks to the BEV using the following methods:
                        <selectables linebreak="yes">
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-1">key encryption as specified in FCS_COP.1</selectable>
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-2">key transport as specified in FCS_COP.1</selectable>
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-3">key wrapping as specified in FCS_COP.1</selectable>
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-4">key derivation as specified in FCS_CKM.5.1</selectable>                          
                          <selectable id="sel-fcs-kyc-ext-1-1-sel-5">key combining as specified in FCS_SMC_EXT.1</selectable>
                          
                          
                        </selectables></selectable></selectables>
                     while maintaining an effective strength of [<h:i>256 bits</h:i>] for symmetric keys and an effective strength of 
                      <selectables>
                      <selectable>not applicable</selectable>
                      <selectable>128 bits</selectable>
                      <selectable>192 bits</selectable>
                      <selectable>256 bits</selectable>
                  </selectables> for asymmetric keys.</title>
                </ext-comp-def-title>                                  
              </f-element>
              
              <f-element id="fcs-kyc-ext-1-2">
                <title>
                  The TSF shall provide at least a [<h:i>256 bit</h:i>] BEV to <assignable>one or more external entities</assignable>
                    <selectables linebreak='yes'>
                      <selectable id="fcs-kyc-ext-1-2-sel-2a">after the TSF has successfully performed the validation process as specified in FCS_VAL_EXT.1.</selectable>
                      <selectable id="fcs-kyc-ext-1-2-sel-2b">without validation taking place.</selectable>
                  </selectables> 
                </title>
                <note role="application">
                  Key Chaining is the method of using multiple layers of encryption keys to ultimately secure the BEV. The number of intermediate keys will vary – from one 
                  (e.g., taking the conditioned password authorization factor and directly using it as the BEV) to many. This applies to all keys that contribute to the 
                  ultimate wrapping or derivation of the BEV; including those in areas of protected storage (e.g. TPM stored keys, comparison values).<h:br/><h:br/>
                  
                  Multiple key chains to the BEV are allowed, as long as all chains meet the key chain requirement.<h:br/><h:br/>
                  
                  The BEV is considered to be equivalent to keying material and therefore additional checksums or similar values are not the BEV, even if they are sent with
                  the BEV.<h:br/><h:br/> 
                
                  Once the ST author has selected a method to create the chain (either by deriving keys or unwrapping them or encrypting keys or using RSA Key Transport), they
                  pull the appropriate requirement out of Appendix B. It is allowable for an implementation to use any or all methods.<h:br/><h:br/>
                  
                  For FCS_KYC_EXT.1.2, the validation process is defined in FCS_VAL_EXT.1, Appendix B. If that selection is made by the ST author, then FCS_VAL_EXT.1 is included
                  in the body of the ST.
                  
                  The method the TOE uses to chain keys and manage/protect them is described in the Key Management Description; see Appendix E for more information.<h:br/><h:br/>
                
                  The TOE’s use of key encryption, key encapsulation, key wrapping, key derivation, or submask combining determines whether the selection-based requirements 
                  FCS_COP.1/KeyEnc, FCS_COP.1/KeyEncap, FCS_COP.1/KeyWrap, FCS_CKM.5.1, and FCS_SMC_EXT.1 are claimed. Additionally, the TOE’s use of key encryption or key
                  wrapping for key chaining requires FCS_CKM.1/SKG and FCS_RBG.1 (for key generation) and FCS_COP.1/SKC (for symmetric encryption) to be claimed.
                  
                </note>
                  <aactivity >
                      <TSS>The evaluator shall verify the TSS contains a high-level description of the BEV sizes– that it supports BEV outputs of no fewer than 256.</TSS>
                      <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                      <CustomEA name="KMD">
                        <h:p>The evaluator shall examine the KMD describes a high level description of the key hierarchy for all authorizations methods selected in FCS_AFA_EXT.1 that are used to protect the BEV. The evaluator shall examine the KMD to ensure it describes the key chain in detail. The description of the key chain shall be reviewed to ensure it maintains a chain of keys using key wrap or key derivation methods that meet FCS_COP.1/KeyWrap and FCS_CKM.5.1.</h:p>
                        <h:p>The evaluator shall examine the KMD to ensure that it describes how the key chain
                          process functions, such that it does not expose any material that might compromise any
                          key in the chain. (e.g. using a key directly as a compare value against a TPM) This
                          description must include a diagram illustrating the key hierarchy implemented and
                          detail where all keys and keying material is stored or what it is derived from. The
                          evaluator shall examine the key hierarchy to ensure that at no point the chain could be
                          broken without a cryptographic exhaust or the initial authorization value and the
                          effective strength of the BEV is maintained throughout the key chain.</h:p>
                        <h:p>The evaluator shall verify the KMD includes a description of the strength of keys
                          throughout the key chain.</h:p></CustomEA>                       
                      <Tests>There are no test evaluation activities for this SFR.</Tests>
                  </aactivity>
              </f-element>
          
            </f-component>
        
        <f-component cc-id="fcs_kyc_ext.2" name="Key Chaining (Recipient) " id="fcs-kyc-ext-2" status="invisible">
          <consistency-rationale/>
          <comp-lev>requires the TSF to be able to accept a BEV that is then chained to a DEK used
            by the TSF through some method. <h:br/><h:br/>
            Note that this cPP does not include FCS_KYC_EXT.2; it is only included here to provide a complete definition of the FCS_KYC_EXT family.</comp-lev>
          <management/>
          <audit/>
          <dependencies>No dependencies</dependencies>
          <f-element id="fcs-kyc-ext-2-1">
            <title>The TSF shall accept a BEV of at least <selectables><selectable>128 bits</selectable><selectable>256 bits</selectable></selectables> from <assignable>one or more external entities</assignable>.</title>
            
          </f-element>
          <f-element id="fcs-kyc-ext-2-2">
            <title>
              The TSF shall maintain a chain of intermediary keys originating from the BEV to the DEK using the following methods: <selectables linebreak="yes">
                <selectable>asymmetric key generation as specified in FCS_CKM.1<h:b>/AKG</h:b></selectable>
                <selectable id="fcs-kyc-ext-2-2-sel-2">symmetric key generation as specified in FCS_CKM.1<h:b>/SKG</h:b></selectable>
                <selectable>key derivation as specified in FCS_CKM.5.1</selectable>
                <selectable>key wrapping as specified in FCS_COP.1<h:b>/KeyWrap</h:b></selectable>
                <selectable>key transport as specified in FCS_COP.1<h:b>/KeyEncap</h:b></selectable>
                <selectable>key encryption as specified in FCS_COP.1<h:b>/KeyEnc</h:b></selectable>
              </selectables> while maintaining an effective strength of <selectables>
                <selectable>128 bits</selectable>
                <selectable>256 bits</selectable>
              </selectables>
              while maintaining an effective strength of <selectables><selectable>128 bits</selectable>
                <selectable>256 bits</selectable></selectables> for symmetric keys and an effective strength of <selectables><selectable>not applicable</selectable><selectable>112 bits</selectable><selectable>128 bits</selectable><selectable>192 bits</selectable><selectable>256 bits</selectable></selectables> for asymmetric keys.
            </title>
            
            <ext-comp-def-title>
              <title>
                The TSF shall maintain a chain of intermediary keys originating from the BEV to the DEK using the following methods: <selectables linebreak="yes">
                  <selectable>asymmetric key generation as specified in FCS_CKM.1</selectable>
                  <selectable id="fcs-kyc-ext-2-2-sel-2">symmetric key generation as specified in FCS_CKM.1</selectable>
                  <selectable>key derivation as specified in FCS_CKM.5.1</selectable>
                  <selectable>key wrapping as specified in FCS_COP.1</selectable>
                  <selectable>key transport as specified in FCS_COP.1</selectable>
                  <selectable>key encryption as specified in FCS_COP.1</selectable>
                </selectables> while maintaining an effective strength of <selectables>
                  <selectable>128 bits</selectable>
                  <selectable>256 bits</selectable>
                </selectables>
                while maintaining an effective strength of <selectables><selectable>128 bits</selectable>
                  <selectable>256 bits</selectable></selectables> for symmetric keys and an effective strength of <selectables><selectable>not applicable</selectable><selectable>112 bits</selectable><selectable>128 bits</selectable><selectable>192 bits</selectable><selectable>256 bits</selectable></selectables> for asymmetric keys.
              </title>
            </ext-comp-def-title>
            <note role="application">Key Chaining is the method of using multiple layers of encryption keys to ultimately secure the protected data encrypted on the drive. The number of intermediate keys will vary – from one (e.g., using the BEV as a key encrypting key (KEK)) to many. This applies to all keys that contribute to the ultimate wrapping or derivation of the DEK; including those in areas of protected storage (e.g. TPM stored keys, comparison values). </note>
            <aactivity><no-tests/></aactivity>
          </f-element>
          
        </f-component>

            <f-component cc-id="fcs_pcc_ext.1" name="Cryptographic Password Construction and Conditioning" id="fcs-pcc-ext-1" status="sel-based">
              <depends on-sel="submask-derived"/>
              <consistency-rationale/>
            <comp-lev> requires the TSF to accept passwords of a certain composition and condition them appropriately. </comp-lev>
            <management/>
            <audit/>
            <dependencies>FCS_COP.1 Cryptographic Operation</dependencies>
              <f-element id="fcs-pcc-ext-1-1">
                <title>The TSF shall be capable of accepting a password of at least
                  <assignable>64 or more</assignable> characters in the set of {upper case characters, lower case characters, numbers, and <assignable>other supported special characters</assignable>} and shall perform Password-based Key Derivation Functions in accordance with a specified cryptographic algorithm HMAC-<selectables><selectable>SHA-256</selectable><selectable>SHA384</selectable><selectable>SHA-512</selectable></selectables>, with 
                  <selectables>
                    <selectable id="fcs-pcc-ext-1-2-sel-1"><assignable>10000 or more</assignable> iterations</selectable>
                    <selectable id="fcs-pcc-ext-1-2-sel-2"><assignable>1 or more</assignable>iterations and
                      <assignable>10000 or more</assignable> subsequent rounds
                      of AES operations with a device key and PBKDF2 output per FCS_COP.1<h:b>/KeyEnc</h:b> or
                      FCS_COP.1<h:b>/KeyEncap</h:b></selectable>
                  </selectables> and output cryptographic key sizes 
                  <selectables>
                    <selectable>128 bits</selectable>
                    <selectable>256 bits</selectable>
                  </selectables> that meet the following: [<h:i>NIST SP 800-132</h:i>].
                </title>
                
                <ext-comp-def-title>
                  <title>The TSF shall be capable of accepting a password of at least <assignable>64 or more</assignable> characters in the set of {upper case characters, lower case characters, numbers, and <assignable> other supported special characters</assignable>} and shall perform Password-based Key Derivation Functions in accordance with a specified cryptographic algorithm HMAC-<selectables><selectable>SHA-256</selectable><selectable>SHA384</selectable><selectable>SHA-512</selectable></selectables>, with 
                    <selectables>
                      <selectable><assignable>10000 or more</assignable> iterations</selectable>
                      <selectable><assignable>1 or more</assignable> iterations and <assignable>10000 or more</assignable> subsequent rounds of AES operations with a device key and PBKDF2 output per FCS_COP.1 or FCS_COP.1</selectable>
                    </selectables> and output cryptographic key sizes 
                    <selectables>
                      <selectable>128 bits</selectable>
                      <selectable>256 bits</selectable>
                    </selectables> that meet the following: <assignable>PBKDF recommendation or
                      specification</assignable>.</title>
                </ext-comp-def-title>
                
                <note role="application">
                  The password is represented on the host machine as a sequence of characters whose encoding depends on the TOE and the 
                  underlying OS. This sequence must be conditioned into a string of bits that forms the submask to be used as input into
                  the key chain. Conditioning can be performed using one of the identified hash functions or the process described in 
                  NIST SP 800-132; the method used is selected by the ST author. If 800-132 conditioning is specified, then the ST 
                  author fills in the number of iterations that are performed. 800-132 also requires the use of a pseudo-random 
                  function (PRF) consisting of HMAC with an approved hash function. The ST author selects the hash function used which 
                  also includes the appropriate requirements for HMAC.<h:br/><h:br/>
                
                  This SFR is claimed when password conditioning is used to derive a submask from a password authentication factor, 
                  as defined in FCS_AFA_EXT.1.1.          
                </note>
                  <aactivity>
                    <TSS>The evaluator shall ensure the TSS describes the manner in which the TOE enforces
                      the construction of passwords, including the length, and requirements on characters
                      (number and type). The evaluator also verifies that the TSS provides a description of
                      how the password is conditioned and the evaluator ensures it satisfies the requirement.</TSS>
                    <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                    <CustomEA name="KMD"><h:p>The evaluator shall examine the KMD to ensure that the formation of the BEV and
                      intermediary keys is described and that the key sizes match that selected by the ST
                      author.</h:p><h:p>The evaluator shall check that the KMD describes the method by which the
                        passwords and passphrase is first encoded and then fed to the SHA algorithm. The settings
                        for the algorithm (padding, blocking, etc.) shall be described, and the evaluator shall
                        verify that these are supported by the selections in this component as well as the
                        selections concerning the hash function itself. The evaluator shall verify that the KMD
                        contains a description of how the output of the hash function is used to form the
                        submask that will be input into the function and is the same length as the BEV as
                        specified above.</h:p></CustomEA>
                    <Tests>
                      <h:p>The evaluator shall also perform the following tests:</h:p>
                      <testlist>
                        <test>Ensure that the TOE supports passwords/passphrases of a minimum
                          length of 64 characters.</test>
                        <test>If the TOE supports a passwords and passphrase length up to a maximum
                          number of characters, n (which would be greater than 64), then ensure that the
                          TOE will not accept more than n characters.</test>
                        <test>Ensure that the TOE supports passwords consisting of all characters
                          assigned and supported by the ST author.</test>
                      </testlist></Tests>
                  </aactivity>
              </f-element>
          
            </f-component>
        
            <f-component cc-id="fcs_rbg.1" name="Cryptographic Operation (Random Bit Generation)"
              id="fcs-rbg-1" status="sel-based">
              <depends on-sel="sel-fcs-afa-ext-1-1-sel-1b"/>
              <depends on-sel="sel-fcs-afa-ext-1-1-sel-6a"/>
              <depends on-sel="sel-fcs-kdf-ext-1-1-sel-1a"/>
              <depends on-sel="sel-fcs-kyc-ext-1-1-sel-1"/>
              <depends on-sel="sel-fcs-kyc-ext-1-1-sel-3"/>
              <depends on-sel="fcs-otv-sel-drbg"/>
              
              <f-element id="fcs-rbg-1-1">
                <title>
                  The TSF shall perform deterministic random bit generation services using
                  <selectables>
                    <selectable><h:i>Hash_DRBG (SHA-256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512)</h:i></selectable>
                    <selectable><h:i>HMAC_DRBG (SHA-256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512)</h:i></selectable>
                    <selectable><h:i>CTR_DRBG (AES-128, AES-192, AES-256)</h:i></selectable>
                  </selectables> in accordance with <selectables>
                    <selectable><h:i>ISO/IEC 18031:2011</h:i></selectable>
                    <selectable id='fcs-rbg-1-1-nist'><h:i>NIST SP 800-90A</h:i></selectable>
                  </selectables> after initialization with a seed.
                </title> 
                <note role="application">
                  <h:p>
                    For Hash_DRBG and HMAC_DRBG, all allowed choices support a 256-bit security strength. For CTR_DRBG, the supported security strength is equal to the AES size. The TOE is expected to use a DRBG function that can support the security strength of the keys and random values to be generated. For example, an AES-192 CTR_DRBG can be used to generate 128-bit and 192-bit symmetric keys, but can not be used to generate 256-bit symmetric keys. More information is provided in Section 8.4 of NIST SP 800-90A.
                  </h:p>
                </note>
                
                <aactivity level="element">
                  <TSS>The evaluator shall verify that the TSS identifies the DRBGs used by the TOE.</TSS>
                  <Guidance>If the DRBG functionality is configurable, the evaluator shall verify that the operational guidance includes instructions on how to configure this behavior.</Guidance>
                  <Tests>
                    <h:p>
                      The evaluator shall perform the following tests:
                    </h:p><h:p>
                      The evaluator shall perform 15 trials for the DRBG implementation. If the DRBG
                      is configurable, the evaluator shall perform 15 trials for each configuration. The
                      evaluator shall also confirm that the operational guidance contains appropriate
                      instructions for configuring the DRBG functionality.
                    </h:p><h:p>
                      If the DRBG has  prediction resistance enabled, each trial consists of (1) instantiate DRBG, (2)
                      generate the first block of random bits (3) generate a second block of random bits
                      (4) uninstantiate. The evaluator verifies that the second block of random bits is
                      the expected value. The evaluator shall generate eight input values for each
                      trial. The first is a count (0 – 14). The next three are entropy input, nonce, and
                      personalization string for the instantiate operation. The next two are additional
                      input and entropy input for the first call to generate. The final two are
                      additional input and entropy input for the second call to generate. These values
                      are randomly generated. "generate one block of random bits" means to generate
                      random bits with number of returned bits equal to the Output Block Length (as
                      defined in NIST SP 800-90A).
                    </h:p><h:p>
                      If the DRBG does not have prediction resistance,
                      each trial consists of (1) instantiate DRBG, (2) generate the first block of
                      random bits (3) reseed, (4) generate a second block of random bits (5)
                      uninstantiate. The evaluator verifies that the second block of random bits is the
                      expected value. The evaluator shall generate eight input values for each trial.
                      The first is a count (0 – 14). The next three are entropy input, nonce, and
                      personalization string for the instantiate operation. The fifth value is
                      additional input to the first call to generate. The sixth and seventh are
                      additional input and entropy input to the call to reseed. The final value is
                      additional input to the second generate call.
                    </h:p><h:p>
                      The following list contains more information on some of the input values to be generated/selected by the evaluator.
                      <h:ul>
                        <h:li> <h:b>Entropy input:</h:b> The length of the entropy input value must equal the seed
                          length.</h:li>                        
                        <h:li><h:b>Nonce:</h:b> If a nonce is supported (CTR_DRBG with no Derivation Function does
                          not use a nonce), the nonce bit length is one-half the seed length. </h:li>
                        <h:li><h:b>Personalization string:</h:b> The length of the personalization string must be
                          less than or equal to seed length. If the implementation only supports one
                          personalization string length, then the same length can be used for both values.
                          If more than one string length is support, the evaluator shall use personalization
                          strings of two different lengths. If the implementation does not use a
                          personalization string, no value needs to be supplied. </h:li>
                        <h:li><h:b>Additional input:</h:b> The additional input bit lengths have the same defaults
                          and restrictions as the personalization string lengths.</h:li>
                      </h:ul>
                    </h:p>
                  </Tests>
                </aactivity>  
              </f-element>
              
              <f-element id="fcs-rbg-1-2">
                <title>
                  The TSF shall use a <selectables>
                    <selectable id="internal-seed">TSF noise source <assignable>name of noise source</assignable></selectable>
                    <selectable id="internal-seeds"><h:b>multiple TSF noise sources <assignable>names of noise sources</assignable></h:b></selectable>
                    <selectable id="external-seed">TSF interface for seeding</selectable>
                  </selectables>
                  for initialized seeding.
                </title>
                <note role="application">
                  <h:p>
                    For the 
                    selection in this requirement, the ST author selects "TSF noise source" if
                    a single noise source is used as input to the DRBG. The ST author selects "multiple TSF noise sources" if a seed is formed from a combination of two or more noise sources within the TOE boundary. If the TSF implements two or more separate DRBGs that are seeded in separate manners, this SFR should be iterated for each DRBG. It multiple distinct noise sources exist such that each DRBG only uses one of them, then each iteration would select "TSF noise source"; "multiple TSF noise sources" is only selected if a single DRBG uses multiple noise sources for its seed. The ST author selects "TSF interface for seeding" if noise source data is generated outside the TOE boundary.
                  </h:p>
                  <h:p>
                    If "TSF noise source" is selected, FCS_RBG.3 must be claimed.
                  </h:p>
                  <h:p>
                    If "multiple TSF noise sources" is selected, FCS_RBG.4 and FCS_RBG.5 must be claimed. 
                  </h:p>
                  <h:p>
                    If "TSF interface for seeding" is selected, FCS_RBG.2 must be claimed. 
                  </h:p>
                </note>
                <aactivity level="element">
                  <h:p>
                    Documentation will be produced - and the evaluator shall perform the
                    activities - in accordance with Appendix D, "Entropy Documentation and
                    Assessment" and the <h:a href="https://niap-ccevs.org/Documents_and_Guidance/ccevs/Entropy%20Documentation%20and%20Assessment%20Clarification.pdf">,
                      Clarification to the Entropy Documentation and Assessment Annex</h:a>.
                  </h:p>
                  <TSS/>
                  <Guidance/>
                  <Tests/>
                  
                </aactivity>
              </f-element>
              
              <f-element id="fcs-rbg-1-3">
                <title>
                  The TSF shall update the RBG state by <selectables>
                    <selectable>reseeding</selectable>
                    <selectable>uninstantiating and reinstantiating</selectable>
                  </selectables> using a <selectables>
                    <selectable>TSF noise source <assignable>name of noise source</assignable></selectable>
                    <selectable>TSF interface for seeding</selectable></selectables>
                  in the following situations: <selectables linebreak="yes">
                    <selectable>never</selectable>
                    <selectable>on demand</selectable>
                    <selectable>on the condition: <assignable>condition</assignable></selectable>
                    <selectable>after <assignable>time</assignable></selectable>
                  </selectables>
                  in accordance with <assignable>list of standards</assignable>.
                </title>
                <note role="application">
                  This SFR is claimed when the TSF requires the use of random bit generation for submask generation (FCS_AFA_EXT.1,
                  FCS_CKM.5.1) or salt generation (FCS_OTV_EXT.1).
                </note>
                <aactivity level="element">              
                  <TSS>
                    The evaluator shall verify that the TSS identifies how the DRBG state is updated, and the situations under which this may occur.
                  </TSS>
                  <Guidance>If the ST claims that the DRBG state can be updated on demand, the evaluator shall verify that the operational guidance has instructions for how to perform this operation.</Guidance>
                  <Tests/>
                </aactivity>
              </f-element>
                        
            </f-component>
        
        <f-component cc-id="fcs_rbg.2" name="Random Bit Generation (External Seeding)"  status="sel-based">
              <depends on-sel="external-seed"></depends>
              <f-element id="fcs-rbg-2-1">
                <title>
                  The TSF shall be able to accept a minimum input of <assignable>minimum input length greater than zero</assignable> from a TSF interface for the purpose of seeding.
                </title>
                <note role="application">
                  This requirement is claimed when a DRBG is seeded with entropy from one or more noise source that is outside the TOE
                  boundary. Typically the entropy produced by an environmental noise source is conditioned such that the input length has
                  full entropy and is therefore  usable as the seed. However, if this is not the case, it should be noted what the minimum
                  entropy rate of the noise source is so that the TSF can collect a sufficiently large sample of noise data to be
                  conditioned into a seed value.
                </note>
                <aactivity>
                  <h:p>
                    The evaluator shall examine the entropy documentation required by FCS_RBG.1.2 to verify that it identifies, for each DRBG function implemented by the TOE, the TSF external interface used to seed the TOE's DRBG. The evaluator shall verify that this includes the amount of sampled data and the min-entropy rate of the sampled data such that it can be determined that sufficient entropy can be made available for the highest strength keys that the TSF can generate (e.g., 256 bits). If the seed data cannot be assumed to have full entropy (e.g., the min-entropy of the sampled bits is less than 1), the evaluator shall ensure that the entropy documentation describes the method by which the TOE estimates the amount of entropy that has been accumulated to ensure that sufficient data is collected and any conditioning that the TSF applies to the output data to create a seed of sufficient size with full entropy.
                  </h:p>
                  <TSS/>
                  <Guidance/>
                  <Tests/>
                </aactivity>
              </f-element>
                        
            </f-component>
        
        <f-component cc-id="fcs_rbg.3" name="Random Bit Generation (Internal Seeding - Single Source)" status="sel-based">
          <depends on-sel="internal-seed"/>    
          <f-element id="fcs-rbg-3-1">
                <title>
                  The TSF shall be able to seed the RBG using a <selectables choose-one-of="yes">
                    <selectable>TSF software-based noise source</selectable>
                    <selectable>TSF hardware-based noise source</selectable>
                  </selectables> <assignable>name of noise source</assignable> with a minimum of <assignable>number of bits</assignable> bits of min-entropy.
                </title>
                <note role="application">This requirement is claimed when a DRBG is seeded with entropy from a single noise source that is within the TOE boundary. Min-entropy should be expressed as a ratio of entropy bits to sampled bits so that the total amount of data needed to ensure full entropy is known, as well as the conditioning function by which that data is reduced in size to the seed.</note>
                
                <aactivity>
                  <h:p>
                    The evaluator shall examine the entropy documentation required by FCS_RBG.1.2 to verify that it identifies, for each DRBG function implemented by the TOE, the TSF noise source used to seed the TOE's DRBG. The evaluator shall verify that this includes the amount of sampled data and the min-entropy rate of the sampled data such that it can be determined that sufficient entropy can be made available for the highest strength keys that the TSF can generate (e.g., 256 bits). If the seed data cannot be assumed to have full entropy (e.g., the min-entropy of the sampled bits is less than 1), the evaluator shall ensure that the entropy documentation describes the method by which the TOE estimates the amount of entropy that has been accumulated to ensure that sufficient data is collected and any conditioning that the TSF applies to the output data to create a seed of sufficient size with full entropy.
                  </h:p>
                  <TSS/>
                  <Guidance/>
                  <Tests/>
                </aactivity>                  
              </f-element>
          
            </f-component>
        
        <f-component cc-id="fcs_rbg.4" name="Random Bit Generation (Internal Seeding - Multiple Sources)" status="sel-based">
          <depends on-sel="internal-seeds"/>    
          <f-element id="fcs-rbg-4-1">
                <title>
                  The TSF shall be able to seed the RBG using <selectables><selectable><assignable>number</assignable> TSF software-based noise sources</selectable><selectable><assignable> number</assignable> TSF hardware-based noise sources</selectable></selectables>.
                </title>
                <note role="application">
                  This requirement is claimed when a DRBG is seeded with entropy from multiple noise sources that are within the TOE boundary. 
                  FCS_RBG.5 defines the mechanism by which these sources are combined to ensure sufficient minimum entropy.
                </note>
                <aactivity>
                  <h:p>
                    The evaluator shall examine the entropy documentation required by FCS_RBG.1.2 to verify that it identifies, for each DRBG function implemented by the TOE, each TSF noise source used to seed the TOE's DRBG. The evaluator shall verify that this includes the amount of sampled data and the min-entropy rate of the sampled data from each data source.
                  </h:p>
                  <TSS/>
                  <Guidance/>
                  <Tests/>
                </aactivity>
              </f-element>
         
            </f-component>
        
        <f-component cc-id="fcs_rbg.5" name="Random Bit Generation (Combining Noise Sources)" status="sel-based">
          <depends on-sel="internal-seeds"/>    
          <f-element id="fcs-rbg-5-1">
                <title>
                  The TSF shall <assignable> combining operation</assignable> <selectables><selectable>output from TSF noise sources</selectable><selectable> input from TSF interfaces for seeding)</selectable></selectables> to create the entropy input into the derivation function as defined in <assignable> list of standards</assignable>, resulting in a minimum of <assignable> number of bits</assignable> bits of min-entropy.

                </title>
                <note role="application">
                  Examples of typical combining operations include, but are not limited to, XORing or hashing.
                </note>
                <aactivity>
                  <h:p>
                    Using the entropy sources specified in FCS_RBG.4, the evaluator shall examine the entropy documentation required by FCS_RBG.1.2 to verify that it describes the method by which the various entropy sources are combined into a single seed. This should include an estimation of the rate at which each noise source outputs data and whether this is dependent on any system-specific factors so that each source's relative contribution to the overall entropy is understood. The evaluator shall verify that the resulting combination of sampled data and the min-entropy rate of the sampled data is described in sufficient detail to determine that sufficient entropy can be made available for the highest strength keys that the TSF can generate (e.g., 256 bits). If the seed data cannot be assumed to have full entropy (e.g., the min-entropy of the sampled bits is less than 1), the evaluator shall ensure that the entropy documentation describes the method by which the TOE estimates the amount of entropy that has been accumulated to ensure that sufficient data is collected and any conditioning that the TSF applies to the output data to create a seed of sufficient size with full entropy.
                  </h:p>
                  <TSS/>
                  <Guidance/>
                  <Tests/>
                </aactivity>
              </f-element>
          
            </f-component>
        
            <f-component cc-id="fcs_smc_ext.1" name="Submask Combining " id="fcs-smc-ext-1" status="sel-based">
              <depends on-sel="sel-fcs-kyc-ext-1-1-sel-5"/>
              <depends on-sel="sel-fpt-kyp-ext-1-1-sel-3c"></depends>
              <consistency-rationale/>
              <comp-lev>requires the TSF to combine the submasks in a predictable fashion.</comp-lev>
              <management/>
              <audit/>
              <dependencies>FCS_COP.1 Cryptographic Operation</dependencies>
              <f-element id="fcs-smc-ext-1-1">
                <title>
                  The TSF shall combine submasks using the following method <selectables><selectable>exclusive OR (XOR)</selectable><selectable>SHA-256</selectable><selectable>SHA-384</selectable><selectable>SHA-521</selectable></selectables> to generate an [<h:i>intermediary key or BEV</h:i>].
                </title>
                <ext-comp-def-title>
                  <title>The TSF shall combine submasks using the following method <selectables>
                    <selectable>exclusive OR (XOR)</selectable>
                    <selectable>SHA-256</selectable>
                    <selectable>SHA-384</selectable>
                    <selectable>SHA-521</selectable>
                  </selectables> to generate an <assignable>types of keys</assignable>.</title>
                </ext-comp-def-title>
                <note role="application">
                  This requirement specifies the way that a product may combine the various submasks by using either an XOR or an 
                  approved SHA-hash. The approved hash functions are captured in
                  FCS_COP.1/Hash.<h:br/><h:br/>
                  
                  This SFR is claimed when the TSF requires the use of submask combining as part of maintaining or deriving a key chain.
                </note>
                  <aactivity>
                    <TSS>If the submasks produced from the authorization factors are XORed together to form
                      the BEV or intermediate key, the TSS section shall identify how this is performed (e.g.,
                      if there are ordering requirements, checks performed, etc.). The evaluator shall also
                      confirm that the TSS describes how the length of the output produced is at least the
                      same as that of the BEV.</TSS>
                      <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                      <CustomEA name="KMD">The evaluator shall review the KMD to ensure that an approved combination is used
                        and does not result in the weakening or exposure of key material.</CustomEA>
                      <Tests>The evaluator shall perform the following test:<testlist>
                        <test>(conditional): If there is more than one authorization factor, ensure that failure
                          to supply a required authorization factor does not result in access to the encrypted data.</test>
                      </testlist></Tests>
                  </aactivity>
              </f-element>
              
            </f-component>
        
            <f-component cc-id="fcs_otv_ext.1" name="One Time Value (Salt, Nonce, and Initialization Vector Generation)" id="fcs_otv_ext.1">
              <consistency-rationale/>
              <comp-lev>requires the generation of salts, nonces, and IVs to be used by the cryptographic components of the TOE to be performed in the specified manner. </comp-lev>
              <management/>
              <audit/>
              <dependencies>FCS_RBG.1 Cryptographic Operation (Random Bit Generation)</dependencies>
              <f-element id="fcs-otv-ext-1-1">
                <title>The TSF shall perform cryptographic one-time value generation for 
                  <selectables>
						<tabularize id="fcs-otv-sels" title="Allowed choices for FCS_OTV_EXT.1">
							<selectcol>Algorithm or Mode</selectcol>
							<reqtext>using the output of a <selectables>
							<selectable id="fcs-otv-sel-drbg">random bit generator as defined in FCS_RBG.1</selectable>
							<selectable>deterministic OTV construction</selectable>
							<selectable><assignable>OTV construction method</assignable></selectable></selectables> 
							and	sizes of length that meet the following:</reqtext>
							<selectcol>List of standards</selectcol>
							<reqtext><h:p/><h:p/>The following table provides the allowed choices for
										completion of the selection operations of FCS_OTV_EXT.1.</reqtext>
						</tabularize>

						<!-- HMAC -->
						<selectable id="sel-fcs-otv-ext-hmac">
							<col>HMAC</col>  
							<col><selectables>
								<selectable>FIPS PUB 198-1</selectable>
								<selectable>NIST SP 800-56C Revision 2</selectable>
							</selectables></col>
							<col>Depending on the use case, salts can be secret or known,
								randomly generated or all zero. Secret IVs may be required,
								e.g., for key derivation. Refer to the relevant standards for
								your use case.</col>
						</selectable>
						
						<!-- KDF -->
						<selectable id="sel-fcs-otv-ext-kdf">
							<col>KDF</col>  
							<col><selectables>
								<selectable>NIST SP 800-108 Revision 1</selectable>
								<selectable>NIST SP 800-135 Revision 1</selectable>
								<selectable>ISO/IEC 11770-6:2016 (Subclause 7.3.2)</selectable>
							</selectables></col>
							<col>Salts and IVs are generated as directed for HMAC, AES, and
							CAM cryptographic algorithms. Refer to the relevant
							standards. </col>
						</selectable>
						
						<!-- PBKDF -->
						<selectable id="sel-fcs-otv-ext-pbkdf">
							<col>PBKDF</col>  
							<col>NIST SP 800-132</col>
							<col>Salts are generated and used as directed in PBKDFs.</col>
						</selectable>
						
						<!-- CTR -->
						<selectable id="sel-fcs-otv-ext-ctr">
							<col>CTR</col>  
							<col>NIST SP 800-38A</col>
							<col>"Initial Counter" (nonce) shall be non-repeating. No counter
							value shall be repeated across multiple messages with the
							same secret key</col>
						</selectable>
						
						<!-- CBC -->
						<selectable id="sel-fcs-otv-ext-cbc">
							<col>CBC</col>  
							<col>NIST SP 800-38A Appendix C</col>
							<col>Depending on the use case, IVs shall be unpredictable.
							Repeating IVs leak information about whether the first one
							or more blocks are shared between two messages, so IVs
							should be non-repeating in such situations. Refer to the
							relevant standards for your use case.</col>
						</selectable>
						
						<!-- XTS -->
						<selectable id="sel-fcs-otv-ext-xts">
							<col>XTS</col>  
							<col><selectables><selectable>NIST SP 800-38E</selectable><selectable>IEEE Std 1619-2018</selectable></selectables></col>
							<col>Tweak values shall be non-negative integers, assigned
							consecutively, and starting at an arbitrary non-negative
							integer (i.e., sequential nonces).</col>
						</selectable>
						
						<!-- CMAC -->
						<selectable id="sel-fcs-otv-ext-xts">
							<col>CMAC</col>  
							<col>NIST SP 800-38B</col>
							<col>IV is all zeroes.</col>
						</selectable>
						
						<!-- KW KWP -->
						<selectable id="sel-fcs-otv-ext-xts">
							<col><selectables><selectable>KW</selectable><selectable>KWP</selectable></selectables></col>  
							<col>NIST SP 800-38F</col>
							<col>Depending on the use case, nonces may be required. Please reference the relevant standards for your use case.</col>
						</selectable>
						
						<!-- CCM -->
						<selectable id="sel-fcs-otv-ext-xts">
							<col>CCM</col>  
							<col>NIST SP 800-38C</col>
							<col>Nonces shall be non-repeating.</col>
						</selectable>
						
						<!-- GCM -->
						<selectable id="sel-fcs-otv-ext-xts">
							<col>GCM</col>  
							<col>NIST SP 800-38D</col>
							<col>For RBG-based IV construction (section 8.2.2) the number
							of invocations of GCM shall not exceed 2^32 for a given
							secret key.</col>
						</selectable>
						
						<!-- RSA-OAEP -->
						<selectable id="sel-fcs-otv-ext-xts">
							<col>RSA-OAEP</col>  
							<col>NIST SP 800-56B Revision 2</col>
							<col>Mask for padding shall be randomly generated.</col>
						</selectable>
						</selectables>
                </title>
                
                <aactivity>
                    <TSS>
                      <h:p>The evaluator shall verify the TSS describes which OTV functions are leveraged and the description aligns with the requirement table.</h:p></TSS>
                       <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                    <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                    <Tests>There are no test evaluation activities for this SFR.</Tests>
                </aactivity>
              </f-element>
             
            </f-component>
        
            <f-component cc-id="fcs_val_ext.1" name="Validation " id="fcs-val-ext-1" status="sel-based">
              <depends on-sel="fcs-kyc-ext-1-2-sel-2a"/>
              <consistency-rationale/>
              <comp-lev>requires the TSF to validate submasks and BEVs by one or more of the specified methods.</comp-lev>
              <management/>
              <audit/>
              <dependencies>
                <h:p>FCS_COP.1 Cryptographic Operation</h:p>                
              </dependencies>
              <f-element id="fcs-val-ext-1-1">
                <title>
                  The TSF shall perform validation of the <selectables>
                    <selectable id="sel-fcs-val-ext-1-1-sel-1a">submask</selectable>
                    <selectable id="sel-fcs-val-ext-1-1-sel-1b">intermediate key</selectable>
                    <selectable id="sel-fcs-val-ext-1-1-sel-1c">BEV</selectable>
                  </selectables>
                  using the following methods: <selectables linebreak="yes">
                    <selectable id="sel-fcs-val-ext-1-1-sel-2a">key wrap as specified in FCS_COP.1/KeyWrap;</selectable>
                    <selectable id="sel-fcs-val-ext-1-1-sel-2a">hash the <selectables>
                      <selectable>submask</selectable>
                      <selectable>intermediate key</selectable>
                      <selectable>BEV</selectable>
                    </selectables>
                    as specified in <selectables>
                      <selectable id="fcs-val-ext-1-1-hash">FCS_COP.1/Hash</selectable>
                      <selectable id="fcs-val-ext-1-1-keyhash">FCS_COP.1/KeyedHash</selectable>
                    </selectables> and compare it to a stored hashed <selectables><selectable>submask</selectable><selectable> intermediate key</selectable><selectable>BEV</selectable></selectables>;</selectable>
                    <selectable id="fcs-val-ext-1-1-decr">decrypt a known value using the <selectables><selectable>submask</selectable><selectable>intermediate key</selectable><selectable>BEV</selectable></selectables> specified in FCS_COP.1/SKC and compare it against a stored known value </selectable>
                  </selectables>.
                </title>
                
                <ext-comp-def-title>
                  <title>
                    The TSF shall perform validation of the <selectables>
                      <selectable>submask</selectable>
                      <selectable>intermediate key</selectable>
                      <selectable>BEV</selectable>
                    </selectables>
                    using the following methods: <selectables linebreak="yes">
                      <selectable>key wrap as specified in FCS_COP.1/KeyWrap;</selectable>
                      <selectable>hash the <selectables>
                        <selectable>submask</selectable>
                        <selectable>intermediate key</selectable>
                        <selectable>BEV</selectable>
                      </selectables>
                        as specified in <assignable>cryptographic operation requirement</assignable> and compare it to a stored hashed <selectables><selectable>submask</selectable><selectable> intermediate key</selectable><selectable>BEV</selectable></selectables>;</selectable>
                      <selectable id="fcs-val-ext-1-1-decr">decrypt a known value using the <selectables><selectable>submask</selectable><selectable>intermediate key</selectable><selectable>BEV</selectable></selectables> specified in FCS_COP.1/SKC and compare it against a stored known value </selectable>
                    </selectables>.
                  </title>
                </ext-comp-def-title>
                
                  <aactivity level="element">
                      <TSS>
                        <h:p>The evaluator shall examine the TSS to determine which authorization factors support
                          validation.</h:p>
                        <h:p>The evaluator shall examine the TSS to review a high-level description if multiple
                          submasks are used within the TOE, how the submasks are validated (e.g., each submask
                          validated before combining, once combined validation takes place).</h:p></TSS>
                      <Guidance>
                        <h:p>(conditional) If the validation functionality is configurable, the evaluator shall examine
                          the operational guidance to ensure it describes how to configure the TOE to ensure the
                          limits regarding validation attempts can be established.</h:p>
                        <h:p>(conditional) If the validation functionality is specified by the ST author, the evaluator
                          shall examine the operational guidance to ensure that it states the values that the TOE
                          uses for limits regarding validation attempts.</h:p></Guidance>
                      <CustomEA name="KMD">
                        <h:p>The evaluator shall examine the KMD to verify that it described the method the TOE
                          employs to limit the number of consecutively failed authorization attempts.</h:p>
                        <h:p>The evaluator shall examine the vendor’s KMD to ensure it describes how validation
                          is performed. The description of the validation process in the KMD provides detailed
                          information how the TOE validates the submasks. The KMD describes how the process
                          works, such that it does not expose any material that might compromise the submasks.</h:p></CustomEA>
                      <Tests>
                        The evaluator shall perform the following tests:
                        <testlist>
                          <test>The evaluator shall determine the limit on the average rate of the number of
                            consecutive failed authorization attempts. The evaluator will test the TOE by entering
                            that number of incorrect authorization factors in consecutive attempts to access the
                            protected data. If the limit mechanism includes any “lockout” period, the time period
                            tested should include at least one such period. Then the evaluator will verify that the
                            TOE behaves as described in the TSS.</test>
                          <test>For each validated authorization factor, ensure that when the user provides an
                            incorrect authorization factor, the TOE prevents the BEV from being forwarded outside
                            the TOE (e.g., to the EE).</test>
                        </testlist></Tests>
                  </aactivity>
              </f-element>
              <f-element id="fcs-val-ext-1-2">
                <title>
                  The TSF shall require validation of the [<h:i>BEV</h:i>] prior to [<h:i>forwarding the BEV to the EE</h:i>].
                </title>
                
                <ext-comp-def-title>
                  <title>The TSF shall require validation of the <selectables>
                    <selectable>submask</selectable>
                    <selectable>intermediate key</selectable>
                    <selectable>BEV</selectable>
                  </selectables> prior to <assignable>activity requiring validation</assignable>.
                  </title>                  
                </ext-comp-def-title>
                
                <note role="application">
                    This SFR is claimed when the TSF validates an authentication factor as a prerequisite to unlocking the key chain as
                    defined in FCS_KYC_EXT.1.
                </note>
                
              </f-element>
              <f-element id="fcs-val-ext-1-3">
                <title>The TSF shall 
                  <selectables linebreak="yes">
                    <selectable>perform a key sanitization of the DEK upon a 
                      <selectables>
                        <selectable>configurable number</selectable>
                        <selectable><assignable>ST author specified number</assignable></selectable>
                      </selectables>
                      of consecutive failed validation attempts
                    </selectable>
                    <selectable>institute a delay such that only <assignable>ST author specified number of attempts</assignable> can be made within a 24 hour period</selectable>
                    <selectable>block validation after <assignable>ST author specified number of attempts</assignable> of consecutive failed validation attempts</selectable>
                    <selectable>require power cycle or reset the TOE after <assignable>ST author specified number of attempts</assignable> of consecutive failed validation attempts</selectable>
                  </selectables>.</title>
                <note role="application">
                  <h:p>
                    The purpose of performing secure validation is to not expose any material that might compromise the submasks. For the selections in FCS_VAL_EXT.1.1, the ST author must clarify in the KMD which specific entities are referred to in this SFR if multiple entities of a type exist.
                  </h:p>
                  <h:p>The TOE validates the submasks (e.g., authorization factors) prior to presenting the BEV to the EE. When a password is used as an authorization factor, it is conditioned before any attempts to validate. In cases where validation of the authorization factors fails, the product will not forward a BEV to EE. </h:p>
                  <h:p>When the key wrap in FCS_COP.1/KeyWrap is used, the validation is performed inherently.</h:p>
                  <h:p>The delay must be enforced by the TOE, but this requirement is not intended to address attacks that bypass the product (e.g. attacker obtains hash value or “known” crypto value and mounts attacks outside of the TOE, such as a third party password crackers). The cryptographic functions (i.e., hash, decryption) performed are those specified in FCS_COP.1/Hash, FCS_COP.1/KeyedHash, and FCS_COP.1/SKC.</h:p>
                  <h:p>The ST author may need to iterate this requirement if multiple authentication factors are used, and either different methods are used to validate, or in some cases one or more authentication factors may be validated, and one or more are not validated.</h:p>
                </note>
              </f-element>
             
            </f-component>
      </section>
    
      <section title="Security Management (FMT)" id="FMT">
        <f-component cc-id="fmt_mof.1" name="Management of Functions Behavior" id="fmt-mof-1-1">
          <f-element id="fmt-mof-1-1">
            <title>
              The TSF shall restrict the ability to [<h:i>modify the behaviour of</h:i>] the functions [<h:i>use of compliant power saving state</h:i>] to [<h:i>authorized users</h:i>].
            </title>
            <note role="application">“Modify the behaviour of” refers to any change in how or when a compliant power state may occur. Only privileged users are allowed to enable or disable compliant power saving states via modification of “use of compliant power saving state” function.</note>
              <aactivity>
                  <TSS>If support for compliant power saving states are claimed in the ST, the evaluator shall
                    ensure the TSS describes how these are managed and shall ensure that TSS describes
                    how only privileged users (administrators) are allowed to manage the states.</TSS>
                  <Guidance>The evaluator to check if guidance documentation describes which authorization
                    factors are required to change compliant power saving state behavior and properties.</Guidance>
                  <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                  <Tests>The evaluator shall perform the following tests:
                    <testlist>
                      <test>(conditional): If the product supports changes to compliant power saving
                        states, the evaluator shall present a privileged authorization credential to the TSF and validates that changes to compliant power saving state behavior and properties are
                        allowed.</test>
                        <test>(conditional): If the product supports changes to compliant power
                          saving states, the evaluator shall present a non-privileged authorization credential to the TSF and validates that changes to compliant power saving state behavior are not allowed.
                          </test>
                    </testlist></Tests>
              </aactivity>
          </f-element>
          
        </f-component>
        
        <f-component cc-id="fmt_smf.1" name="Specification of Management Functions" id="fmt-smf-1">
        <f-element id="fmt-smf-1">
          <title>
          The TSF shall be capable of performing the following management functions: [
            <h:i><h:ol type='a'>
              <h:li>forwarding requests to change the DEK to the EE</h:li>
              <h:li>forwarding requests to cryptographically erase the DEK to the EE</h:li>
              <h:li>allowing authorized users to change authorization values or set of authorization values used within the supported authorization method,</h:li>
              <h:li>initiate TOE firmware/software updates</h:li>
              <h:li><selectables>
                <selectable>no other functions</selectable>
                <selectable>specify the power saving state properties</selectable>
                <selectable> define the allowable power saving states</selectable>
                <selectable>generate authorization factors using the TSF RBG</selectable>
                <selectable>configure authorization factors</selectable>
                <selectable>configure cryptographic functionality</selectable>
                <selectable>disable key recovery functionality</selectable>
                <selectable>securely update the public key needed for trusted update</selectable>
                <selectable>configure the number of failed validation attempts required to trigger corrective behavior</selectable>
                <selectable>configure the corrective behavior to issue in the event of an excessive number of failed validation attempts</selectable>
                <selectable><assignable>other management functions provided by the TSF</assignable></selectable>
              </selectables>]</h:li>
            </h:ol></h:i> 
            
          </title>
          <note role="application">
            <h:p>The intent of this requirement is to express the management capabilities that the TOE possesses. This means that the TOE must be able to perform the listed functions.  “Configure cryptographic functionality” could include key management functions; for example, the BEV will be wrapped or encrypted, and the EE will need to unwrap or decrypt the BEV. In item e, if no other management functions are provided (or claimed), then “no other functions” should be selected</h:p>
            <h:p>Changing the DEK would require the data to be re-encrypted with the new DEK, but allows the user the ability to generate new DEKs.</h:p>
            <h:p>For the purposes of this document, key sanitization means to destroy the DEK, using one of the approved destruction methods. In some implementations, changing the DEK could be the same functionality as cryptographically erasing the DEK.</h:p>
          </note>
            <aactivity>
                <TSS>
                  <h:p>If item a&#41; is selected in FMT_SMF.1.1: The evaluator shall ensure the TSS describes
                    how the TOE sends the request to the EE to change the DEK.</h:p>
                  <h:p>If item b&#41; is selected in FMT_SMF.1.1: The evaluator shall ensure the TSS describes
                    how the TOE sends the request to the EE to cryptographically erase the DEK. </h:p>
                  <h:p>If item c&#41; is selected in FMT_SMF.1.1: The evaluator shall ensure the TSS describes
                    the methods by which users may change the set of all authorization factor values
                    supported.</h:p>
                  <h:p>If item d&#41; is selected in FMT_SMF.1.1: The evaluator shall ensure the TSS describes
                    the process to initiate TOE firmware/software updates. </h:p>
                  <h:p>If item e&#41; is selected in FMT_SMF.1.1: If power saving states can be managed, the
                    evaluator shall ensure that the TSS describes how this is performed, including how the
                    TOE supports disabling certain power saving states if more than one are supported. If
                    additional management functions are claimed in the ST, the evaluator shall ensure the
                    TSS describes the additional functions.</h:p>
                </TSS>
                <Guidance>
                  <h:p>If item a&#41; and/or b&#41; is selected in FMT_SMF.1.1: The evaluator shall examine the
                    operational guidance to ensure that it describes how the functions for A and B can be
                    initiated by the user.</h:p>
                  <h:p>If item c&#41; is selected in FMT_SMF.1.1: The evaluator shall examine the operational
                    guidance to ensure that it describes how selected authorization factor values are
                    changed. </h:p>
                  <h:p>If item d&#41; is selected in FMT_SMF.1.1: The evaluator shall examine the operational
                    guidance to ensure that it describes how to initiate TOE firmware/software updates.</h:p>
                  <h:p>If item e&#41; is selected in FMT_SMF.1.1: Default Authorization Factors: It may be the
                    case that the TOE arrives with default authorization factors in place. If it does, then the
                    selection in section E must be made so that there is a mechanism to change these
                    authorization factors. The operational guidance shall describe the method by which the
                    user changes these factors when they are taking ownership of the device. The TSS shall
                    describe the default authorization factors that exist. </h:p>
                  <h:p>Disable Key Recovery: The guidance for disabling this capability shall be described in
                    the AGD documentation.</h:p>
                  <h:p>Power Saving: The guidance shall describe the power saving states that are supported
                    by the TSF, how these states are applied, how to configure when these states are applied
                    (if applicable), and how to enable/disable the use of specific power saving states (if
                    applicable).</h:p>
                </Guidance>
                <CustomEA name="KMD">There are no KMD evaluation activities for this SFR</CustomEA>
                <Tests>
                  
                  <h:p>
                  If item a&#41; and/or b&#41; is selected in FMT_SMF.1.1: The evaluator shall verify that the
                  TOE has the functionality to forward a command to the EE to change and
                  cryptographically erase the DEK. The actual testing of the cryptographic erase will take
                  place in the EE.
                  </h:p>
                  <h:p>If item c&#41; is selected in FMT_SMF.1.1: The evaluator shall initialize the TOE such that
                    it requires the user to input an authorization factor in order to access encrypted data.</h:p>
                  <h:p>
                    <testlist><test>The evaluator shall first provision user authorization factors, and then verify
                      all authorization values supported allow the user access to the encrypted data. Then
                      the evaluator shall exercise the management functions to change a user’s
                      authorization factor values to a new one. Then he or she will verify that the TOE
                      denies access to the user’s encrypted data when he or she uses the old or original
                      authorization factor values to gain access.</test>
                    
                  </testlist>
                  </h:p>
                  <h:p>If item d&#41; is selected in FMT_SMF.1.1: The evaluator shall verify that the TOE has the
                    functionality to initiate TOE firmware/software updates.</h:p>
                    <h:p>If item e&#41; is selected in FMT_SMF.1.1: If additional management functions are
                      claimed, the evaluator shall verify that the additional features function as described. </h:p>
                  <h:p><testlist>
                    <test>(conditional): If the TOE provides default authorization values, the
                      evaluator shall change these values in the course of taking ownership of the device
                      as described in the operational guidance. The evaluator shall then confirm that the
                      (old) authorization values are no longer valid for data access.</test>
                    <test>(conditional): If the TOE provides key recovery capability whose effects are
                      visible at the TOE interface, then the evaluator shall devise a test that ensures that
                      the key recovery capability has been or can be disabled following the guidance
                      provided by the vendor.</test>
                    <test>(conditional): If the TOE provides the ability to configure the power saving
                      states that are entered by certain events, the evaluator shall devise a test that causes
                      the TOE to enter a specific power saving state, configure the TSF so that this
                      activity causes a different state to be entered, repeat the activity, and observe the
                      new state is entered as configured.</test>
                    <test>(conditional): If the TOE provides the ability to disable the use of one or
                      more power saving states, the evaluator shall devise a test that enables all supported
                      power saving states and demonstrates that the TOE can enter into each of these
                      states. The evaluator shall then disable the supported power saving states one by
                      one, repeating the same set of actions that were performed at the start of the test,
                      and observe each time that when a power saving state is configured to no longer be
                      used, none of the behavior causes the disabled state to be entered.</test>
                  </testlist></h:p>
                </Tests>
            </aactivity>
        </f-element>
          
      </f-component>
        
      <f-component cc-id="fmt_smr.1" name="Security Roles" id="fmt-smr-1">
        <f-element id="fmt-smr-1-1">
          <title>
            The TSF shall maintain the roles [<h:i>authorized user</h:i>].
          </title>
           
        </f-element>
        <f-element id="fmt-smr-1-2">
          <title>
            The TSF shall be able to associate users with roles.
          </title>
            
            <aactivity>
              <TSS>There are no TSS evaluation activities for this SFR. Evaluation of this SFR is performed as part of evaluating FMT_MOF.1 and FMT_SMF.1.</TSS>
              <Guidance>There are no guidance evaluation activities for this SFR. Evaluation of this SFR is performed as part of evaluating FMT_MOF.1 and FMT_SMF.1.</Guidance>
              <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
              <Tests>There are no test evaluation activities for this SFR. Evaluation of this SFR is performed
                as part of evaluating FMT_MOF.1 and FMT_SMF.1.</Tests>   
            </aactivity>
        </f-element>
        
      </f-component>        
      </section>
    
      <section title="Protection of the TSF (FPT)" id="fpt">
        <ext-comp-def title="Key and Key Material Protection" fam-id="FPT_KYP_EXT">
          <fam-behavior>This family requires that key and key material be protected if and when written to non-volatile storage.
            </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Power Management" fam-id="FPT_PWR_EXT">
          <fam-behavior>This family defines secure behavior of the TSF when the TOE supports multiple power saving states. The use of compliant power saving states (i.e. power saving states that purge security relevant data upon entry) is essential for ensuring that state transitions cannot be used as attack vectors to bypass TOE self-protection mechanisms.
            </fam-behavior>
        </ext-comp-def>
        
        <ext-comp-def title="Trusted Update" fam-id="FPT_TUD_EXT">
          <fam-behavior>Components in this family address the requirements for updating the TOE firmware and/or software.
            </fam-behavior>
        </ext-comp-def>
        
        <f-component cc-id="fpt_fls.1" name="Failure with Preservation of Secure State" status="sel-based">
          <depends on-sel="sel-fcs-afa-ext-1-1-sel-1b"/>
          <depends on-sel="sel-fcs-afa-ext-1-1-sel-6a"/>
          <depends on-sel="sel-fcs-kyc-ext-1-1-sel-1"/>
          <depends on-sel="sel-fcs-kyc-ext-1-1-sel-3"/>
          <depends on-sel="fcs-otv-sel-drbg"/>
          <f-element id="fel-pres-sec-state">
            <title>
              The TSF shall preserve a secure state when the following types of failures occur: [<h:i>DRBG self-test failure</h:i>].              
            </title>
            <note role="application">The intent of this requirement is to ensure that cryptographic services requiring random bit generation cannot be performed if a failure of a self-test defined in FPT_TST.1 occurs.</note>
            <aactivity>              
              <TSS>
                The evaluator shall verify that the TSF describes how the TOE enters an error state in the event of a DRBG self-test failure.
              </TSS>
              <Guidance>
                The evaluator shall verify that the guidance documentation describes the error state that results from a DRBG self-test failure and the actions that a user or administrator should take in response to attempt to resolve the error state.
              </Guidance>
              <Tests/>
            </aactivity>
          </f-element>
          
        </f-component>
        
        <f-component cc-id="fpt_kyp_ext.1" name="Protection of Key and Key Material " id="fpt-kyp-ext-1">
          <consistency-rationale/>
          <comp-lev>requires the TSF to ensure that no plaintext key or key material are written to non-volatile storage.</comp-lev>
          <management/>
          <audit/>
          <dependencies>
            <h:p>FCS_COP.1 Cryptographic Operation</h:p>
            <h:p>FCS_KYC_EXT.1 Key Chaining (Initiator)</h:p>
            <h:p>FCS_KYC_EXT.2 Key Chaining (Recipient)</h:p>
            <h:p>FCS_SMC_EXT.1 Submask Combining</h:p>            
          </dependencies>
          
          <f-element id="fpt-kyp-ext-1-1">
            <title>
              The TSF shall <selectables linebreak="yes">
                <selectable id="sel-fpt-kyp-ext-1-1-sel-1">not store keys in non-volatile memory</selectable>
                <selectable id="sel-fpt-kyp-ext-1-1-sel-2">only store keys in non-volatile memory when wrapped, as specified in FCS_COP.1/KeyWrap, or encrypted, as specified in FCS_COP.1/KeyEnc or FCS_COP.1/KeyEncap</selectable>
                <selectable id="sel-fpt-kyp-ext-1-1-sel-3">only store plaintext keys that meet any one of the following criteria 
					<selectables>
	                  <selectable id="sel-fpt-kyp-ext-1-1-sel-3a">the plaintext key is not part of the key chain as specified in FCS_KYC_EXT.1</selectable>
	                  <selectable id="sel-fpt-kyp-ext-1-1-sel-3b">the plaintext key will no longer provide access to the encrypted data after initial provisioning</selectable>
	                  <selectable id="sel-fpt-kyp-ext-1-1-sel-3c">the plaintext key is a key split that is combined as specified in FCS_SMC_EXT.1, and the other half of the key split is 
						  <selectables linebreak="yes">
		                    <selectable id="sel-fpt-kyp-ext-1-1-sel3ci-">wrapped as specified in FCS_COP.1/KeyWrap</selectable>
		                    <selectable id="sel-fpt-kyp-ext-1-1-sel-3cii">encrypted as specified in FCS_COP.1/KeyEnc or FCS_COP.1/KeyEncap</selectable>
		                    <selectable id="sel-fpt-kyp-ext-1-1-sel-3ciii">derived and not stored in non-volatile memory</selectable>
                  		</selectables>
					  </selectable>
                  <selectable id="sel-fpt-kyp-ext-1-1-sel-3d">the non-volatile memory the key is stored on is located in an external storage device for use as an authorization factor</selectable>
                  <selectable id="sel-fpt-kyp-ext-1-1-sel-3e">the plaintext key is only used to provide additional cryptographic protection to other keys, such that disclosure of the plaintext key would not compromise the security of the keys being protected</selectable>
					</selectables>
                 </selectable>                  
                </selectables>.
            </title>
            
            <ext-comp-def-title>
              <title>The TSF shall <selectables linebreak="yes">
                <selectable>not store keys in non-volatile memory</selectable>
                <selectable>only store keys in non-volatile memory when wrapped, as specified in FCS_COP.1, or encrypted, as specified in FCS_COP.1</selectable>
                <selectable>only store plaintext keys that meet any one of the following criteria <selectables>
                  <selectable>the plaintext key is not part of the key chain as specified in FCS_KYC_EXT.1</selectable>
                  <selectable>the plaintext key will no longer provide access to the encrypted data after initial provisioning</selectable>
                  <selectable>the plaintext key is a key split that is combined as specified in FCS_SMC_EXT.1, and the other half of the key split is <selectables linebreak="yes">
                    <selectable>wrapped as specified in FCS_COP.1</selectable>
                    <selectable>encrypted as specified in FCS_COP.1 or FCS_COP.1</selectable>
                    <selectable>derived and not stored in non-volatile memory</selectable>
                  </selectables></selectable>
                  <selectable>the non-volatile memory the key is stored on is located in an external storage device for use as an authorization factor</selectable>
                  <selectable id="sel-fpt-kyp-ext-1-1-sel-3e">the plaintext key is only used to provide additional cryptographic protection to other keys, such that disclosure of the plaintext key would not compromise the security of the keys being protected</selectable>
					                 
                </selectables>
                </selectable>
                
              </selectables>.
              </title>
            </ext-comp-def-title>
            
            <note role="application">
              The plaintext key storage in non-volatile memory is allowed for several reasons. If the keys exist within protected memory that is not user accessible on the TOE 
              or OE, the only methods that allow it to play a security relevant role for protecting the BEV or the DEK are if it is a key split or providing additional layers 
              of wrapping or encryption on keys that have already been protected.<h:br/><h:br/>
            
              If the TSF implements key wrapping, key encryption, or key encapsulation to maintain protected cryptographic key storage, then FCS_COP.1/KeyWrap, FCS_COP.1/KeyEnc,
              or FCS_COP.1/KeyEncap must be claimed. Additionally, if key wrapping or key encryption is used, then FCS_CKM.1/SKG, FCS_RBG.1, and FCS_COP.1/SKC must be claimed to
              support generation, encryption, and decryption of symmetric keys used in support of these operations. If the TSF implements submask combining to maintain protected
              cryptographic key storage, then FCS_SMC_EXT.1 must be claimed.
            </note>
             
              <aactivity>
                <TSS>The evaluator shall examine the TSS and verify it identifies the methods used to protect keys stored in non-volatile memory.</TSS>
                <Guidance>There are no AGD evaluation activities for this SFR.</Guidance>
                <CustomEA name="KMD">
                    <h:p>The evaluator shall verify the KMD to ensure it describes the storage location of all
                      keys and the protection of all keys stored in non-volatile memory. The description of
                      the key chain shall be reviewed to ensure the selected method is followed for the storage
                      of wrapped or encrypted keys in non-volatile memory and plaintext keys in non-volatile
                      memory meet one of the criteria for storage.</h:p></CustomEA>
                <Tests>
                  There are no test evaluation activities for this SFR.</Tests>
                </aactivity>
          </f-element>
         
        </f-component>
        
        <f-component cc-id="fpt_pwr_ext.1" name="Power Saving States" id="fpt-pwr-ext-1">
          <consistency-rationale/>
          <comp-lev>defines the compliant power saving states that are implemented by the TSF.</comp-lev>
          <management>The following actions could be considered for the management functions in FMT:<h:ul>
            <h:li>Enable or disable the use of individual power saving states</h:li>
            <h:li>Specify one or more power saving state configurations</h:li>
          </h:ul></management>
          <audit>There are no auditable events foreseen.</audit>
          <dependencies>No dependencies</dependencies>
          <f-element id="fpt-pwr-ext-1-1">
            <title>
              The TSF shall define the following compliant power saving states: <selectables>
                <selectable>S3</selectable>
                <selectable>S4</selectable>
                <selectable>G2(S5)</selectable>
                <selectable>G3</selectable>
                <selectable><assignable>other power saving states</assignable></selectable>
              </selectables>.
            </title>
            <note role="application">Power saving states S3, S4, G2(S5), G3 are defined by the Advanced Configuration and Power Interface (ACPI) standard.</note>
            <aactivity>
            <TSS>The evaluator shall validate the TSS contains a list of compliant power saving states.</TSS>
              <Guidance>The evaluator shall ensure that guidance documentation contains a list of compliant
                power saving states. If additional power saving states are supported, then the evaluator
                shall validate that the guidance documentation states how non-compliant power states
                are disabled.</Guidance>
              <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
              <Tests>The evaluator shall confirm that for each listed compliant state all key/key materials
                are removed from volatile memory by using the test defined in FCS_CKM.6.</Tests> 
              </aactivity></f-element>
         
        </f-component>
        
        <f-component cc-id="fpt_pwr_ext.2" name="Timing of Power Saving States" id="fpt-pwr-ext-2-1">
          <consistency-rationale/>
          <comp-lev>describes the situations that cause compliant power saving states to be entered.</comp-lev>
          <management/>
          <audit>The following actions should be auditable if FAU_GEN Security audit data generation is included in the PP/ST:<h:ul>
            <h:li>Transition of the TSF into different power saving states</h:li>
          </h:ul></audit>
          <dependencies>FPT_PWR_EXT.1 Power Saving States</dependencies>
          <f-element id="fpt-pwr-ext-2-1">
            <title>
              For each compliant power saving state defined in FPT_PWR_EXT.1.1, the TSF shall enter
              the compliant power saving state when the following conditions occur: user-initiated request, <selectables>
                <selectable>shutdown</selectable>
                <selectable>user inactivity</selectable>
                <selectable>request initiated by remote management system</selectable>
                <selectable><assignable>other conditions</assignable></selectable>
                <selectable>no other conditions</selectable>

              </selectables>.
            </title>
            <note role="application">If volatile memory is not erased as part of an unexpected power shutdown sequence then guidance documentation must define mitigation activities (e.g. how long users should wait after an unexpected power-down before volatile memory can be considered erased).</note>
              <aactivity>
                <TSS>The evaluator shall validate that the TSS contains a list of conditions under which the
                  TOE enters a compliant power saving state. </TSS>
                  <Guidance>The evaluator shall check that the guidance contains a list of conditions under which
                    the TOE enters a compliant power saving state. Additionally, the evaluator shall verify
                    that the guidance documentation states whether unexpected power-loss events may
                    result in entry to a non-compliant power saving state and, if that is the case, validate
                    that the documentation contains information on mitigation measures.</Guidance>
                  <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                  <Tests>The evaluator shall trigger each condition in the list of identified conditions and ensure
                    the TOE ends up in a compliant power saving state by running the test identified in
                    FCS_CKM.6.</Tests>
              </aactivity>
          </f-element>
          
        </f-component>
        
        <f-component cc-id="fpt_tst.1" name="TSF Self-Testing" status="sel-based">
          <depends on-sel="sel-fcs-afa-ext-1-1-sel-1b"/>
          <depends on-sel="sel-fcs-afa-ext-1-1-sel-6a"/>
          <depends on-sel="sel-fcs-kyc-ext-1-1-sel-1"/>
          <depends on-sel="sel-fcs-kyc-ext-1-1-sel-3"/>
          <depends on-sel="fcs-otv-sel-drbg"/>
          <f-element id="fel-tsf-self-test">
            <title>
              The TSF shall run a suite of the following self-tests <selectables>
                <selectable>during initial start-up</selectable>
                <selectable>periodically during normal operation</selectable>
                <selectable>at the request of the authorized user</selectable>
                <selectable>at the conditions <assignable>conditions under which self-test should occur</assignable></selectable>
              </selectables>
              to demonstrate the correct operation of <selectables>
                <selectable><assignable>parts of  TSF</assignable></selectable>
                <selectable>TSF data</selectable>
              </selectables>.              
            </title>
          </f-element>
          
          <f-element id="fel-tsf-ver-int-data">
            <title>
              The TSF shall provide authorized users with the capability to verify the integrity of
              <selectables>
                <selectable><assignable>parts of TSF data</assignable></selectable>
                <selectable>TSF data</selectable>
              </selectables>.
            </title>
          </f-element>
          
          <f-element id="fel-tsf-ver-int">
            <title>
              The TSF shall provide authorized users with the capability to verify the integrity of <selectables>
                <selectable><assignable>parts of TSF </assignable></selectable>
                <selectable>TSF</selectable>
              </selectables>.
            </title>
            <note role="application">This SFR is a required dependency of FCS_RBG.1. It is intended to require that any DRBG implemented by the TOE undergo health testing to ensure that the random bit generation functionality has not been degraded. If the TSF supports multiple DRBGs, this SFR should be iterated to describe the self-test behavior for each.</note>
            <aactivity>
              <TSS>
                <h:p>
                  The	evaluator shall examine the TSS to ensure that it details the self-tests that are run by the TSF along with how they are run. This description should include an outline of what the tests are actually doing. The evaluator shall ensure that the TSS makes an argument that the tests are sufficient to demonstrate that the DRBG is operating correctly.
                </h:p><h:p>
                  Note that this information may also be placed in the entropy documentation specified by <xref to="entropyappendix"/>. 
                </h:p>
              </TSS>
              <Guidance>
                <h:p>
                  If a self-test can be executed at the request of an authorized user, the evaluator shall verify that the operational guidance provides instructions on how to execute that self-test.
                </h:p>
              </Guidance>
              <Tests>
                <h:p>
                  For each self-test, the evaluator shall verify that evidence is produced that the self-test is executed when specified by FPT_TST.1.1.
                </h:p><h:p>
                  If a self-test can be executed at the request of an authorized user, the evaluator shall verify that following the steps documented in the operational guidance to perform the self-test will result in execution of the self-test.
                </h:p>
              </Tests>
            </aactivity>
          </f-element>
          
        </f-component>

        <f-component cc-id="fpt_tud_ext.1" name="Trusted Update" id="fpt-tud-ext-1">
          <consistency-rationale/>
          <comp-lev>requires the capability to be provided to update the TOE firmware and software, including the ability to verify the updates prior to installation.</comp-lev>
          <management>The following actions could be considered for the management functions in FMT:<h:ul>
            <h:li>Ability to update the TOE and to verify the updates</h:li>
          </h:ul></management>
          <audit>The following actions should be auditable if FAU_GEN Security audit data generation is included in the PP/ST: <h:ul>
            <h:li>Initiation of the update process</h:li>
            <h:li>Any failure to verify the integrity of the update</h:li>
          </h:ul></audit>
          <dependencies>FCS_COP.1 Cryptographic Operation</dependencies>
          
          <f-element id="fpt-tud-ext-1-1">
            <title>
             The TSF shall provide [<h:i>authorized users</h:i>] the ability to
              query the current version of the TOE 
                <selectables>
                  <selectable>software</selectable>
                  <selectable>firmware</selectable>
                </selectables>.
            </title>
            
            <ext-comp-def-title>
              <title>The TSF shall provide <assignable>list of subjects</assignable> the ability to
                query the current version of the TOE 
                  <selectables>
                    <selectable>software</selectable>
                    <selectable>firmware</selectable>
                  </selectables>.
                </title>
            </ext-comp-def-title>
            
          </f-element>
          <f-element id="fpt-tud-ext-1-2">
            <title>
              The TSF shall provide [<h:i>authorized users</h:i>] the ability to initiate updates to TOE 
                <selectables>
                  <selectable>software</selectable>
                  <selectable>firmware</selectable>
                </selectables>.
            </title>
            
            <ext-comp-def-title>
              <title>The TSF shall provide <assignable>list of subjects</assignable> the ability to initiate updates to TOE 
                <selectables>
                  <selectable>software</selectable>
                  <selectable>firmware</selectable>
                </selectables>.</title>
            </ext-comp-def-title>
            
          </f-element>
          <f-element id="fpt-tud-ext-1-3">
            <title>
              The TSF shall verify updates to the TOE software using a [<h:i>digital signature <h:b>as specified in FCS_COP.1/SigVer</h:b></h:i>] by the manufacturer prior to installing those updates.
            </title>
            
            <ext-comp-def-title>
              <title>The TSF shall verify updates to the TOE software using a <selectables>
                <selectable>digital signature</selectable>
                <selectable>published hash</selectable>
              </selectables> by the manufacturer prior to installing those updates.</title>
            </ext-comp-def-title>
            
            <note role="application">While this component requires the TOE to implement the update functionality itself, it is acceptable to perform the cryptographic checks using functionality available in the Operational Environment.</note>
              <aactivity>
                <TSS>
                  <h:p>The evaluator shall examine the TSS to ensure that it describes information stating that
                    an authorized source signs TOE updates and will have an associated digital signature.
                    The evaluator shall examine the TSS contains a definition of an authorized source along
                    with a description of how the TOE uses public keys for the update verification
                    mechanism in the Operational Environment. The evaluator ensures the TSS contains
                    details on the protection and maintenance of the TOE update credentials.</h:p>
                    <h:p>If the Operational Environment performs the signature verification, then the evaluator
                      shall examine the TSS to ensure it describes, for each platform identified in the ST, the
                      interfaces used by the TOE to invoke this cryptographic functionality.</h:p></TSS>
                  <Guidance>
                    <h:p>The evaluator ensures that the operational guidance describes how the TOE obtains
                      vendor updates to the TOE; the processing associated with verifying the digital
                      signature of the updates (as defined in FCS_COP.1/SigVer); and the actions that take place
                      for successful and unsuccessful cases.</h:p></Guidance>
                  <CustomEA name="KMD">There are no KMD evaluation activities for this SFR.</CustomEA>
                  <Tests>
                    <h:p>
                    The evaluators shall perform the following tests (if the TOE supports multiple
                    signatures, each using a different hash algorithm, then the evaluator performs tests for
                    different combinations of authentic and unauthentic digital signatures and hashes, as
                    well as for digital signature alone): </h:p>
                    <testlist>
                      <test>The evaluator performs the version verification activity to determine the current
                        version of the TOE. After the update tests described in the following tests, the evaluator
                        performs this activity again to verify that the version correctly corresponds to that of
                        the update.</test>
                      <test>The evaluator performs the version verification activity to determine the current
                        version of the TOE. After the update tests described in the following tests, the evaluator
                        performs this activity again to verify that the version correctly corresponds to that of
                        the update.</test>
                    </testlist> </Tests>
              </aactivity>
          </f-element>
        
        </f-component>

      </section>

	</sec:SFRs>
  
  <section title="Security Assurance Requirements" id="SARs">
    <h:p>This cPP identifies the Security Assurance Requirements (SARs) to frame the extent to which
      the evaluator assesses the documentation applicable for the evaluation and performs
      independent testing. Individual evaluation activities to be performed are specified within
      each SFR.
  </h:p><h:p>
    <h:b>Note to ST authors: There is a selection in the ASE_TSS that must be completed. One cannot simply reference the SARs in this cPP.</h:b>
  </h:p><h:p>
    The general model for evaluation of TOEs against STs written to conform to this cPP is as follows: after the ST has been approved for evaluation, the ITSEF will obtain the TOE, supporting environmental IT (if required), and the administrative/user guides for the TOE. The ITSEF is expected to perform actions mandated by the Common Evaluation Methodology (CEM) for the ASE and ALC SARs. The ITSEF also performs the Evaluation Activities contained within the SD, which are intended to be an interpretation of the other CEM assurance requirements as they apply to the specific technology instantiated in the TOE. The Evaluation Activities that are captured in the SD also provide clarification as to what the developer needs to provide to demonstrate the TOE is compliant with the cPP.
  </h:p>
  <h:p>
    
    <h:table>
      <h:head><h:b><ctr ctr-type="Table" pre="Table" id="toe-sec">: TOE Security Assurance Requirements</ctr></h:b></h:head>
      <h:tr>
     <h:td><h:b>Functional Class</h:b></h:td>
     <h:td><h:b>Functional Components</h:b></h:td>
    
    </h:tr>
    <h:tr>
     <h:td rowspan="7">Security Target (ASE)</h:td>
     <h:td>Conformance Claims (ASE_CCL.1)</h:td>
    
    </h:tr>
    <h:tr>
     
     <h:td>Extended Components Definition (ASE_ECD.1)</h:td>
    </h:tr>
    <h:tr>
     <h:td>ST Introduction (ASE_INT.1)</h:td>
    </h:tr>
    <h:tr>
      <h:td>Security Objectives for the Operational Environment (ASE_OBJ.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Stated Security Requirements (ASE_REQ.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Security Problem Definition (ASE_SPD.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>TOE Summary Specification (ASE_TSS.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Development (ADV)</h:td>
      <h:td>Basic Functional Specification (ADV_FSP.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td rowspan="2">Guidance Documents (AGD)</h:td>
      <h:td>Operational User Guidance (AGD_OPE.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Preparative Procedures (AGD_PRE.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td rowspan="2">Life Cycle Support (ALC)</h:td>
      <h:td>Labeling of the TOE (ALC_CMC.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>TOE CM Coverage (ALC_CMS.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Tests (ATE)</h:td>
      <h:td>Independent Testing – Sample (ATE_IND.1)</h:td>
     </h:tr>
     <h:tr>
      <h:td>Vulnerability Assessment (AVA)</h:td>
      <h:td>Vulnerability Survey (AVA_VAN.1)</h:td>
     </h:tr>
   </h:table>
  </h:p>
    
    <section title="ASE: Security Target" id="ase">
      <h:p>The ST is evaluated as per ASE activities defined in the CEM. In addition, there may be Evaluation Activities specified within the SD that call for necessary descriptions to be included in the TSS that are specific to the TOE technology type.</h:p>
      <h:p>The SFRs in this cPP allow for conformant implementations to incorporate a wide range of acceptable key management approaches as long as basic principles are satisfied. Given the criticality of the key management scheme, this cPP requires the developer to provide a detailed description of their key management implementation. This information can be submitted as an appendix to the ST and marked proprietary, as this level of detailed information is not expected to be made publicly available. See Appendix E for details on the expectation of the developer’s Key Management Description</h:p><h:p>In addition, if the TOE includes a random bit generator Appendix D provides a description of the information expected to be provided regarding the quality of the entropy.</h:p>
      <h:p><h:b>ASE_TSS.1.1C </h:b> The TOE summary specification shall describe how the TOE meets each SFR, <h:b>including a Key Management Description (Appendix E), and <h:i>[selection: Entropy Essay, list of all of 3rd party software libraries (including version numbers), 3rd party hardware components (including model/version numbers), no other cPP specified proprietary documentation]</h:i>.</h:b></h:p>
    </section>

    <section title="ADV: Development" id="adv">
      <h:p>The design information about the TOE is contained in the guidance documentation available to the end user as well as the TSS portion of the ST, and any additional information required by this cPP that is not to be made public (e.g., Entropy Essay).</h:p>
   
      <a-component cc-id="adv_fsp.1" name="Basic Functional Specification (ADV_FSP.1)">
      <h:p>The functional specification describes the TOE Security Functions Interfaces (TSFIs). It is not necessary to have a formal or complete specification of these interfaces.
        Additionally, because TOEs conforming to this cPP may have interfaces to the Operational Environment that are not directly invoked by TOE users, there is little point 
        specifying that such interfaces be described in and of themselves since only indirect testing of such interfaces may be possible. For this cPP, the evaluation activities
        for this family focus on understanding the interfaces presented in the TSS in response to the functional requirements and the interfaces presented in the AGD documentation.
        No additional “functional specification” documentation is necessary to satisfy the evaluation activities specified.</h:p>
      <h:p>The evaluation activities are associated with the applicable SFRs. Since these are directly associated with the SFRs, the tracing in element ADV_FSP.1.2D is implicitly 
        already done and no additional documentation is necessary.</h:p>
        <a-element type="D">
          <title>The developer shall provide a functional specification.</title>
        </a-element>
        <a-element type="D">
          <title>The developer shall provide a tracing from the functional specification to the
            SFRs.</title>
          <note role="application">As indicated in the introduction to this section, the
            functional specification is comprised of the information contained in the AGD_OPE and
            AGD_PRE documentation. The developer may reference a website accessible to application
            developers and the evaluator. The evaluation activities in the functional requirements
            point to evidence that should exist in the documentation and TSS
            section; since these are directly associated with the SFRs, the tracing in element
            ADV_FSP.1.2D is implicitly already done and no additional documentation is
            necessary.
          </note>
        </a-element>   
        <a-element type="C">
          <title>The functional specification shall describe the purpose and method of use for
            each SFR-enforcing and SFR-supporting TSFI.</title>
        </a-element>
        <a-element type="C">
          <title>The functional specification shall identify all parameters associated with each
            SFR-enforcing and SFR-supporting TSFI.</title>
        </a-element>
        <a-element type="C">
          <title>The functional specification shall provide rationale for the implicit
            categorization of interfaces as SFR-non-interfering.</title>
        </a-element>
        <a-element type="C">
          <title>The tracing shall demonstrate that the SFRs trace to TSFIs in the functional specification.</title>
        </a-element>    
        <a-element type="E">
          <title>The evaluator shall confirm that the information provided meets all requirements
            for content and presentation of evidence.</title>
        </a-element>
        <a-element type="E">
          <title>The evaluator shall determine that the functional specification is an accurate
            and complete instantiation of the SFRs.</title>
          <aactivity>
            <!-- <TSS>-->
            There are no specific evaluation activities associated with these SARs, except
            ensuring the information is provided. The functional specification documentation is
            provided to support the evaluation activities described in <xref to="SFRs"/>, and
            other activities described for AGD, ATE, and AVA SARs. The requirements on the content
            of the functional specification information is implicitly assessed by virtue of the
            other evaluation activities being performed; if the evaluator is unable to perform an
            activity because there is insufficient interface information, then an adequate
            functional specification has not been provided.
            <!-- </TSS> -->
          </aactivity>
        </a-element>
      </a-component>
      
  </section>
    
  <section title="AGD: Guidance Documentation" id="agd">
    <h:p>The guidance documents will be provided with the ST. Guidance must include a description of how the IT personnel verifies that
      the Operational Environment can fulfill its role for the security functionality. The documentation should be in an informal style 
      and readable by the IT personnel.</h:p>
    <h:p>Guidance must be provided for every operational environment that the product supports as claimed in the ST. This guidance
      includes: <h:ul>
      <h:li>Instructions to successfully install the TSF in that environment; and</h:li>
      <h:li>Instructions to manage the security of the TSF as a product and as a component of the larger operational environment</h:li>
      <h:li>Instructions to provide a protected administrative capability.</h:li>
    </h:ul></h:p>
    <h:p>Guidance pertaining to particular security functionality must also be provided; requirements on such guidance are contained in
      the evaluation activities</h:p>
    <a-component cc-id="agd_ope.1" name="Operational User Guidance (AGD_OPE.1)">
      <h:p>The operational user guidance does not have to be contained in a single document. Guidance to users, administrators, and 
        integrators can be spread among documents or web pages.</h:p>
      <h:p>The developer should review the evaluation activities to ascertain the specifics of the guidance that the evaluator will be
        checking for. This will provide the necessary information for the preparation of acceptable guidance.</h:p>
      <a-element type="D">
        <title>The developer shall provide operational user guidance.</title>
        <note role="application">The operational user guidance does not have to be contained in a
          single document. Guidance to users, administrators and application developers can be
          spread among documents or web pages. Where appropriate, the guidance documentation is
          expressed in the eXtensible Configuration Checklist Description Format (XCCDF) to
          support security automation. Rather than repeat information here, the developer should
          review the evaluation activities for this component to ascertain the specifics of the
          guidance that the evaluator will be checking for. This will provide the necessary
          information for the preparation of acceptable guidance.
        </note>
      </a-element>  
      <a-element type="C">
        <title>The operational user guidance shall describe, for each user role, the
          user-accessible functions and privileges that should be controlled in a secure
          processing environment, including appropriate warnings.</title>
        <note role="application">User and administrator are to be considered in the definition
          of user role.</note>
      </a-element>
      <a-element type="C">
        <title>The operational user guidance shall describe, for each user role, how to use the
          available interfaces provided by the TOE in a secure manner.</title>
      </a-element>
      <a-element type="C">
        <title>The operational user guidance shall describe, for each user role, the available
          functions and interfaces, in particular all security parameters under the control of
          the user, indicating secure values as appropriate.</title>
      </a-element>
      <a-element type="C">
        <title>The operational user guidance shall, for each user role, clearly present each
          type of security-relevant event relative to the user-accessible functions that need to
          be performed, including changing the security characteristics of entities under the
          control of the TSF.</title>
      </a-element>
      <a-element type="C">
        <title>The operational user guidance shall identify all possible modes of operation of
          the TOE (including operation following failure or operational
          error), their consequences, and implications for maintaining secure operation.</title>
      </a-element>
      <a-element type="C">
        <title>The operational user guidance shall, for each user role, describe the security
          measures to be followed in order to fulfill the security objectives for the
          operational environment as described in the ST.</title>
      </a-element>
      <a-element type="C">
        <title>The operational user guidance shall be clear and reasonable.</title>
      </a-element>     
      <a-element type="E">
        <title>The evaluator shall confirm that the information provided meets all requirements
          for content and presentation of evidence.</title>
        <aactivity>
          <!--<Guidance>-->
          <h:p>
            Some of the contents of the operational guidance will be verified by the
            evaluation activities in <xref to="SFRs"/> and evaluation of the TOE
            according to the <xref to="bibCEM"/>. The following additional
            information is also required.
          </h:p><h:p>
            If cryptographic functions are provided by the 
            TOE, the operational guidance shall contain instructions for 
            configuring the cryptographic engine associated with the evaluated configuration of 
            the TOE. It shall provide a warning to the administrator that use of 
            other cryptographic engines was not evaluated nor tested during the CC evaluation of 
            the TOE.
          </h:p><h:p>
            The documentation must describe the process for verifying 
            updates to the TOE by verifying a digital signature – this may
            be done by the TOE or the underlying platform. 
          </h:p><h:p>
            The evaluator shall verify that this process includes the following steps: </h:p>
          <h:ul>      
            <h:li>Instructions for obtaining the 
              update itself. This should include instructions for making the update accessible to 
              the TOE (e.g., placement in a specific directory).</h:li>    
            <h:li>Instructions for initiating the update process, as well as discerning whether the process was 
              successful or unsuccessful. This includes generation of the digital signature. 
              The TOE will likely contain security functionality that does not 
              fall in the scope of evaluation under this PP. The operational guidance shall make it 
              clear to an administrator which security functionality is covered by the evaluation 
              activities.</h:li></h:ul>
          <!--	      </Guidance> -->
        </aactivity>
      </a-element>
    </a-component>
    
    <a-component cc-id="agd_pre.1" name="Preparative Procedures (AGD_PRE.1)">As with the operational guidance, the developer should look to the Evaluation Activities to determine the required content with respect to preparative procedures.
      <a-element type="D">
        <title>The developer shall provide the TOE, including its preparative procedures.</title>
        <note role="application">
          As with the operational guidance, the developer should look to
          the evaluation activities to determine the required content with respect to preparative
          procedures.</note>
      </a-element>     
      <a-element type="C">
        <title>The preparative procedures shall describe all the steps necessary for secure
          acceptance of the delivered TOE in accordance with the developer's
          delivery procedures.</title>
      </a-element>
      <a-element type="C">
        <title>The preparative procedures shall describe all the steps necessary for secure
          installation of the TOE and for the secure preparation of the
          operational environment in accordance with the security objectives for the operational
          environment as described in the ST.</title>
      </a-element>    
      <a-element type="E">
        <title>The evaluator shall confirm that the information provided meets all requirements
          for content and presentation of evidence.</title>
      </a-element>
      <a-element type="E">
        <title>The evaluator shall apply the preparative procedures to confirm that the TOE
          can be prepared securely for operation.</title>
        <aactivity>
          <!-- <Guidance> -->
          As indicated in the introduction above, there are significant expectations
          with respect to the documentation—especially when configuring the operational
          environment to support TOE functional requirements. The evaluator 
          shall check to ensure that the guidance provided for the TOE 
          adequately addresses all platforms claimed for the TOE in the ST.
          <!--</Guidance> -->
        </aactivity>
      </a-element>
    </a-component>
    
  </section>
  <section title="Class ALC: Life-cycle Support" id="alc">
    At the assurance level provided for TOEs conformant to this cPP, life-cycle support is limited to end-user-visible aspects of the life-cycle, rather than an examination of the TOE vendor’s development and configuration management process. This is not meant to diminish the critical role that a developer’s practices play in contributing to the overall trustworthiness of a product; rather, it is a reflection on the information to be made available for evaluation at this assurance level.
    <a-component cc-id="alc_cmc.1" name="Labelling of the TOE (ALC_CMC.1)">
      This component is targeted at identifying the TOE such that it can be distinguished from other products or versions from the same vendor and can be easily specified when being procured by an end user. The evaluator performs the CEM work units associated with ALC_CMC.1.
      <a-element type="D">
        <title>The developer shall provide the TOE and a reference for the TOE.</title>
      </a-element>
      <a-element type="C">
        <title>The application shall be labeled with a unique reference.</title>
        <note role="application">
          Unique reference information includes:
          <h:ul>
            <h:li>Application Name</h:li>
            <h:li>Application Version</h:li>
            <h:li>Application Description</h:li>
            <h:li>Platform on which Application Runs</h:li>
            <h:li>Software Identification (SWID) tags, if available</h:li>
          </h:ul>
        </note>
      </a-element>
      <a-element type="E">
        <title>The evaluator shall confirm that the information provided meets all
          requirements for content and presentation of evidence.</title>
        <aactivity>
          <!-- <TSS>--> 
          The evaluator shall check the ST to ensure that it contains an identifier
          (such as a product name/version number) that specifically identifies the version that
          meets the requirements of the ST. Further, the evaluator shall check the operational guidance
          and TOE samples received for testing to ensure that the version
          number is consistent with that in the ST. If the vendor maintains a website
          advertising the TOE, the evaluator shall examine the information on 
          the website to ensure that the information in the ST is sufficient to distinguish the
          product.
          <!--	    </TSS> -->
        </aactivity>
      </a-element>
    </a-component>
    
    <a-component cc-id="alc_cms.1" name="TOE CMS Coverage (ALC_CMS.1)">
      Given the scope of the TOE and its associated evaluation evidence requirements, the evaluator performs the CEM work units associated with ALC_CMS.1.
      <a-element type="D">
        <title>The developer shall provide a configuration list for the TOE.</title>
      </a-element>
      <a-element type="C">
        <title>The configuration list shall include the following: the TOE
          itself; and the evaluation evidence required by the SARs.</title>
      </a-element>
      <a-element type="C">
        <title>The configuration list shall uniquely identify the configuration items.</title>
      </a-element>
      <a-element type="E">
        <title>The evaluator shall confirm that the information provided meets all requirements
          for content and presentation of evidence.</title>
        <aactivity>
          <!-- <TSS> -->
          The "evaluation evidence required by the SARs" in this PP is limited to the
          information in the ST coupled with the guidance provided to administrators and users
          under the AGD requirements. By ensuring that the TOE is specifically
          identified and that this identification is consistent in the ST and in the AGD
          guidance (as done in the evaluation activity for ALC_CMC.1), the evaluator implicitly
          confirms the information required by this component. Life-cycle support is targeted
          aspects of the developer’s life-cycle and instructions to providers of applications
          for the developer’s devices, rather than an in-depth examination of the TSF
          manufacturer’s development and configuration management process.
          This is not meant to diminish the critical role that a developer’s practices play in
          contributing to the overall trustworthiness of a product; rather, it’s a reflection on
          the information to be made available for evaluation.
          <!--	      </TSS>
				<Guidance> -->
          <h:p>
            The evaluator shall ensure that the developer has identified (in guidance documentation for application
            developers concerning the targeted platform) one or more development environments
            appropriate for use in developing applications for the developer’s platform. For each
            of these development environments, the developer shall provide information on how to
            configure the environment to ensure that buffer overflow protection mechanisms in the
            environment(s) are invoked (e.g., compiler flags). The evaluator shall ensure that
            this documentation also includes an indication of whether such protections are on by
            default, or have to be specifically enabled. The evaluator shall ensure that the 
            TSF is uniquely identified (with respect to other products from the 
            TSF vendor), and that documentation provided by the developer in 
            association with the requirements in the ST is associated with the 
            TSF using this unique identification. </h:p> 
          <!-- </Guidance>--> 
        </aactivity>
      </a-element>
    </a-component>
    
    <a-component cc-id="alc_flr.1" name="Basic Flaw Remediation (ALC_FLR.1)" status="optional">
      <a-element type="D">
        <title>The developer shall document and provide flaw remediation procedures addressed to TOE
          developers.</title>
      </a-element>
      <a-element type="C">
        <title>The flaw remediation procedures documentation shall describe the procedures used to
          track all reported security flaws in each release of the TOE.</title>
      </a-element>
      <a-element type="C">
        <title>The flaw remediation procedures shall require that a description of the nature and effect
          of each security flaw be provided, as well as the status of finding a correction to that flaw.</title>
      </a-element>
      <a-element type="C">
        <title>The flaw remediation procedures shall require that corrective actions be identified for
          each of the security flaws.</title>
      </a-element>
      <a-element type="C">
        <title>The flaw remediation procedures documentation shall describe the methods used to
          provide flaw information, corrections and guidance on corrective actions to TOE users.</title>
      </a-element>
      <a-element type="E">
        <title>The evaluator shall confirm that the information provided meets all requirements for
          content and presentation of evidence.</title>
        <aactivity>
          <!-- <TSS> --> 
          The evaluator shall inspect the TSS and verify it identifies how to access the flaw remediation procedures.
          <!--</TSS>
				<Guidance> 
					<h:p>
						None.
					 </Guidance>--> 
        </aactivity> 
      </a-element>  
    </a-component>
    
    <a-component cc-id="alc_flr.2" name="Flaw Reporting Procedures (ALC_FLR.2)" status="optional">
      <a-element type="D">
        <title>
          The developer shall document and provide flaw remediation procedures addressed to TOE
          developers.</title>
      </a-element>
      <a-element type="D">
        <title>
          The developer shall establish a procedure for accepting and acting upon all reports of
          security flaws and requests for corrections to those flaws.
        </title>
      </a-element>
      <a-element type="D">
        <title>
          The developer shall provide flaw remediation guidance addressed to TOE users.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation procedures documentation shall describe the procedures used to track all
          reported security flaws in each release of the TOE.</title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation procedures shall require that a description of the nature and effect of each
          security flaw be provided, as well as the status of finding a correction to that flaw.</title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation procedures shall require that corrective actions be identified for each of the
          security flaws.</title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation procedures documentation shall describe the methods used to provide flaw
          information, corrections and guidance on corrective actions to TOE users.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation procedures shall describe a means by which the developer receives
          from TOE users reports and enquiries of suspected security flaws in the TOE.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The procedures for processing reported security flaws shall ensure that any reported
          flaws are remediated and the remediation procedures issued to TOE users.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The procedures for processing reported security flaws shall provide safeguards that any
          corrections to these security flaws do not introduce any new flaws.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation guidance shall describe a means by which TOE users report to the
          developer any suspected security flaws in the TOE.
        </title>
      </a-element>
      <a-element type="E">
        <title>
          The evaluator shall confirm that the information provided meets all requirements for content and
          presentation of evidence.</title>
        <aactivity>
          <!-- <TSS> -->
          The evaluator shall inspect the TSS and verify it identifies how to access the flaw remediation procedures.
          <!-- </TSS>
				<Guidance> -->
          <h:p>
            The evaluator shall inspect the guidance document and verify it describes how to access the flaw remediation guidance.</h:p>
          <!-- </Guidance>--> 
        </aactivity> 
      </a-element>  
    </a-component>
    
    <a-component cc-id="alc_flr.3" name="Systematic Flaw Remediation (ALC_FLR.3)" status="optional">
      <a-element type="D">
        <title>
          The developer shall document and provide flaw remediation procedures addressed to TOE
          developers.
        </title>
      </a-element>
      <a-element type="D">
        <title>
          The developer shall establish a procedure for accepting and acting upon all reports of security
          flaws and requests for corrections to those flaws.
        </title>
      </a-element>
      <a-element type="D">
        <title>
          The developer shall provide flaw remediation guidance addressed to TOE users.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation procedures documentation shall describe the procedures used to track all
          reported security flaws in each release of the TOE.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation procedures shall require that a description of the nature and effect of each
          security flaw be provided, as well as the status of finding a correction to that flaw.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation procedures shall require that corrective actions be identified for each of the
          security flaws.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation procedures documentation shall describe the methods used to provide flaw
          information, corrections and guidance on corrective actions to TOE users.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation procedures shall describe a means by which the developer receives from
          TOE users reports and enquiries of suspected security flaws in the TOE.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation procedures shall include a procedure requiring timely response and
          the automatic distribution of security flaw reports and the associated corrections to
          registered users who might be affected by the security flaw.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The procedures for processing reported security flaws shall ensure that any reported flaws are
          remediated and the remediation procedures issued to TOE users.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The procedures for processing reported security flaws shall provide safeguards that any
          corrections to these security flaws do not introduce any new flaws.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation guidance shall describe a means by which TOE users report to the
          developer any suspected security flaws in the TOE.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation guidance shall describe a means by which TOE users may register
          with the developer, to be eligible to receive security flaw reports and corrections.
        </title>
      </a-element>
      <a-element type="C">
        <title>
          The flaw remediation guidance shall identify the specific points of contact for all reports
          and enquiries about security issues involving the TOE.
        </title>
      </a-element>
      <a-element type="E">
        <title>
          The evaluator shall confirm that the information provided meets all requirements for content and
          presentation of evidence.</title>
        <aactivity>
          <!-- <TSS> -->
          The evaluator shall inspect the TSS and verify it identifies how to access the flaw remediation procedures.
          <!--</TSS>
				<Guidance> -->
          <h:p>
            The evaluator shall inspect the guidance document and verify it describes how to access the flaw remediation guidance.
          </h:p>
          <!-- </Guidance>--> 
        </aactivity> 
      </a-element>  
    </a-component>
  </section>

  <section id="class-ate" title="Class ATE: Tests">
    Testing is specified for functional aspects of the system as well as aspects that take advantage of design or implementation weaknesses. The former is done through the ATE_IND family, while the latter is through the AVA_VAN family. For this cPP, testing is based on advertised functionality and interfaces with dependency on the availability of design information. One of the primary outputs of the evaluation process is the test report as specified in the following requirements.
    <a-component cc-id="ate_ind.1" name="Independent Testing – Conformance (ATE_IND.1)">
      Testing is performed to confirm the functionality described in the TSS as well as the operational guidance (includes “evaluated configuration” instructions). The focus of the testing is to confirm that the requirements specified in Section 5 are being met. The Evaluation Activities in the SD identify the specific testing activities necessary to verify compliance with the SFRs. The evaluator produces a test report documenting the plan for and results of testing, as well as coverage arguments focused on the platform/TOE combinations that are claiming conformance to this cPP.
      <a-element type="D">
        <title>The developer shall provide the TOE for testing.</title>
        <note role="application">The developer must provide at least one product instance of the TOE for complete testing on at least one
          platform regardless of equivalency. See the Equivalency Appendix for more details.
        </note>
      </a-element>         
      <a-element type="C">
        <title>The TOE shall be suitable for testing.</title>
      </a-element>  
      <a-element type="E">
        <title>The evaluator <h:i>shall confirm</h:i> that the information provided meets all
          requirements for content and presentation of evidence.</title>
      </a-element>
      <a-element type="E">
        <title>The evaluator shall test a subset of the TSF to confirm
          that the TSF operates as specified.</title>
        <note role="application">The evaluator should test the application on the most current
          fully patched version of the platform.</note>
        <aactivity>
          <h:p>
            The evaluator shall prepare a test plan and report documenting the testing
            aspects of the system, including any application crashes during testing. The evaluator
            shall determine the root cause of any application crashes and include that information
            in the report. The test plan covers all of the testing actions contained in
            the <xref to="bibCEM"/> and the body of this PP’s evaluation activities.
          </h:p><h:p>
            While it is not necessary to have one test case per test listed in an evaluation activity, the
            evaluator must document in the test plan that each applicable testing requirement in
            the ST is covered. The test plan identifies the platforms to be tested, and for those
            platforms not included in the test plan but included in the ST, the test plan provides
            a justification for not testing the platforms. This justification must address the
            differences between the tested platforms and the untested platforms, and make an
            argument that the differences do not affect the testing to be performed. It is not
            sufficient to merely assert that the differences have no effect; rationale must be
            provided. If all platforms claimed in the ST are tested, then no rationale is
            necessary. The test plan describes the composition of each platform to be tested, and
            any setup that is necessary beyond what is contained in the AGD documentation. It
            should be noted that the evaluator is expected to follow the AGD documentation for
            installation and setup of each platform either as part of a test or as a standard
            pre-test condition. This may include special test drivers or tools. For each driver or
            tool, an argument (not just an assertion) should be provided that the driver or tool
            will not adversely affect the performance of the functionality by the TOE and its platform.
          </h:p><h:p>
            This also includes the configuration of the
            cryptographic engine to be used. The cryptographic algorithms implemented by this
            engine are those specified by this PP and used by the cryptographic protocols being
            evaluated (e.g., SSH). The test plan identifies high-level test objectives
            as well as the test procedures to be followed to achieve those objectives. These
            procedures include expected results. 
          </h:p><h:p>
            The test report (which could just be an annotated
            version of the test plan) details the activities that took place when the test
            procedures were executed, and includes the actual results of the tests. This shall be
            a cumulative account, so if there was a test run that resulted in a failure; a fix
            installed; and then a successful re-run of the test, the report would show a “fail”
            and “pass” result (and the supporting details), and not just the “pass” result.
          </h:p>
        </aactivity>
      </a-element>
    </a-component>

  </section>
  <section id="class-ava" title="Class AVA: Vulnerability Assessment">
    For the current generation of this cPP, the iTC is expected to survey open sources to discover what vulnerabilities have been 
    discovered in these types of products and provide that content into the AVA_VAN discussion. In most cases, these vulnerabilities
    will require sophistication beyond that of a basic attacker. This information will be used in the development of future Protection
    Profiles.<h:br/><h:br/>
    If the TOE is a Network Attached Storage (NAS) device, the evaluator shall verify as part of the vulnerability assessment that 
    remote management services are either not present or can be fully disabled.<h:br/><h:br/>
    
    <a-component cc-id="ava_van.1" name="Vulnerability Survey (AVA_VAN.1)">
      <h:b>Vulnerability Analysis</h:b><h:br/><h:br/>
      <h:b>Sources of Vulnerability Information</h:b><h:br/><h:br/>
        CEM Work Unit AVA_VAN.1-3 is supplemented here to provide a better-defined set of flaws to 
        investigate and procedures to follow based on this particular technology. Terminology used is based on the flaw hypothesis
        methodology, where the evaluation team hypothesizes flaws and then either proves or disproves those flaws (a flaw is equivalent
        to a “potential vulnerability” as used in the CEM). Flaws are categorized into four “types” depending on how they are 
        formulated: <h:ol>
          <h:li>
            A list of flaw hypotheses applicable to the technology described by the cPP derived from public sources as documented in 
            the Type 1 Hypotheses section—this fixed set has been agreed to by the iTC. Additionally, this will be supplemented with entries for a set
            of public sources (as indicated below) that are directly applicable to the TOE or its identified components (as defined by 
            the process in the Type 1 Hypotheses section below); this is to ensure that the evaluators include in their assessment applicable entries 
            that have been discovered since the cPP was published;
          </h:li>
          <h:li>
            A list of flaw hypotheses contained in this document that are derived from lessons learned specific to that technology and
            other iTC input (that might be derived from other open sources and vulnerability databases, for example) as documented in 
            the Type 2 Hypotheses section;
          </h:li>
          <h:li>
            A list of flaw hypotheses derived from information available to the evaluators; this includes the baseline evidence 
            provided by the vendor described in this document (documentation associated with EAs, documentation described in
            the Vulnerability Survey section), as well as other information (public and/or based on evaluator experience) as documented in the Type 3 Hypotheses
            section; and
          </h:li>
          <h:li>
            A list of flaw hypotheses that are generated through the use of iTC-defined tools (e.g., nmap, protocol testers) and their
            application is specified in the Type 4 Hypotheses section.
          </h:li>
        </h:ol>
      <h:b><h:i>Type 1 Hypotheses-Public-Vulnerability-Based</h:i></h:b><h:br/><h:br/>
        The following list of public sources of vulnerability information was selected by the iTC:
        <h:ol type="a">
          <h:li>Search Common Vulnerabilities and Exposures: http://cve.mitre.org/cve/</h:li>
          <h:li>Search the National Vulnerability Database: https://nvd.nist.gov/</h:li>
          <h:li>Search US-CERT: http://www.kb.cert.org/vuls/html/search</h:li>
        </h:ol>
        The list of sources above was searched with the following search terms:
        <h:ul>
          <h:li>General (for all) <h:ul>
            <h:li>Product name</h:li>
            <h:li>Underlying components (e.g., OS, software libraries (crypto libraries), chipsets)</h:li>
            <h:li>Drive encryption, disk encryption</h:li>
            <h:li>Key destruction and sanitization</h:li>
          </h:ul></h:li>          
          <h:li>For Software FDE (AA or EE) <h:ul>
            <h:li>Key caching</h:li>
          </h:ul></h:li></h:ul>
      In order to successfully complete this activity, the evaluator will use the developer provided list of all of third party library
      information that is used as part of their product, along with the version and any other identifying information (this is required
      in the cPP as part of the ASE_TSS.1.1C requirement). This applies to hardware (including chipsets, etc.) that a vendor utilizes 
      as part of their TOE. This TOE-unique information will be used in the search terms the evaluator uses in addition to those listed
      above.<h:br/><h:br/>
      The evaluator will also consider the requirements that are chosen and the appropriate guidance that is tied to each requirement.<h:br/><h:br/>
      In order to supplement this list, the evaluators shall also perform a search on the sources listed above to determine a list of 
      potential flaw hypotheses that are more recent that the publication date of the cPP, and those that are specific to the TOE and
      its components as specified by the additional documentation mentioned above. Any duplicates – either in a specific entry, or in
      the flaw hypothesis that is generated from an entry from the same or a different source – can be noted and removed from 
      consideration by the evaluation team.<h:br/><h:br/>
      As part of type 1 flaw hypothesis generation for the specific components of the TOE, the evaluator shall also search the 
      component manufacturer’s websites to determine if flaw hypotheses can be generated on this basis (for instance, if security 
      patches have been released for the version of the component being evaluated, the subject of those patches may form the basis 
      for a flaw hypothesis).<h:br/><h:br/>
      <h:b><h:i>Type 2 Hypotheses-iTC-Sourced</h:i></h:b><h:br/><h:br/>
      There are no type 2 hypotheses for AA.
      <h:br/><h:br/>
      <h:b><h:i>Type 3 Hypotheses-Evaluation-Team-Generated</h:i></h:b><h:br/><h:br/>
          The iTC has leveraged the expertise of the developers and the evaluation labs to diligently develop the appropriate search
          terms and vulnerability databases. They have also thoughtfully considered the iTC-sourced hypotheses the evaluators should
          use based upon the applicable use case and the threats to be mitigated by the SFRs. Therefore, it is the intent of the iTC,
          for the evaluation to focus all effort on the Type 1 and Type 2 Hypotheses and has decided that Type 3 Hypotheses are not 
          necessary.<h:br/><h:br/>
          However, if the evaluators discover a Type 3 potential flaw that they believe should be considered, they should work with 
          their Certification Body to determine the feasibility of pursuing the hypothesis. The Certification Body may determine 
          whether the potential flaw hypotheses is worth submitting to the iTC for consideration as Type 2 hypotheses in future drafts 
          of the cPP/SD.<h:br/><h:br/>
      <h:b><h:i>Type 4 Hypotheses-Evaluation-Team-Generated</h:i></h:b><h:br/><h:br/>
          The iTC has called out several tools that should be used during the Type 2 hypotheses process. Therefore, the use of any tools
          is covered within the Type 2 construct and the iTC does not see any additional tools that are necessary. The use case for 
          Version 2 of this cPP is rather straightforward – the device is found in a powered down state and has not been subjected to
          revisit/evil maid attacks. Since that is the use case, the iTC has also assumed there is a trusted channel between the AA and
          EE. Since the use case is so narrow, and is not a typical model for penetration or fuzzing testing, the normal types of 
          testing do not apply. Therefore, the relevant types of tools are referenced in Type 2.<h:br/><h:br/>
      <h:b>Process for Evaluator Vulnerability Analysis</h:b><h:br/><h:br/>
          As flaw hypotheses are generated from the activities described above, the evaluation team will disposition them; that is, 
          attempt to prove, disprove, or determine the non-applicability of the hypotheses. This process is as follows.
          The evaluator will refine each flaw hypothesis for the TOE and attempt to disprove it using the information provided by the
          developer or through penetration testing. During this process, the evaluator is free to interact directly with the developer
          to determine if the flaw exists, including requests to the developer for additional evidence (e.g., detailed design 
          information, consultation with engineering staff); however, the CB should be included in these discussions. Should the
          developer object to the information being requested as being not compatible with the overall level of the evaluation 
          activity/cPP and cannot provide evidence otherwise that the flaw is disproved, the evaluator prepares an appropriate set of
          materials as follows:
          <h:ul>
            <h:li>The source documents used in formulating the hypothesis, and why it represents a potential compromise against a 
              specific TOE function;</h:li>
            <h:li>An argument why the flaw hypothesis could not be proven or disproved by the evidence provided so far; and</h:li>
            <h:li>The type of information required to investigate the flaw hypothesis further.</h:li>
          </h:ul>
          The Certification Body (CB) will then either approve or disapprove the request for additional information. If approved, the
          developer provides the requested evidence to disprove the flaw hypothesis (or, of course, acknowledge the flaw).<h:br/><h:br/>
          For each hypothesis, the evaluator will note whether the flaw hypothesis has been successfully disproved, successfully proven
          to have identified a flaw, or requires further investigation. It is important to have the results documented as outlined in 
          the Reporting section below.
          If the evaluator finds a flaw, the evaluator must report these flaws to the developer. All reported flaws must be addressed 
          as follows:<h:br/><h:br/>
          If the developer confirms that the flaw exists and that it is exploitable at Basic Attack Potential, then a change is made by
          the developer, and the resulting resolution is agreed by the evaluator and noted as part of the evaluation report.<h:br/><h:br/>
          If the developer, the evaluator, and the CB agree that the flaw is exploitable only above Basic Attack Potential and does not 
          require resolution for any other reason, then no change is made and the flaw is noted as a residual vulnerability in the 
          CB-internal report (ETR).<h:br/><h:br/>
          If the developer and evaluator agree that the flaw is exploitable only above Basic Attack Potential, but it is deemed critical
          to fix because of technology-specific or cPP-specific aspects such as typical use cases or operational environments, then a 
          change is made by the developer, and the resulting resolution is agreed by the evaluator and noted as part of the evaluation
          report.<h:br/><h:br/>
          Disagreements between evaluator and vendor regarding questions of the existence of a flaw, its attack potential, or whether
          it should be deemed critical to fix are resolved by the CB.<h:br/><h:br/>
          Any testing performed by the evaluator shall be documented in the test report as outlined
          in the Reporting section below.<h:br/><h:br/>
          As indicated in the Reporting section, the public statement with respect to vulnerability analysis that is performed on TOEs 
          conformant to the cPP is constrained to coverage of flaws associated with Types 1 and 2 (defined in the Sources of 
          Vulnerability Information section) flaw hypotheses only. The fact that the iTC generates these candidate hypotheses indicates 
          these must be addressed.<h:br/><h:br/>
      <h:b>Reporting</h:b><h:br/><h:br/>
          The evaluators shall produce two reports on the testing effort; one that is public-facing (that is, included in the 
          non-proprietary evaluation report, which is a subset of the Evaluation Technical Report (ETR)), and the complete ETR that is 
          delivered to the overseeing CB.<h:br/><h:br/>
          The public-facing report contains:<h:ul>
          <h:li>The flaw identifiers returned when the procedures for searching public sources were followed according to instructions in
            the Type 1 Hypotheses section;</h:li>
            <h:li>A statement that the evaluators have examined the Type 1 flaw hypotheses specified
              in this document in the 
              Type 1 Hypotheses section (i.e. the flaws listed in the previous bullet) and the Type 2 flaw hypotheses specified in the 
              the Type 2 Hypotheses section</h:li>
          </h:ul>
          No other information is provided in the public-facing report.<h:br/><h:br/>
          The internal CB report contains, in addition to the information in the public-facing report:<h:ul>
            <h:li>a list of all of the flaw hypotheses generated (cf. AVA_VAN.1-4);</h:li>
            <h:li>the evaluator penetration testing effort, outlining the testing approach, configuration, depth and results (cf. 
              AVA_VAN.1-9);</h:li>
            <h:li>all documentation used to generate the flaw hypotheses (in identifying the documentation used in coming up with the
              flaw hypotheses, the evaluation team must characterize the documentation so that a reader can determine whether it is 
              strictly required in this document, and the nature of the documentation (design information, developer 
              engineering notebooks, etc.));</h:li>
            <h:li>the evaluator shall report all exploitable vulnerabilities and residual vulnerabilities, detailing for each:
              <h:ol type="a">
              <h:li>its source (e.g. CEM activity being undertaken when it was conceived, known to the evaluator, read in a publication)</h:li>
              <h:li>the SFR(s) not met;</h:li>
              <h:li>a description;</h:li>
              <h:li>whether it is exploitable in its operational environment or not (i.e. exploitable or residual).</h:li>
              <h:li>the amount of time, level of expertise, level of knowledge of the TOE, level of opportunity and the equipment 
                required to perform the identified vulnerabilities (cf. AVA_VAN.1-11);</h:li>
              <h:li>how each flaw hypothesis was resolved (this includes whether the original flaw hypothesis was confirmed or 
                disproved, and any analysis relating to whether a residual vulnerability is exploitable by an attacker with Basic
                Attack Potential) (cf. AVA_VAN1-10); and</h:li>
              <h:li>in the case that actual testing was performed in the investigation (either as part of flaw hypothesis generation
                using tools specified by the iTC in the Type 4 Hypotheses section, or in proving or disproving a particular flaw) the steps followed in
                setting up the TOE (and any required test equipment); executing the test; post-test procedures; and the actual results
                (to a level of detail that allow repetition of the test, including the following:<h:ul>
              <h:li>identification of the potential vulnerability the TOE is being tested for;</h:li>
              <h:li>instructions to connect and setup all required test equipment as required to conduct the penetration test;</h:li>
              <h:li>instructions to establish all penetration test prerequisite initial conditions;</h:li>
              <h:li>instructions to stimulate the TSF;</h:li>
              <h:li>instructions for observing the behaviour of the TSF;</h:li>
              <h:li>descriptions of all expected results and the necessary analysis to be performed on the observed behaviour for comparison against expected results;</h:li>
              <h:li>instructions to conclude the test and establish the necessary post-test state for the TOE. (cf. AVA_VAN.1-6, AVA_VAN.1-8).</h:li>
                </h:ul>
              </h:li>
              </h:ol>
            </h:li>
          </h:ul>
          
      <a-element type="D">
        <title>The developer shall provide the TOE for testing.</title>
      </a-element>	
      <a-element type="C">
        <title>The application shall be suitable for testing.</title>
        <note role="application">Suitability for testing means not being obfuscated or
          packaged in such a way as to disrupt either static or dynamic analysis by the
          evaluator.</note>
      </a-element>  
      <a-element type="E">
        <title>The evaluator shall confirm that the information provided meets all requirements
          for content and presentation of evidence.</title>
      </a-element>
      <a-element type="E">
        <title>The evaluator shall perform a search of public domain sources to identify
          potential vulnerabilities in the TOE.</title>
        <note role="application">Public domain sources include the Common Vulnerabilities 
          and Exposures (CVE) dictionary for publicly known vulnerabilities.  Public domain
          sources also include sites which provide free checking of files for viruses.</note>
        <!-- their Usage statement does not permit us to mention VirusTotal by name without permission -->
      </a-element>
      <a-element type="E">
        <title>The evaluator shall conduct penetration testing, based on the identified
          potential vulnerabilities, to determine that the TOE is resistant to
          attacks performed by an attacker possessing Basic attack potential.</title>
        <aactivity>
          <h:p>
            The evaluator shall generate a report to document their findings with respect to this 
            requirement. This report could physically be part of the overall test report mentioned in
            ATE_IND, or a separate document. The evaluator performs a search of public information to find
            vulnerabilities that have been found in similar applications with a particular focus on network 
            protocols the application uses and document formats it parses.
          </h:p><h:p>
            The evaluator documents the sources consulted and the vulnerabilities found in the report.
          </h:p><h:p>
            For each vulnerability found, the evaluator either provides a rationale with respect to its 
            non-applicability, or the evaluator formulates a test (using the guidelines provided in ATE_IND)
            to confirm the vulnerability, if suitable. Suitability is determined by assessing the attack 
            vector needed to take advantage of the vulnerability. If exploiting the vulnerability requires
            expert skills and an electron microscope, for instance, then a test would not be suitable and 
            an appropriate justification would be formulated.
          </h:p>
          <h:div>
            <depends ref="windows"/>
            <depends ref="linux"/>
            <depends ref="mac"/>
            <depends ref="Solaris"/>	
            The evaluator shall also run a virus scanner with the most current virus definitions against the 
            application files and verify that no files are flagged as malicious.
          </h:div>
        </aactivity>
      </a-element>     
    </a-component>
  </section>
  </section>
  
</sec:Security_Requirements>   
<!-- Appendix A includes optional, objective, and implementation-dependent requirements -->
<!-- Appendix B is selection-based requirements -->
<!-- Appendix C: Extended Component Definitions -->
<appendix id="apndx-entropy" title="Entropy Documentation and Assessment">
  <h:p><h:i>This is an optional appendix in the cPP, and only applies if the TOE is providing deterministic random bit generation services, e.g. the ST claims FCS_RBG.1.</h:i></h:p>
  <h:p>This appendix describes the required supplementary information for each entropy source used by the TOE.</h:p>
  <h:p>The documentation of the entropy sources should be detailed enough that, after reading, the evaluator will thoroughly understand the entropy source and why it can be relied upon to provide sufficient entropy. This documentation should include multiple detailed sections: design description, entropy justification, operating conditions, and health testing. This documentation is not required to be part of the TSS in the public facing ST. 
    </h:p>
    <section id="sec-ent-design" title="Design Description">
      <h:p>Documentation shall include the design of each entropy source as a whole, including the interaction of all entropy source components. Any information that can be shared regarding the design should also be included for any third-party entropy sources that are included in the product. </h:p>
      <h:p>The documentation will describe the operation of the entropy source to include how entropy is produced, and how unprocessed (raw) data can be obtained from within the entropy source for testing purposes. The documentation should walk through the entropy source design indicating where the entropy comes from, where the entropy output is passed next, any post-processing of the raw outputs (hash, XOR, etc.), if/where it is stored, and finally, how it is output from the entropy source. Any conditions placed on the process (e.g., blocking) should also be described in the entropy source design. Diagrams and examples are encouraged.</h:p>
      <h:p>This design must also include a description of the content of the security boundary of the entropy source and a description of how the security boundary ensures that an adversary outside the boundary cannot affect the entropy rate.</h:p>
      <h:p>If implemented, the design description shall include a description of how third-party applications can add entropy to the RBG. A description of any RBG state saving between power-off and power-on shall be included.</h:p>
    </section>
    <section id="sec-ent-justification" title="Entropy Justification">
      <h:p>There should be a technical argument for where the unpredictability in the source comes from and why there is confidence in the entropy source delivering sufficient entropy for the uses made of the RBG output (by this particular TOE). This argument will include a description of the expected min-entropy rate (i.e. the minimum entropy (in bits) per bit or byte of source data) and explain that sufficient entropy is going into the TOE randomizer seeding process. This discussion will be part of a justification for why the entropy source can be relied upon to produce bits with entropy.</h:p>
      <h:p>The amount of information necessary to justify the expected min-entropy rate depends on the type of entropy source included in the product.</h:p>
      <h:p>For developer provided entropy sources, in order to justify the min-entropy rate, it is expected that a large number of raw source bits will be collected, statistical tests will be performed, and the min-entropy rate determined from the statistical tests. While no particular statistical tests are required at this time, it is expected that some testing is necessary in order to determine the amount of min-entropy in each output. </h:p>
      <h:p>For third party provided entropy sources, in which the TOE vendor has limited access to the design and raw entropy data of the source, the documentation will indicate an estimate of the amount of min-entropy obtained from this third-party source. It is acceptable for the vendor to “assume” an amount of min-entropy, however, this assumption must be clearly stated in the documentation provided. In particular, the min-entropy estimate must be specified and the assumption included in the ST.</h:p>
      <h:p>Regardless of type of entropy source, the justification will also include how the DRBG is initialized with the entropy stated in the ST, for example by verifying that the min-entropy rate is multiplied by the amount of source data used to seed the DRBG or that the rate of entropy expected based on the amount of source data is explicitly stated and compared to the statistical rate. If the amount of source data used to seed the DRBG is not clear or the calculated rate is not explicitly related to the seed, the documentation will not be considered complete.</h:p>
      <h:p>The entropy justification shall not include any data added from any third-party application or from any state saving between restarts.</h:p>
    </section>
    <section id="sec-ent-oc" title="Operating Conditions">The entropy rate may be affected by conditions outside the control of the entropy source itself. For example, voltage, frequency, temperature, and elapsed time after power-on are just a few of the factors that may affect the operation of the entropy source. As such, documentation will also include the range of operating conditions under which the entropy source is expected to generate random data. Similarly, documentation shall describe the conditions under which the entropy source is no longer guaranteed to provide sufficient entropy. Methods used to detect failure or degradation of the source shall be included.</section>
    <section id="s-ent-health" title="Health Testing">More specifically, all entropy source health tests and their rationale will be documented. This will include a description of the health tests, the rate and conditions under which each health test is performed (e.g., at startup, continuously, or on-demand), the expected results for each health test, TOE behavior upon entropy source failure, and rationale indicating why each test is believed to be appropriate for detecting one or more failures in the entropy source.</section>
</appendix>
<appendix id="apndx-keyMan" title="Key Management Description">
  <h:p>The documentation of the product’s encryption key management should be detailed enough that, after reading, the evaluator will thoroughly understand the product’s key management and how it meets the requirements to ensure the keys are adequately protected. This documentation should include an essay and diagrams. This documentation is not required to be part of the TSS - it can be submitted as a separate document and marked as developer proprietary.</h:p>
  <h:p>Essay:</h:p>
  <h:p>The essay will provide the following information for all keys in the key chain:</h:p>
  <h:p><h:ul>
    <h:li>The purpose of the key</h:li>
    <h:li>If the key is stored in non-volatile memory</h:li>
    <h:li>How and when the key is protected</h:li>
    <h:li>How and when the key is derived</h:li>
    <h:li>The strength of the key</h:li>
    <h:li>When or if the key would be no longer needed, along with a justification.</h:li>
  </h:ul>The essay will also describe the following topics:</h:p>
  <h:p><h:ul>
    <h:li>A description of all authorization factors that are supported by the product and how each factor is handled, including any conditioning and combining performed.</h:li>
    <h:li>If validation is supported, the process for validation shall be described, noting what value is used for validation and the process used to perform the validation. It shall describe how this process ensures no keys in the key chain are weakened or exposed by this process.</h:li>
    <h:li>The authorization process that leads to the ultimate release of the BEV. This section shall detail the key chain used by the product. It shall describe which keys are used in the protection of the BEV and how they meet the derivation, key wrap, or a combination of the two requirements, including the direct chain from the initial authorization to the BEV. It shall also include any values that add into that key chain or interact with the key chain and the protections that ensure those values do not weaken or expose the overall strength of the key chain.</h:li>
    <h:li>The diagram and essay will clearly illustrate the key hierarchy to ensure that at no point the chain could be broken without a cryptographic exhaust or all of the initial authorization values and the effective strength of the BEV is maintained throughout the Key Chain. 
      </h:li>
    <h:li>A description of the data encryption engine, its components, and details about its implementation (e.g. for hardware: integrated within the device’s main SOC or separate co-processor, for software: initialization of the product, drivers, libraries (if applicable), logical interfaces for encryption/decryption, and areas which are not encrypted (e.g. boot loaders, portions associated with the Master Boot Record (MBRs), partition tables, etc.)). The description should also include the data flow from the device’s host interface to the device’s persistent media storing the data, information on those conditions in which the data bypasses the data encryption engine (e.g. read-write operations to an unencrypted Master Boot Record area). The description should be detailed enough to verify all platforms to ensure that when the user enables encryption, the product encrypts all hard storage devices. It should also describe the platform’s boot initialization, the encryption initialization process, and at what moment the product enables the encryption.</h:li>
    <h:li>The process for destroying keys when they are no longer needed by describing the storage location of all keys and the protection of all keys stored in non-volatile memory.</h:li>

  </h:ul></h:p>
  <h:p>Diagram:
  </h:p>
  <h:p>
    <h:ul>
      <h:li>The diagram will include all keys from the initial authorization factors to the BEV and any keys or values that contribute into the chain. It must list the cryptographic strength of each key and indicate how each key along the chain is protected with either Key Derivation or Key Wrapping (from the allowed options). The diagram should indicate the input used to derive or unwrap each key in the chain.</h:li>
      <h:li>A functional (block) diagram showing the main components (such as memories and processors) and the data path between, for hardware, the device’s host interface and the device’s persistent media storing the data, or for software, the initial steps needed for the activities the TOE performs to ensure it encrypts the storage device entirely when a user or administrator first provisions the product. The hardware encryption diagram shall show the location of the data encryption engine within the data path.</h:li>
      <h:li>The hardware encryption diagram shall show the location of the data encryption engine within the data path. The evaluator shall validate that the hardware encryption diagram contains enough detail showing the main components within the data path and that it clearly identifies the data encryption engine. </h:li>
    </h:ul>
  </h:p>

</appendix>
<!-- Appendix D: Implicity Satisfied Requirements -->
<!-- Appendix G: Use-Case Templates -->
<!-- Appendix H: Acronyms -->
<!-- Appendix I: Bibliography -->

<bibliography>
<!--	  <cc-entry/>   -->
<cc-entry/>
<entry id="bibfdeiee">
    <tag>FDE–EE</tag>
    
    <description>
        <!-- todo: update hyperlink when PP published -->
        <h:a href="https://commoncriteria.github.io/FDEEE/master/FDEEE-release.html">collaborative
          Protection Profile for Full Drive Encryption – Encryption Engine, Version 3.0,
          MMMM DD, 2025</h:a><comment>Adjust date once finalized</comment></description> 
</entry>
 </bibliography>

</PP>
